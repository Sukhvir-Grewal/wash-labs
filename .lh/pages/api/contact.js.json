{
    "sourceFile": "pages/api/contact.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1757907084559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757907319354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,27 +11,38 @@\n     return res.status(400).json({ message: \"All fields are required\" });\n   }\n \n   try {\n-    // create transporter (use Gmail SMTP)\n+    // Configure your transporter (use your Gmail credentials or environment variables)\n     const transporter = nodemailer.createTransport({\n       service: \"gmail\",\n       auth: {\n-        user: process.env.EMAIL_USER, // your washlabs.ca@gmail.com\n-        pass: process.env.EMAIL_PASS, // app password from Gmail\n+        user: process.env.EMAIL_USER, // e.g., washlabs.ca@gmail.com\n+        pass: process.env.EMAIL_PASS, // Gmail app password\n       },\n     });\n \n-    await transporter.sendMail({\n-      from: email,\n-      to: \"washlabs.ca@gmail.com\",\n-      subject: `New message from ${name}`,\n-      text: message,\n-      html: `<p>${message}</p><p>From: ${name} (${email})</p>`,\n-    });\n+    // Compose the email\n+    const mailOptions = {\n+      from: `\"WashLabs Contact Form\" <${process.env.EMAIL_USER}>`,\n+      to: \"washlabs.ca@gmail.com\", // your inbox\n+      subject: `📩 New Contact Message from ${name}`, // clear subject\n+      html: `\n+        <h2 style=\"color:#f97316;\">New Contact Form Submission</h2>\n+        <p><strong>Name:</strong> ${name}</p>\n+        <p><strong>Email:</strong> ${email}</p>\n+        <p><strong>Message:</strong></p>\n+        <p style=\"white-space: pre-line;\">${message}</p>\n+        <hr />\n+        <p style=\"font-size:0.9rem;color:gray;\">This message was sent from the WashLabs website contact form.</p>\n+      `,\n+    };\n \n-    return res.status(200).json({ message: \"Email sent successfully\" });\n+    // Send the email\n+    await transporter.sendMail(mailOptions);\n+\n+    return res.status(200).json({ message: \"Message sent successfully\" });\n   } catch (error) {\n-    console.error(error);\n-    return res.status(500).json({ message: \"Something went wrong\" });\n+    console.error(\"Error sending email:\", error);\n+    return res.status(500).json({ message: \"Failed to send message\" });\n   }\n }\n"
                },
                {
                    "date": 1758176588656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,37 +11,68 @@\n     return res.status(400).json({ message: \"All fields are required\" });\n   }\n \n   try {\n-    // Configure your transporter (use your Gmail credentials or environment variables)\n     const transporter = nodemailer.createTransport({\n       service: \"gmail\",\n       auth: {\n         user: process.env.EMAIL_USER, // e.g., washlabs.ca@gmail.com\n         pass: process.env.EMAIL_PASS, // Gmail app password\n       },\n     });\n \n-    // Compose the email\n-    const mailOptions = {\n+    // 📩 Send to Admin\n+    const adminMail = {\n       from: `\"WashLabs Contact Form\" <${process.env.EMAIL_USER}>`,\n       to: \"washlabs.ca@gmail.com\", // your inbox\n-      subject: `📩 New Contact Message from ${name}`, // clear subject\n+      subject: `📩 New Contact Message from ${name}`,\n       html: `\n         <h2 style=\"color:#f97316;\">New Contact Form Submission</h2>\n         <p><strong>Name:</strong> ${name}</p>\n         <p><strong>Email:</strong> ${email}</p>\n         <p><strong>Message:</strong></p>\n         <p style=\"white-space: pre-line;\">${message}</p>\n         <hr />\n-        <p style=\"font-size:0.9rem;color:gray;\">This message was sent from the WashLabs website contact form.</p>\n+        <p style=\"font-size:0.9rem;color:gray;\">\n+          This message was sent from the WashLabs website contact form.\n+        </p>\n       `,\n+      replyTo: email, // ✅ allows you to reply directly to the sender\n     };\n \n-    // Send the email\n-    await transporter.sendMail(mailOptions);\n+    await transporter.sendMail(adminMail);\n \n-    return res.status(200).json({ message: \"Message sent successfully\" });\n+    // 📩 Confirmation to User (No Reply)\n+    const confirmationMail = {\n+      from: `\"WashLabs (No Reply)\" <no-reply@washlabs.ca>`, // ✅ noreply sender\n+      to: email,\n+      subject: \"✅ We’ve received your message\",\n+      html: `\n+        <div style=\"font-family:Arial, sans-serif; line-height:1.6; color:#333;\">\n+          <h2 style=\"color:#22c55e;\">Hello ${name},</h2>\n+          <p>Thank you for contacting <strong>WashLabs</strong>. We’ve received your message and our team will review it shortly.</p>\n+          \n+          <h3 style=\"color:#f97316;\">Your Message</h3>\n+          <p style=\"white-space: pre-line; border-left:3px solid #f97316; padding-left:8px; color:#444;\">\n+            ${message}\n+          </p>\n+          \n+          <hr/>\n+          <p style=\"font-size:0.9rem; color:gray;\">\n+            WashLabs Team<br/>\n+            📍 Halifax / Dartmouth / Bedford<br/>\n+            ✉️ washlabs.ca@gmail.com<br/>\n+            ⚠️ This is an automated email from a no-reply address. Please do not reply directly.\n+          </p>\n+        </div>\n+      `,\n+    };\n+\n+    await transporter.sendMail(confirmationMail);\n+\n+    return res\n+      .status(200)\n+      .json({ message: \"Message and confirmation sent successfully\" });\n   } catch (error) {\n     console.error(\"Error sending email:\", error);\n     return res.status(500).json({ message: \"Failed to send message\" });\n   }\n"
                },
                {
                    "date": 1758176625679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,32 +1,32 @@\n import nodemailer from \"nodemailer\";\n \n export default async function handler(req, res) {\n-  if (req.method !== \"POST\") {\n-    return res.status(405).json({ message: \"Method not allowed\" });\n-  }\n+    if (req.method !== \"POST\") {\n+        return res.status(405).json({ message: \"Method not allowed\" });\n+    }\n \n-  const { name, email, message } = req.body;\n+    const { name, email, message } = req.body;\n \n-  if (!name || !email || !message) {\n-    return res.status(400).json({ message: \"All fields are required\" });\n-  }\n+    if (!name || !email || !message) {\n+        return res.status(400).json({ message: \"All fields are required\" });\n+    }\n \n-  try {\n-    const transporter = nodemailer.createTransport({\n-      service: \"gmail\",\n-      auth: {\n-        user: process.env.EMAIL_USER, // e.g., washlabs.ca@gmail.com\n-        pass: process.env.EMAIL_PASS, // Gmail app password\n-      },\n-    });\n+    try {\n+        const transporter = nodemailer.createTransport({\n+            service: \"gmail\",\n+            auth: {\n+                user: process.env.EMAIL_USER, // e.g., washlabs.ca@gmail.com\n+                pass: process.env.EMAIL_PASS, // Gmail app password\n+            },\n+        });\n \n-    // 📩 Send to Admin\n-    const adminMail = {\n-      from: `\"WashLabs Contact Form\" <${process.env.EMAIL_USER}>`,\n-      to: \"washlabs.ca@gmail.com\", // your inbox\n-      subject: `📩 New Contact Message from ${name}`,\n-      html: `\n+        // 📩 Send to Admin\n+        const adminMail = {\n+            from: `\"WashLabs Contact Form\" <${process.env.EMAIL_USER}>`,\n+            to: \"washlabs.ca@gmail.com\", // your inbox\n+            subject: `📩 New Contact Message from ${name}`,\n+            html: `\n         <h2 style=\"color:#f97316;\">New Contact Form Submission</h2>\n         <p><strong>Name:</strong> ${name}</p>\n         <p><strong>Email:</strong> ${email}</p>\n         <p><strong>Message:</strong></p>\n@@ -35,19 +35,19 @@\n         <p style=\"font-size:0.9rem;color:gray;\">\n           This message was sent from the WashLabs website contact form.\n         </p>\n       `,\n-      replyTo: email, // ✅ allows you to reply directly to the sender\n-    };\n+            replyTo: email, // ✅ allows you to reply directly to the sender\n+        };\n \n-    await transporter.sendMail(adminMail);\n+        await transporter.sendMail(adminMail);\n \n-    // 📩 Confirmation to User (No Reply)\n-    const confirmationMail = {\n-      from: `\"WashLabs (No Reply)\" <no-reply@washlabs.ca>`, // ✅ noreply sender\n-      to: email,\n-      subject: \"✅ We’ve received your message\",\n-      html: `\n+        // 📩 Confirmation to User (No Reply)\n+        const confirmationMail = {\n+            from: `\"WashLabs (No Reply)\" <no-reply@washlabs.ca>`, // ✅ noreply sender\n+            to: email,\n+            subject: \"✅ We’ve received your message\",\n+            html: `\n         <div style=\"font-family:Arial, sans-serif; line-height:1.6; color:#333;\">\n           <h2 style=\"color:#22c55e;\">Hello ${name},</h2>\n           <p>Thank you for contacting <strong>WashLabs</strong>. We’ve received your message and our team will review it shortly.</p>\n           \n@@ -64,16 +64,16 @@\n             ⚠️ This is an automated email from a no-reply address. Please do not reply directly.\n           </p>\n         </div>\n       `,\n-    };\n+        };\n \n-    await transporter.sendMail(confirmationMail);\n+        await transporter.sendMail(confirmationMail);\n \n-    return res\n-      .status(200)\n-      .json({ message: \"Message and confirmation sent successfully\" });\n-  } catch (error) {\n-    console.error(\"Error sending email:\", error);\n-    return res.status(500).json({ message: \"Failed to send message\" });\n-  }\n+        return res\n+            .status(200)\n+            .json({ message: \"Message and confirmation sent successfully\" });\n+    } catch (error) {\n+        console.error(\"Error sending email:\", error);\n+        return res.status(500).json({ message: \"Failed to send message\" });\n+    }\n }\n"
                },
                {
                    "date": 1760158904794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,307 @@\n+import nodemailer from \"nodemailer\";\r\n+\r\n+const RATE_LIMIT_WINDOW_MS = 60 * 1000;\r\n+const RATE_LIMIT_MAX_REQUESTS = 5;\r\n+const contactRequestLog = new Map();\r\n+\r\n+const getClientIdentifier = (req) => {\r\n+    const forwarded = req.headers[\"x-forwarded-for\"];\r\n+    if (typeof forwarded === \"string\" && forwarded.length > 0) {\r\n+        return forwarded.split(\",\")[0].trim();\r\n+    }\r\n+    return req.socket?.remoteAddress || \"unknown\";\r\n+};\r\n+\r\n+const isRateLimited = (identifier) => {\r\n+    const now = Date.now();\r\n+    const windowStart = now - RATE_LIMIT_WINDOW_MS;\r\n+    const timestamps = contactRequestLog.get(identifier) || [];\r\n+    const recent = timestamps.filter((timestamp) => timestamp > windowStart);\r\n+\r\n+    if (recent.length >= RATE_LIMIT_MAX_REQUESTS) {\r\n+        contactRequestLog.set(identifier, recent);\r\n+        return true;\r\n+    }\r\n+\r\n+    recent.push(now);\r\n+    contactRequestLog.set(identifier, recent);\r\n+    return false;\r\n+};\r\n+\r\n+// Basic HTML escape to prevent injection in emails\r\n+const escapeHtml = (str = \"\") =>\r\n+    String(str)\r\n+        .replace(/&/g, \"&amp;\")\r\n+        .replace(/</g, \"&lt;\")\r\n+        .replace(/>/g, \"&gt;\")\r\n+        .replace(/\"/g, \"&quot;\")\r\n+        .replace(/'/g, \"&#039;\");\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method !== \"POST\") {\r\n+        return res.status(405).json({ message: \"Method not allowed\" });\r\n+    }\r\n+\r\n+    const clientId = getClientIdentifier(req);\r\n+    if (isRateLimited(clientId)) {\r\n+        return res\r\n+            .status(429)\r\n+            .json({ message: \"Too many messages received. Please try again soon.\" });\r\n+    }\r\n+\r\n+    const { name, email, message } = req.body;\r\n+\r\n+    if (!name || !email || !message) {\r\n+        return res.status(400).json({ message: \"All fields are required\" });\r\n+    }\r\n+\r\n+    // Sanitize inputs for email content\r\n+    const safeName = escapeHtml(name);\r\n+    const safeEmail = escapeHtml(email);\r\n+    const safeMessage = escapeHtml(message);\r\n+\r\n+    // Meta/context for admin\r\n+    const receivedAt = new Date().toLocaleString(\"en-CA\", {\r\n+        timeZone: \"America/Halifax\",\r\n+        hour12: false,\r\n+    });\r\n+    const userAgent = (req.headers[\"user-agent\"] || \"\").slice(0, 300);\r\n+    const referer = req.headers[\"referer\"] || req.headers[\"referrer\"] || \"N/A\";\r\n+    const baseUrl = \"https://washlabs.ca\";\r\n+    const brand = {\r\n+        name: \"Wash Labs\",\r\n+        color: \"#0076ff\",\r\n+        logo: `${baseUrl}/images/logo.png`,\r\n+        instagram: \"https://www.instagram.com/wash_labs\",\r\n+        facebook: \"https://www.facebook.com/people/Wash-Labs/61581335875166/\",\r\n+        tiktok: \"https://www.tiktok.com/@wash__labs\",\r\n+        email: \"washlabs.ca@gmail.com\",\r\n+        phone: \"+1 782-827-5010\",\r\n+        areas: \"Halifax • Dartmouth • Bedford • Sackville • Clayton Park • Cole Harbour • Hammonds Plains\",\r\n+        hours: \"7:00 AM – 7:00 PM (Mon–Sun)\",\r\n+        address: \"53 Vitalia Ct, Halifax, NS B3S 0H4\",\r\n+    };\r\n+\r\n+    const { EMAIL_USER, EMAIL_PASS } = process.env;\r\n+    if (!EMAIL_USER || !EMAIL_PASS) {\r\n+        console.error(\"[contact] Missing email credentials\", {\r\n+            hasUser: Boolean(EMAIL_USER),\r\n+            hasPass: Boolean(EMAIL_PASS),\r\n+        });\r\n+        return res.status(500).json({\r\n+            message:\r\n+                \"Our contact inbox is temporarily unavailable. Please reach out via phone or social in the meantime.\",\r\n+        });\r\n+    }\r\n+\r\n+    try {\r\n+        console.info(\"[contact] Configuring email transporter\", { hasUser: true });\r\n+\r\n+        const transporter = nodemailer.createTransport({\r\n+            service: \"gmail\",\r\n+            auth: {\r\n+                user: EMAIL_USER,\r\n+                pass: EMAIL_PASS,\r\n+            },\r\n+        });\r\n+\r\n+        // Admin email (detailed + branded)\r\n+        const adminSubject = `New Contact Message — ${safeName}`;\r\n+        const adminText = `New contact form submission\r\n+\r\n+Name: ${name}\r\n+Email: ${email}\r\n+Message:\r\n+${message}\r\n+\r\n+Received: ${receivedAt}\r\n+Client IP: ${clientId}\r\n+User-Agent: ${userAgent}\r\n+Referrer: ${referer}\r\n+`;\r\n+        const adminHtml = `\r\n+<!doctype html>\r\n+<html>\r\n+  <body style=\"margin:0;padding:0;background:#f6f9fc;font-family:Inter,Arial,sans-serif;\">\r\n+    <table role=\"presentation\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" style=\"background:#f6f9fc;padding:24px 0;\">\r\n+      <tr>\r\n+        <td align=\"center\">\r\n+          <table role=\"presentation\" width=\"640\" cellpadding=\"0\" cellspacing=\"0\" style=\"background:#ffffff;border:1px solid #e6effe;border-radius:12px;overflow:hidden;\">\r\n+            <tr>\r\n+              <td style=\"padding:20px 24px;background:${brand.color};color:#fff;\">\r\n+                <table width=\"100%\">\r\n+                  <tr>\r\n+                    <td align=\"left\" style=\"vertical-align:middle;\">\r\n+                      <img src=\"${brand.logo}\" alt=\"${brand.name}\" height=\"40\" style=\"display:block;border:0;\"/>\r\n+                    </td>\r\n+                    <td align=\"right\" style=\"font-size:14px;opacity:0.9;\">${brand.hours}</td>\r\n+                  </tr>\r\n+                </table>\r\n+              </td>\r\n+            </tr>\r\n+            <tr>\r\n+              <td style=\"padding:24px 24px 8px 24px;\">\r\n+                <h1 style=\"margin:0 0 8px 0;font-size:20px;color:#0f172a;\">New Contact Form Submission</h1>\r\n+                <p style=\"margin:0;color:#334155;font-size:14px;\">Received: <strong>${receivedAt}</strong></p>\r\n+              </td>\r\n+            </tr>\r\n+            <tr>\r\n+              <td style=\"padding:8px 24px 0 24px;\">\r\n+                <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" style=\"font-size:14px;color:#0f172a;\">\r\n+                  <tr><td style=\"padding:6px 0;\"><strong>Name:</strong> ${safeName}</td></tr>\r\n+                  <tr><td style=\"padding:6px 0;\"><strong>Email:</strong> <a href=\"mailto:${safeEmail}\" style=\"color:${brand.color};text-decoration:none;\">${safeEmail}</a></td></tr>\r\n+                  <tr><td style=\"padding:6px 0;\"><strong>Message:</strong></td></tr>\r\n+                  <tr>\r\n+                    <td style=\"padding:12px;border-left:3px solid ${brand.color};background:#f8fbff;color:#334155;white-space:pre-wrap;\">${safeMessage}</td>\r\n+                  </tr>\r\n+                </table>\r\n+              </td>\r\n+            </tr>\r\n+            <tr>\r\n+              <td style=\"padding:16px 24px 0 24px;\">\r\n+                <h2 style=\"margin:0 0 8px 0;font-size:16px;color:#0f172a;\">Context</h2>\r\n+                <p style=\"margin:0;color:#475569;font-size:13px;\"><strong>Client IP:</strong> ${clientId}</p>\r\n+                <p style=\"margin:0;color:#475569;font-size:13px;\"><strong>User-Agent:</strong> ${escapeHtml(userAgent)}</p>\r\n+                <p style=\"margin:0;color:#475569;font-size:13px;\"><strong>Referrer:</strong> ${escapeHtml(referer)}</p>\r\n+              </td>\r\n+            </tr>\r\n+            <tr>\r\n+              <td style=\"padding:20px 24px 24px 24px;\">\r\n+                <table role=\"presentation\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" style=\"background:#f8fbff;border:1px solid #e6effe;border-radius:10px;\">\r\n+                  <tr>\r\n+                    <td style=\"padding:14px 16px;\">\r\n+                      <p style=\"margin:0 0 6px 0;color:#0f172a;font-size:14px;\"><strong>${brand.name}</strong></p>\r\n+                      <p style=\"margin:0;color:#334155;font-size:13px;\">${brand.address}</p>\r\n+                      <p style=\"margin:6px 0 0 0;color:#334155;font-size:13px;\">Areas: ${brand.areas}</p>\r\n+                      <p style=\"margin:6px 0 0 0;color:#334155;font-size:13px;\">📞 ${brand.phone} • ✉️ ${brand.email}</p>\r\n+                      <p style=\"margin:8px 0 0 0;\">\r\n+                        <a href=\"${brand.instagram}\" style=\"color:${brand.color};text-decoration:none;\">Instagram</a> ·\r\n+                        <a href=\"${brand.facebook}\" style=\"color:${brand.color};text-decoration:none;\">Facebook</a> ·\r\n+                        <a href=\"${brand.tiktok}\" style=\"color:${brand.color};text-decoration:none;\">TikTok</a>\r\n+                      </p>\r\n+                    </td>\r\n+                  </tr>\r\n+                </table>\r\n+              </td>\r\n+            </tr>\r\n+          </table>\r\n+        </td>\r\n+      </tr>\r\n+    </table>\r\n+  </body>\r\n+</html>`;\r\n+\r\n+        const adminMail = {\r\n+            from: `\"Wash Labs\" <${EMAIL_USER}>`,\r\n+            to: brand.email,\r\n+            subject: adminSubject,\r\n+            text: adminText,\r\n+            html: adminHtml,\r\n+            replyTo: email, // reply directly to sender\r\n+        };\r\n+\r\n+        await transporter.sendMail(adminMail);\r\n+\r\n+        // Confirmation email (polished + branded)\r\n+        const userSubject = \"We’ve received your message — Wash Labs\";\r\n+        const userText = `Hello ${name},\r\n+\r\n+Thanks for reaching out to Wash Labs. We’ve received your message and will get back to you shortly.\r\n+\r\n+Your Message:\r\n+${message}\r\n+\r\n+Hours: ${brand.hours}\r\n+Phone: ${brand.phone}\r\n+Email: ${brand.email}\r\n+Website: ${baseUrl}\r\n+\r\n+If this wasn’t you, please ignore this email.\r\n+\r\n+— Wash Labs, Halifax NS`;\r\n+\r\n+        const userHtml = `\r\n+<!doctype html>\r\n+<html>\r\n+  <body style=\"margin:0;padding:0;background:#f6f9fc;font-family:Inter,Arial,sans-serif;\">\r\n+    <table role=\"presentation\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" style=\"background:#f6f9fc;padding:24px 0;\">\r\n+      <tr>\r\n+        <td align=\"center\">\r\n+          <table role=\"presentation\" width=\"640\" cellpadding=\"0\" cellspacing=\"0\" style=\"background:#ffffff;border:1px solid #e6effe;border-radius:12px;overflow:hidden;\">\r\n+            <tr>\r\n+              <td style=\"padding:20px 24px;background:${brand.color};color:#fff;\">\r\n+                <table width=\"100%\">\r\n+                  <tr>\r\n+                    <td align=\"left\" style=\"vertical-align:middle;\">\r\n+                      <a href=\"${baseUrl}\" style=\"text-decoration:none;color:#fff;\">\r\n+                        <img src=\"${brand.logo}\" alt=\"${brand.name}\" height=\"40\" style=\"display:block;border:0;\"/>\r\n+                      </a>\r\n+                    </td>\r\n+                    <td align=\"right\" style=\"font-size:14px;opacity:0.9;\">${brand.hours}</td>\r\n+                  </tr>\r\n+                </table>\r\n+              </td>\r\n+            </tr>\r\n+            <tr>\r\n+              <td style=\"padding:24px;\">\r\n+                <h1 style=\"margin:0 0 8px 0;font-size:20px;color:#0f172a;\">Thanks for contacting ${brand.name}, ${safeName}!</h1>\r\n+                <p style=\"margin:0 0 14px 0;color:#334155;font-size:14px;\">\r\n+                  We’ve received your message and our team will get back to you soon.\r\n+                </p>\r\n+                <h2 style=\"margin:0 0 8px 0;font-size:16px;color:#0f172a;\">Your Message</h2>\r\n+                <div style=\"padding:12px;border-left:3px solid ${brand.color};background:#f8fbff;color:#334155;white-space:pre-wrap;\">\r\n+                  ${safeMessage}\r\n+                </div>\r\n+                <p style=\"margin:16px 0 0 0;color:#475569;font-size:13px;\">Sent on: <strong>${receivedAt}</strong></p>\r\n+              </td>\r\n+            </tr>\r\n+            <tr>\r\n+              <td style=\"padding:0 24px 24px 24px;\">\r\n+                <table role=\"presentation\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" style=\"background:#f8fbff;border:1px solid #e6effe;border-radius:10px;\">\r\n+                  <tr>\r\n+                    <td style=\"padding:14px 16px;\">\r\n+                      <p style=\"margin:0 0 6px 0;color:#0f172a;font-size:14px;\"><strong>Need to reach us sooner?</strong></p>\r\n+                      <p style=\"margin:0;color:#334155;font-size:13px;\">📞 ${brand.phone} • ✉️ ${brand.email}</p>\r\n+                      <p style=\"margin:6px 0 0 0;color:#334155;font-size:13px;\">Book directly: <a href=\"${baseUrl}/#services\" style=\"color:${brand.color};text-decoration:none;\">washlabs.ca/#services</a></p>\r\n+                      <p style=\"margin:8px 0 0 0;\">\r\n+                        <a href=\"${brand.instagram}\" style=\"color:${brand.color};text-decoration:none;\">Instagram</a> ·\r\n+                        <a href=\"${brand.facebook}\" style=\"color:${brand.color};text-decoration:none;\">Facebook</a> ·\r\n+                        <a href=\"${brand.tiktok}\" style=\"color:${brand.color};text-decoration:none;\">TikTok</a>\r\n+                      </p>\r\n+                      <p style=\"margin:12px 0 0 0;color:#64748b;font-size:12px;\">\r\n+                        This is an automated confirmation. Please don’t reply to this email.\r\n+                      </p>\r\n+                    </td>\r\n+                  </tr>\r\n+                </table>\r\n+              </td>\r\n+            </tr>\r\n+          </table>\r\n+        </td>\r\n+      </tr>\r\n+    </table>\r\n+  </body>\r\n+</html>`;\r\n+\r\n+        const confirmationMail = {\r\n+            from: `\"Wash Labs\" <${EMAIL_USER}>`,\r\n+            to: email,\r\n+            subject: userSubject,\r\n+            text: userText,\r\n+            html: userHtml,\r\n+            replyTo: `${brand.email}`, // direct replies go to your inbox\r\n+        };\r\n+\r\n+        await transporter.sendMail(confirmationMail);\r\n+\r\n+        return res\r\n+            .status(200)\r\n+            .json({ message: \"Message and confirmation sent successfully\" });\r\n+    } catch (error) {\r\n+        console.error(\"[contact] Error sending email\", {\r\n+            error: error instanceof Error ? error.message : error,\r\n+            client: clientId,\r\n+        });\r\n+        return res.status(500).json({ message: \"Failed to send message\" });\r\n+    }\r\n+}\r\n"
                }
            ],
            "date": 1757907084559,
            "name": "Commit-0",
            "content": "import nodemailer from \"nodemailer\";\n\nexport default async function handler(req, res) {\n  if (req.method !== \"POST\") {\n    return res.status(405).json({ message: \"Method not allowed\" });\n  }\n\n  const { name, email, message } = req.body;\n\n  if (!name || !email || !message) {\n    return res.status(400).json({ message: \"All fields are required\" });\n  }\n\n  try {\n    // create transporter (use Gmail SMTP)\n    const transporter = nodemailer.createTransport({\n      service: \"gmail\",\n      auth: {\n        user: process.env.EMAIL_USER, // your washlabs.ca@gmail.com\n        pass: process.env.EMAIL_PASS, // app password from Gmail\n      },\n    });\n\n    await transporter.sendMail({\n      from: email,\n      to: \"washlabs.ca@gmail.com\",\n      subject: `New message from ${name}`,\n      text: message,\n      html: `<p>${message}</p><p>From: ${name} (${email})</p>`,\n    });\n\n    return res.status(200).json({ message: \"Email sent successfully\" });\n  } catch (error) {\n    console.error(error);\n    return res.status(500).json({ message: \"Something went wrong\" });\n  }\n}\n"
        }
    ]
}