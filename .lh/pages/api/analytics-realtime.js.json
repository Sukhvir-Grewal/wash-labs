{
    "sourceFile": "pages/api/analytics-realtime.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1760845224362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760845604106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n \r\n export default async function handler(req, res) {\r\n   try {\r\n     const { client, propertyId } = getClientAndProperty();\r\n-    const { excludeMe, topPages } = req.query || {};\r\n+    const { excludeMe } = req.query || {};\r\n \r\n     // 1) Total active users (no dimensions)\r\n     const [totalResp] = await client.runRealtimeReport({\r\n       property: `properties/${propertyId}`,\r\n@@ -45,25 +45,9 @@\n \r\n     if (excludeMe && totalActive > 0) totalActive = totalActive - 1;\r\n     if (totalActive < 0) totalActive = 0;\r\n \r\n-    let pages = [];\r\n-    if (topPages) {\r\n-      // 2) Top pages by active users\r\n-      const [pagesResp] = await client.runRealtimeReport({\r\n-        property: `properties/${propertyId}`,\r\n-        metrics: [{ name: 'activeUsers' }],\r\n-        dimensions: [{ name: 'pagePathPlusQueryString' }],\r\n-        orderBys: [{ metric: { metricName: 'activeUsers' }, desc: true }],\r\n-        limit: 10,\r\n-      });\r\n-      pages = (pagesResp?.rows || []).map(r => ({\r\n-        path: r.dimensionValues?.[0]?.value || '/',\r\n-        active: Number(r.metricValues?.[0]?.value || 0),\r\n-      }));\r\n-    }\r\n-\r\n-    res.status(200).json({ success: true, totalActive, pages });\r\n+    res.status(200).json({ success: true, totalActive });\r\n   } catch (e) {\r\n     const name = e?.name || 'Error';\r\n     const message = e?.message || 'Unknown error';\r\n     const details = Array.isArray(e?.errors) && e.errors.length ? e.errors[0]?.message : undefined;\r\n"
                }
            ],
            "date": 1760845224362,
            "name": "Commit-0",
            "content": "import { BetaAnalyticsDataClient } from '@google-analytics/data';\r\n\r\nfunction normalizePrivateKey(raw) {\r\n  if (!raw) return raw;\r\n  let key = raw.trim();\r\n  if ((key.startsWith('\"') && key.endsWith('\"')) || (key.startsWith(\"'\") && key.endsWith(\"'\"))) {\r\n    key = key.slice(1, -1);\r\n  }\r\n  if (key.includes('\\\\n')) {\r\n    key = key.replace(/\\\\n/g, '\\n');\r\n  }\r\n  return key;\r\n}\r\n\r\nfunction getClientAndProperty() {\r\n  const propertyId = process.env.GA4_PROPERTY_ID;\r\n  const clientEmail = process.env.GA4_CLIENT_EMAIL;\r\n  const privateKey = normalizePrivateKey(process.env.GA4_PRIVATE_KEY);\r\n  if (!propertyId || !clientEmail || !privateKey) {\r\n    throw new Error('Missing GA4 credentials in environment');\r\n  }\r\n  const client = new BetaAnalyticsDataClient({\r\n    credentials: { client_email: clientEmail, private_key: privateKey },\r\n  });\r\n  return { client, propertyId };\r\n}\r\n\r\nexport default async function handler(req, res) {\r\n  try {\r\n    const { client, propertyId } = getClientAndProperty();\r\n    const { excludeMe, topPages } = req.query || {};\r\n\r\n    // 1) Total active users (no dimensions)\r\n    const [totalResp] = await client.runRealtimeReport({\r\n      property: `properties/${propertyId}`,\r\n      metrics: [{ name: 'activeUsers' }],\r\n    });\r\n    let totalActive = 0;\r\n    // Prefer metricTotals if present\r\n    if (Array.isArray(totalResp?.totals) && totalResp.totals[0]?.metricValues?.[0]?.value) {\r\n      totalActive = Number(totalResp.totals[0].metricValues[0].value) || 0;\r\n    } else if (Array.isArray(totalResp?.rows)) {\r\n      totalActive = totalResp.rows.reduce((sum, r) => sum + Number(r.metricValues?.[0]?.value || 0), 0);\r\n    }\r\n\r\n    if (excludeMe && totalActive > 0) totalActive = totalActive - 1;\r\n    if (totalActive < 0) totalActive = 0;\r\n\r\n    let pages = [];\r\n    if (topPages) {\r\n      // 2) Top pages by active users\r\n      const [pagesResp] = await client.runRealtimeReport({\r\n        property: `properties/${propertyId}`,\r\n        metrics: [{ name: 'activeUsers' }],\r\n        dimensions: [{ name: 'pagePathPlusQueryString' }],\r\n        orderBys: [{ metric: { metricName: 'activeUsers' }, desc: true }],\r\n        limit: 10,\r\n      });\r\n      pages = (pagesResp?.rows || []).map(r => ({\r\n        path: r.dimensionValues?.[0]?.value || '/',\r\n        active: Number(r.metricValues?.[0]?.value || 0),\r\n      }));\r\n    }\r\n\r\n    res.status(200).json({ success: true, totalActive, pages });\r\n  } catch (e) {\r\n    const name = e?.name || 'Error';\r\n    const message = e?.message || 'Unknown error';\r\n    const details = Array.isArray(e?.errors) && e.errors.length ? e.errors[0]?.message : undefined;\r\n    res.status(500).json({ success: false, error: `${name}: ${message}`, details });\r\n  }\r\n}\r\n"
        }
    ]
}