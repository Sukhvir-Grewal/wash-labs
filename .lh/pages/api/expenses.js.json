{
    "sourceFile": "pages/api/expenses.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1760895589046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760896113858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+import { getDb } from \"../../lib/mongodb\";\r\n+\r\n+// Expected expense shape: { date: 'YYYY-MM-DD', amount: number, category: 'one-time'|'chemicals'|'other', note?: string }\r\n+export default async function handler(req, res) {\r\n+  try {\r\n+    const db = await getDb();\r\n+    const col = db.collection('expenses');\r\n+    if (req.method === 'GET') {\r\n+      const items = await col.find({}).sort({ date: -1, _id: -1 }).toArray();\r\n+      return res.status(200).json({ success: true, items });\r\n+    }\r\n+    if (req.method === 'POST') {\r\n+      const { date, amount, category, note, supplier, productName, taxIncluded, taxRate, baseAmount } = req.body || {};\r\n+      if (!date || !/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.test(date)) {\r\n+        return res.status(400).json({ success: false, error: 'Invalid or missing date (YYYY-MM-DD)' });\r\n+      }\r\n+      const amt = Number(amount);\r\n+      if (!Number.isFinite(amt) || amt < 0) {\r\n+        return res.status(400).json({ success: false, error: 'Invalid amount' });\r\n+      }\r\n+      const allowed = ['one-time', 'chemicals', 'other'];\r\n+      const cat = String(category || '').toLowerCase();\r\n+      if (!allowed.includes(cat)) {\r\n+        return res.status(400).json({ success: false, error: 'Invalid category' });\r\n+      }\r\n+      const doc = {\r\n+        date,\r\n+        amount: amt,\r\n+        category: cat,\r\n+        // Optional fields\r\n+        supplier: (supplier ? String(supplier) : '').trim(),\r\n+        productName: (productName ? String(productName) : '').trim(),\r\n+        note: note ? String(note) : '',\r\n+        // Tax metadata (optional)\r\n+        taxIncluded: !!taxIncluded,\r\n+        taxRate: Number.isFinite(Number(taxRate)) ? Number(taxRate) : (taxIncluded ? 0.15 : 0),\r\n+        baseAmount: Number.isFinite(Number(baseAmount)) ? Number(baseAmount) : undefined,\r\n+        createdAt: new Date().toISOString(),\r\n+      };\r\n+      const result = await col.insertOne(doc);\r\n+      return res.status(200).json({ success: true, insertedId: result.insertedId, item: { ...doc, _id: result.insertedId } });\r\n+    }\r\n+    res.setHeader('Allow', ['GET', 'POST']);\r\n+    return res.status(405).json({ success: false, error: 'Method not allowed' });\r\n+  } catch (e) {\r\n+    console.error('[expenses] error', e);\r\n+    return res.status(500).json({ success: false, error: e?.message || 'Server error' });\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1761077701113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import { getDb } from \"../../lib/mongodb\";\r\n+import { ObjectId } from \"mongodb\";\r\n \r\n // Expected expense shape: { date: 'YYYY-MM-DD', amount: number, category: 'one-time'|'chemicals'|'other', note?: string }\r\n export default async function handler(req, res) {\r\n   try {\r\n@@ -39,45 +40,24 @@\n       };\r\n       const result = await col.insertOne(doc);\r\n       return res.status(200).json({ success: true, insertedId: result.insertedId, item: { ...doc, _id: result.insertedId } });\r\n     }\r\n-    res.setHeader('Allow', ['GET', 'POST']);\r\n-    return res.status(405).json({ success: false, error: 'Method not allowed' });\r\n-  } catch (e) {\r\n-    console.error('[expenses] error', e);\r\n-    return res.status(500).json({ success: false, error: e?.message || 'Server error' });\r\n-  }\r\n-}\r\n-import { getDb } from \"../../lib/mongodb\";\r\n-\r\n-// Expected expense shape: { date: 'YYYY-MM-DD', amount: number, category: 'one-time'|'chemicals'|'other', note?: string }\r\n-export default async function handler(req, res) {\r\n-  try {\r\n-    const db = await getDb();\r\n-    const col = db.collection('expenses');\r\n-    if (req.method === 'GET') {\r\n-      const items = await col.find({}).sort({ date: -1, _id: -1 }).toArray();\r\n-      return res.status(200).json({ success: true, items });\r\n-    }\r\n-    if (req.method === 'POST') {\r\n-      const { date, amount, category, note } = req.body || {};\r\n-      if (!date || !/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.test(date)) {\r\n-        return res.status(400).json({ success: false, error: 'Invalid or missing date (YYYY-MM-DD)' });\r\n+    if (req.method === 'DELETE') {\r\n+      const { id } = req.query || {};\r\n+      if (!id || typeof id !== 'string') {\r\n+        return res.status(400).json({ success: false, error: 'Missing expense id' });\r\n       }\r\n-      const amt = Number(amount);\r\n-      if (!Number.isFinite(amt) || amt < 0) {\r\n-        return res.status(400).json({ success: false, error: 'Invalid amount' });\r\n+      try {\r\n+        const result = await col.deleteOne({ _id: new ObjectId(id) });\r\n+        if (result.deletedCount === 1) {\r\n+          return res.status(200).json({ success: true });\r\n+        }\r\n+        return res.status(404).json({ success: false, error: 'Expense not found' });\r\n+      } catch (err) {\r\n+        return res.status(400).json({ success: false, error: 'Invalid expense id' });\r\n       }\r\n-      const allowed = ['one-time', 'chemicals', 'other'];\r\n-      const cat = String(category || '').toLowerCase();\r\n-      if (!allowed.includes(cat)) {\r\n-        return res.status(400).json({ success: false, error: 'Invalid category' });\r\n-      }\r\n-      const doc = { date, amount: amt, category: cat, note: note || '' , createdAt: new Date().toISOString() };\r\n-      const result = await col.insertOne(doc);\r\n-      return res.status(200).json({ success: true, insertedId: result.insertedId, item: { ...doc, _id: result.insertedId } });\r\n     }\r\n-    res.setHeader('Allow', ['GET', 'POST']);\r\n+    res.setHeader('Allow', ['GET', 'POST', 'DELETE']);\r\n     return res.status(405).json({ success: false, error: 'Method not allowed' });\r\n   } catch (e) {\r\n     console.error('[expenses] error', e);\r\n     return res.status(500).json({ success: false, error: e?.message || 'Server error' });\r\n"
                }
            ],
            "date": 1760895589046,
            "name": "Commit-0",
            "content": "import { getDb } from \"../../lib/mongodb\";\r\n\r\n// Expected expense shape: { date: 'YYYY-MM-DD', amount: number, category: 'one-time'|'chemicals'|'other', note?: string }\r\nexport default async function handler(req, res) {\r\n  try {\r\n    const db = await getDb();\r\n    const col = db.collection('expenses');\r\n    if (req.method === 'GET') {\r\n      const items = await col.find({}).sort({ date: -1, _id: -1 }).toArray();\r\n      return res.status(200).json({ success: true, items });\r\n    }\r\n    if (req.method === 'POST') {\r\n      const { date, amount, category, note } = req.body || {};\r\n      if (!date || !/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.test(date)) {\r\n        return res.status(400).json({ success: false, error: 'Invalid or missing date (YYYY-MM-DD)' });\r\n      }\r\n      const amt = Number(amount);\r\n      if (!Number.isFinite(amt) || amt < 0) {\r\n        return res.status(400).json({ success: false, error: 'Invalid amount' });\r\n      }\r\n      const allowed = ['one-time', 'chemicals', 'other'];\r\n      const cat = String(category || '').toLowerCase();\r\n      if (!allowed.includes(cat)) {\r\n        return res.status(400).json({ success: false, error: 'Invalid category' });\r\n      }\r\n      const doc = { date, amount: amt, category: cat, note: note || '' , createdAt: new Date().toISOString() };\r\n      const result = await col.insertOne(doc);\r\n      return res.status(200).json({ success: true, insertedId: result.insertedId, item: { ...doc, _id: result.insertedId } });\r\n    }\r\n    res.setHeader('Allow', ['GET', 'POST']);\r\n    return res.status(405).json({ success: false, error: 'Method not allowed' });\r\n  } catch (e) {\r\n    console.error('[expenses] error', e);\r\n    return res.status(500).json({ success: false, error: e?.message || 'Server error' });\r\n  }\r\n}\r\n"
        }
    ]
}