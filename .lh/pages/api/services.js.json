{
    "sourceFile": "pages/api/services.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1761335959372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761405101883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import { promises as fs } from \"fs\";\r\n import path from \"path\";\r\n+import { pathToFileURL } from \"url\";\r\n \r\n const servicesFilePath = path.join(process.cwd(), \"data\", \"services.js\");\r\n \r\n function sanitizeNumber(value) {\r\n@@ -25,15 +26,24 @@\n   const servicesJson = JSON.stringify(services, null, 4);\r\n   return `export const SERVICES = ${servicesJson};\\n\\nexport function getServiceById(id) {\\n    return SERVICES.find((service) => service.id === id);\\n}\\n`;\r\n }\r\n \r\n+async function readServicesFromFile() {\r\n+  const fileUrl = `${pathToFileURL(servicesFilePath).href}?update=${Date.now()}`;\r\n+  const module = await import(/* webpackIgnore: true */ fileUrl);\r\n+  if (!module || !Array.isArray(module.SERVICES)) {\r\n+    throw new Error(\"SERVICES export not found\");\r\n+  }\r\n+  return module.SERVICES;\r\n+}\r\n+\r\n export default async function handler(request, response) {\r\n   if (request.method === \"GET\") {\r\n     try {\r\n-      const { SERVICES } = await import(`../../data/services.js?update=${Date.now()}`);\r\n-      return response.status(200).json({ services: SERVICES });\r\n+      const services = await readServicesFromFile();\r\n+      return response.status(200).json({ services });\r\n     } catch (error) {\r\n-      return response.status(500).json({ error: \"Failed to load services.\" });\r\n+  return response.status(500).json({ error: error.message || \"Failed to load services.\" });\r\n     }\r\n   }\r\n \r\n   if (request.method === \"PUT\") {\r\n@@ -67,9 +77,9 @@\n       await fs.writeFile(servicesFilePath, fileContent, \"utf8\");\r\n \r\n       return response.status(200).json({ services: normalizedServices });\r\n     } catch (error) {\r\n-      return response.status(500).json({ error: error.message || \"Failed to update services.\" });\r\n+  return response.status(500).json({ error: error.message || \"Failed to update services.\" });\r\n     }\r\n   }\r\n \r\n   response.setHeader(\"Allow\", [\"GET\", \"PUT\"]);\r\n"
                },
                {
                    "date": 1761450522561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,39 @@\n+import { getDb } from \"../../lib/mongodb\";\r\n+\r\n+export default async function handler(req, res) {\r\n+  const method = req.method;\r\n+  try {\r\n+    const db = await getDb();\r\n+    const col = db.collection(\"services\");\r\n+\r\n+    if (method === \"GET\") {\r\n+      const services = await col.find({}).sort({ title: 1 }).toArray();\r\n+      res.setHeader('Cache-Control', 's-maxage=300, stale-while-revalidate=300');\r\n+      return res.status(200).json({ services });\r\n+    }\r\n+\r\n+    if (method === \"PUT\") {\r\n+      const body = req.body || {};\r\n+      const services = Array.isArray(body.services) ? body.services : [];\r\n+      if (!services.length) {\r\n+        return res.status(400).json({ error: \"No services provided\" });\r\n+      }\r\n+      const bulkOps = services.map((svc) => ({\r\n+        updateOne: {\r\n+          filter: { id: svc.id },\r\n+          update: { $set: svc },\r\n+          upsert: true,\r\n+        },\r\n+      }));\r\n+      await col.bulkWrite(bulkOps, { ordered: false });\r\n+      const updated = await col.find({}).sort({ title: 1 }).toArray();\r\n+      return res.status(200).json({ services: updated });\r\n+    }\r\n+\r\n+    res.setHeader(\"Allow\", [\"GET\", \"PUT\"]);\r\n+    return res.status(405).json({ error: `Method ${method} Not Allowed` });\r\n+  } catch (err) {\r\n+    console.error(\"/api/services error:\", err);\r\n+    return res.status(500).json({ error: \"Internal server error\" });\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1761450821151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,43 @@\n+import { getDb } from \"../../lib/mongodb\";\r\n+\r\n+export default async function handler(req, res) {\r\n+  const method = req.method;\r\n+  try {\r\n+    const db = await getDb();\r\n+    const col = db.collection(\"services\");\r\n+\r\n+    if (method === \"GET\") {\r\n+      const services = await col.find({}).sort({ title: 1 }).toArray();\r\n+      res.setHeader('Cache-Control', 's-maxage=300, stale-while-revalidate=300');\r\n+      return res.status(200).json({ services });\r\n+    }\r\n+\r\n+    if (method === \"PUT\") {\r\n+      const body = req.body || {};\r\n+      const services = Array.isArray(body.services) ? body.services : [];\r\n+      if (!services.length) {\r\n+        return res.status(400).json({ error: \"No services provided\" });\r\n+      }\r\n+      // Remove _id from each service to avoid immutable field error\r\n+      const bulkOps = services.map((svc) => {\r\n+        const { _id, ...rest } = svc;\r\n+        return {\r\n+          updateOne: {\r\n+            filter: { id: rest.id },\r\n+            update: { $set: rest },\r\n+            upsert: true,\r\n+          },\r\n+        };\r\n+      });\r\n+      await col.bulkWrite(bulkOps, { ordered: false });\r\n+      const updated = await col.find({}).sort({ title: 1 }).toArray();\r\n+      return res.status(200).json({ services: updated });\r\n+    }\r\n+\r\n+    res.setHeader(\"Allow\", [\"GET\", \"PUT\"]);\r\n+    return res.status(405).json({ error: `Method ${method} Not Allowed` });\r\n+  } catch (err) {\r\n+    console.error(\"/api/services error:\", err);\r\n+    return res.status(500).json({ error: \"Internal server error\" });\r\n+  }\r\n+}\r\n"
                }
            ],
            "date": 1761335959372,
            "name": "Commit-0",
            "content": "import { promises as fs } from \"fs\";\r\nimport path from \"path\";\r\n\r\nconst servicesFilePath = path.join(process.cwd(), \"data\", \"services.js\");\r\n\r\nfunction sanitizeNumber(value) {\r\n  if (value === null || value === undefined || value === \"\") return null;\r\n  const numeric = Number(value);\r\n  return Number.isFinite(numeric) ? numeric : null;\r\n}\r\n\r\nfunction sanitizeString(value) {\r\n  if (value === null || value === undefined) return \"\";\r\n  return String(value).trim();\r\n}\r\n\r\nfunction sanitizeFeatureList(list) {\r\n  if (!Array.isArray(list)) return [];\r\n  return list\r\n    .map((item) => sanitizeString(item))\r\n    .filter((item) => item.length > 0);\r\n}\r\n\r\nfunction formatServicesFileContent(services) {\r\n  const servicesJson = JSON.stringify(services, null, 4);\r\n  return `export const SERVICES = ${servicesJson};\\n\\nexport function getServiceById(id) {\\n    return SERVICES.find((service) => service.id === id);\\n}\\n`;\r\n}\r\n\r\nexport default async function handler(request, response) {\r\n  if (request.method === \"GET\") {\r\n    try {\r\n      const { SERVICES } = await import(`../../data/services.js?update=${Date.now()}`);\r\n      return response.status(200).json({ services: SERVICES });\r\n    } catch (error) {\r\n      return response.status(500).json({ error: \"Failed to load services.\" });\r\n    }\r\n  }\r\n\r\n  if (request.method === \"PUT\") {\r\n    try {\r\n      const { services } = request.body || {};\r\n\r\n      if (!Array.isArray(services)) {\r\n        return response.status(400).json({ error: \"Payload must include a services array.\" });\r\n      }\r\n\r\n      const normalizedServices = services.map((service) => {\r\n        const id = sanitizeString(service.id);\r\n        if (!id) {\r\n          throw new Error(\"Each service must include an id.\");\r\n        }\r\n\r\n        return {\r\n          id,\r\n          title: sanitizeString(service.title),\r\n          summary: sanitizeString(service.summary),\r\n          basePrice: sanitizeNumber(service.basePrice),\r\n          revivePrice: sanitizeNumber(service.revivePrice),\r\n          durationMinutes: sanitizeNumber(service.durationMinutes),\r\n          comingSoon: Boolean(service.comingSoon),\r\n          baseFeatures: sanitizeFeatureList(service.baseFeatures),\r\n          reviveFeatures: sanitizeFeatureList(service.reviveFeatures),\r\n        };\r\n      });\r\n\r\n      const fileContent = formatServicesFileContent(normalizedServices);\r\n      await fs.writeFile(servicesFilePath, fileContent, \"utf8\");\r\n\r\n      return response.status(200).json({ services: normalizedServices });\r\n    } catch (error) {\r\n      return response.status(500).json({ error: error.message || \"Failed to update services.\" });\r\n    }\r\n  }\r\n\r\n  response.setHeader(\"Allow\", [\"GET\", \"PUT\"]);\r\n  return response.status(405).json({ error: \"Method not allowed.\" });\r\n}\r\n"
        }
    ]
}