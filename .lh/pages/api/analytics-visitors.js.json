{
    "sourceFile": "pages/api/analytics-visitors.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1760682512924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760844547371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,71 @@\n+// Minimal GA4 Data API proxy. Requires env vars:\r\n+// GA4_PROPERTY_ID, GA4_CLIENT_EMAIL, GA4_PRIVATE_KEY (JSON escaped or raw with \\n)\r\n+// This endpoint returns last 30 days total users and daily users.\r\n+\r\n+import { BetaAnalyticsDataClient } from '@google-analytics/data';\r\n+\r\n+function normalizePrivateKey(raw) {\r\n+  if (!raw) return raw;\r\n+  let key = raw.trim();\r\n+  // Remove wrapping quotes if set in env: \"-----BEGIN ... -----END ...\"\r\n+  if ((key.startsWith('\"') && key.endsWith('\"')) || (key.startsWith(\"'\") && key.endsWith(\"'\"))) {\r\n+    key = key.slice(1, -1);\r\n+  }\r\n+  // If the key has literal \\n sequences, convert them to newlines\r\n+  if (key.includes('\\\\n')) {\r\n+    key = key.replace(/\\\\n/g, '\\n');\r\n+  }\r\n+  return key;\r\n+}\r\n+\r\n+function getAnalyticsClient() {\r\n+  const propertyId = process.env.GA4_PROPERTY_ID;\r\n+  const clientEmail = process.env.GA4_CLIENT_EMAIL;\r\n+  let privateKey = normalizePrivateKey(process.env.GA4_PRIVATE_KEY);\r\n+  if (!propertyId || !clientEmail || !privateKey) {\r\n+    throw new Error('Missing GA4 credentials in environment');\r\n+  }\r\n+  const client = new BetaAnalyticsDataClient({\r\n+    credentials: {\r\n+      client_email: clientEmail,\r\n+      private_key: privateKey,\r\n+    },\r\n+  });\r\n+  return { client, propertyId };\r\n+}\r\n+\r\n+export default async function handler(req, res) {\r\n+  if (req.method !== 'GET') return res.status(405).json({ error: 'Method not allowed' });\r\n+  try {\r\n+    const { client, propertyId } = getAnalyticsClient();\r\n+\r\n+    // Total users last 30 days\r\n+    const [totals] = await client.runReport({\r\n+      property: `properties/${propertyId}`,\r\n+      dateRanges: [{ startDate: '30daysAgo', endDate: 'today' }],\r\n+      metrics: [{ name: 'totalUsers' }],\r\n+    });\r\n+    const totalUsers = totals?.rows?.[0]?.metricValues?.[0]?.value || '0';\r\n+\r\n+    // Daily users last 14 days\r\n+    const [daily] = await client.runReport({\r\n+      property: `properties/${propertyId}`,\r\n+      dateRanges: [{ startDate: '14daysAgo', endDate: 'today' }],\r\n+      dimensions: [{ name: 'date' }],\r\n+      metrics: [{ name: 'totalUsers' }],\r\n+      orderBys: [{ dimension: { dimensionName: 'date' } }],\r\n+    });\r\n+\r\n+    const dailySeries = (daily?.rows || []).map(r => ({\r\n+      date: r.dimensionValues?.[0]?.value,\r\n+      users: Number(r.metricValues?.[0]?.value || 0),\r\n+    }));\r\n+\r\n+    res.status(200).json({ success: true, totalUsers: Number(totalUsers), daily: dailySeries });\r\n+  } catch (e) {\r\n+    const name = e?.name || 'Error';\r\n+    const message = e?.message || 'Unknown error';\r\n+    const details = Array.isArray(e?.errors) && e.errors.length ? e.errors[0]?.message : undefined;\r\n+    res.status(500).json({ success: false, error: `${name}: ${message}`, details });\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1761927993405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n // GA4_PROPERTY_ID, GA4_CLIENT_EMAIL, GA4_PRIVATE_KEY (JSON escaped or raw with \\n)\r\n // This endpoint returns last 30 days total users and daily users.\r\n \r\n import { BetaAnalyticsDataClient } from '@google-analytics/data';\r\n+import { requireAuth } from '../../lib/auth';\r\n \r\n function normalizePrivateKey(raw) {\r\n   if (!raw) return raw;\r\n   let key = raw.trim();\r\n@@ -33,9 +34,9 @@\n   });\r\n   return { client, propertyId };\r\n }\r\n \r\n-export default async function handler(req, res) {\r\n+async function handler(req, res) {\r\n   if (req.method !== 'GET') return res.status(405).json({ error: 'Method not allowed' });\r\n   try {\r\n     const { client, propertyId } = getAnalyticsClient();\r\n \r\n@@ -68,60 +69,7 @@\n     const details = Array.isArray(e?.errors) && e.errors.length ? e.errors[0]?.message : undefined;\r\n     res.status(500).json({ success: false, error: `${name}: ${message}`, details });\r\n   }\r\n }\r\n-// Minimal GA4 Data API proxy. Requires env vars:\r\n-// GA4_PROPERTY_ID, GA4_CLIENT_EMAIL, GA4_PRIVATE_KEY (JSON escaped or raw with \\n)\r\n-// This endpoint returns last 30 days total users and daily users.\r\n \r\n-import { BetaAnalyticsDataClient } from '@google-analytics/data';\r\n-\r\n-function getAnalyticsClient() {\r\n-  const propertyId = process.env.GA4_PROPERTY_ID;\r\n-  const clientEmail = process.env.GA4_CLIENT_EMAIL;\r\n-  let privateKey = process.env.GA4_PRIVATE_KEY;\r\n-  if (!propertyId || !clientEmail || !privateKey) {\r\n-    throw new Error('Missing GA4 credentials in environment');\r\n-  }\r\n-  // Handle escaped newlines\r\n-  privateKey = privateKey.replace(/\\\\n/g, '\\n');\r\n-  const client = new BetaAnalyticsDataClient({\r\n-    credentials: {\r\n-      client_email: clientEmail,\r\n-      private_key: privateKey,\r\n-    },\r\n-  });\r\n-  return { client, propertyId };\r\n-}\r\n-\r\n-export default async function handler(req, res) {\r\n-  if (req.method !== 'GET') return res.status(405).json({ error: 'Method not allowed' });\r\n-  try {\r\n-    const { client, propertyId } = getAnalyticsClient();\r\n-\r\n-    // Total users last 30 days\r\n-    const [totals] = await client.runReport({\r\n-      property: `properties/${propertyId}`,\r\n-      dateRanges: [{ startDate: '30daysAgo', endDate: 'today' }],\r\n-      metrics: [{ name: 'totalUsers' }],\r\n-    });\r\n-    const totalUsers = totals?.rows?.[0]?.metricValues?.[0]?.value || '0';\r\n-\r\n-    // Daily users last 14 days\r\n-    const [daily] = await client.runReport({\r\n-      property: `properties/${propertyId}`,\r\n-      dateRanges: [{ startDate: '14daysAgo', endDate: 'today' }],\r\n-      dimensions: [{ name: 'date' }],\r\n-      metrics: [{ name: 'totalUsers' }],\r\n-      orderBys: [{ dimension: { dimensionName: 'date' } }],\r\n-    });\r\n-\r\n-    const dailySeries = (daily?.rows || []).map(r => ({\r\n-      date: r.dimensionValues?.[0]?.value,\r\n-      users: Number(r.metricValues?.[0]?.value || 0),\r\n-    }));\r\n-\r\n-    res.status(200).json({ success: true, totalUsers: Number(totalUsers), daily: dailySeries });\r\n-  } catch (e) {\r\n-    res.status(500).json({ success: false, error: e.message });\r\n-  }\r\n-}\r\n+// Wrap with authentication\r\n+export default requireAuth(handler);\r\n"
                }
            ],
            "date": 1760682512924,
            "name": "Commit-0",
            "content": "// Minimal GA4 Data API proxy. Requires env vars:\r\n// GA4_PROPERTY_ID, GA4_CLIENT_EMAIL, GA4_PRIVATE_KEY (JSON escaped or raw with \\n)\r\n// This endpoint returns last 30 days total users and daily users.\r\n\r\nimport { BetaAnalyticsDataClient } from '@google-analytics/data';\r\n\r\nfunction getAnalyticsClient() {\r\n  const propertyId = process.env.GA4_PROPERTY_ID;\r\n  const clientEmail = process.env.GA4_CLIENT_EMAIL;\r\n  let privateKey = process.env.GA4_PRIVATE_KEY;\r\n  if (!propertyId || !clientEmail || !privateKey) {\r\n    throw new Error('Missing GA4 credentials in environment');\r\n  }\r\n  // Handle escaped newlines\r\n  privateKey = privateKey.replace(/\\\\n/g, '\\n');\r\n  const client = new BetaAnalyticsDataClient({\r\n    credentials: {\r\n      client_email: clientEmail,\r\n      private_key: privateKey,\r\n    },\r\n  });\r\n  return { client, propertyId };\r\n}\r\n\r\nexport default async function handler(req, res) {\r\n  if (req.method !== 'GET') return res.status(405).json({ error: 'Method not allowed' });\r\n  try {\r\n    const { client, propertyId } = getAnalyticsClient();\r\n\r\n    // Total users last 30 days\r\n    const [totals] = await client.runReport({\r\n      property: `properties/${propertyId}`,\r\n      dateRanges: [{ startDate: '30daysAgo', endDate: 'today' }],\r\n      metrics: [{ name: 'totalUsers' }],\r\n    });\r\n    const totalUsers = totals?.rows?.[0]?.metricValues?.[0]?.value || '0';\r\n\r\n    // Daily users last 14 days\r\n    const [daily] = await client.runReport({\r\n      property: `properties/${propertyId}`,\r\n      dateRanges: [{ startDate: '14daysAgo', endDate: 'today' }],\r\n      dimensions: [{ name: 'date' }],\r\n      metrics: [{ name: 'totalUsers' }],\r\n      orderBys: [{ dimension: { dimensionName: 'date' } }],\r\n    });\r\n\r\n    const dailySeries = (daily?.rows || []).map(r => ({\r\n      date: r.dimensionValues?.[0]?.value,\r\n      users: Number(r.metricValues?.[0]?.value || 0),\r\n    }));\r\n\r\n    res.status(200).json({ success: true, totalUsers: Number(totalUsers), daily: dailySeries });\r\n  } catch (e) {\r\n    res.status(500).json({ success: false, error: e.message });\r\n  }\r\n}\r\n"
        }
    ]
}