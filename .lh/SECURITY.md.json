{
    "sourceFile": "SECURITY.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1761927995836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1761927995836,
            "name": "Commit-0",
            "content": "# Admin Security Implementation\r\n\r\n## Overview\r\n\r\nThis document describes the comprehensive security implementation for the admin dashboard and all admin-related features in this Next.js application.\r\n\r\n## Security Features Implemented\r\n\r\n### 1. Server-Side Authentication\r\n- ✅ **No client-side password validation** - All authentication happens server-side only\r\n- ✅ **httpOnly cookies** - Session tokens stored in httpOnly cookies (not accessible via JavaScript)\r\n- ✅ **Secure cookies** - Set to `secure: true` in production (HTTPS only)\r\n- ✅ **SameSite: strict** - Prevents CSRF attacks\r\n- ✅ **Environment variable password** - Admin password stored in `ADMIN_PASSWORD` env var\r\n- ✅ **Session expiration** - Sessions expire after 7 days\r\n\r\n### 2. Route Protection\r\n- ✅ **Middleware protection** - All admin routes protected at edge via `middleware.js`\r\n- ✅ **Server-side props** - Admin pages use `getServerSideProps` for double verification\r\n- ✅ **API route protection** - All admin APIs wrapped with `requireAuth()` middleware\r\n- ✅ **Automatic redirects** - Unauthenticated users redirected to login page\r\n\r\n### 3. Protected Routes\r\n\r\n#### Admin Pages\r\n- `/admin` - Login page (public)\r\n- `/adminDashboard` - Main admin dashboard (protected)\r\n- `/admin-services` - Services editor (protected)\r\n\r\n#### Admin API Routes\r\n- `/api/auth/login` - Login endpoint (public)\r\n- `/api/auth/logout` - Logout endpoint (public)\r\n- `/api/auth/check` - Session verification (public)\r\n- `/api/get-bookings` - Get all bookings (protected)\r\n- `/api/update-booking` - Update booking (protected)\r\n- `/api/delete-booking` - Delete booking (protected)\r\n- `/api/expenses` - Manage expenses (protected)\r\n- `/api/update-booking-status` - Update booking status (protected)\r\n- `/api/admin-add-booking` - Add booking from admin (protected)\r\n- `/api/services` - GET is public, PUT is protected\r\n\r\n### 4. Data Security\r\n- ✅ **No environment variables exposed** - MongoDB URI, passwords never sent to client\r\n- ✅ **No internal data leaks** - Admin data only fetched server-side\r\n- ✅ **No static pre-rendering** - Admin pages are SSR only (not statically generated)\r\n- ✅ **Session tokens** - Random 32-byte hex tokens (crypto.randomBytes)\r\n- ✅ **In-memory session store** - For development (use Redis/DB in production)\r\n\r\n### 5. Attack Prevention\r\n- ✅ **Brute force protection** - 1-second delay on failed login attempts\r\n- ✅ **No password in response** - Login API never returns password or token to client\r\n- ✅ **CSRF protection** - SameSite: strict cookies\r\n- ✅ **XSS protection** - httpOnly cookies prevent JavaScript access\r\n- ✅ **No admin hints** - Login errors don't reveal if user exists\r\n\r\n## Architecture\r\n\r\n```\r\n┌─────────────────────────────────────────────────────────────┐\r\n│                       CLIENT REQUEST                        │\r\n└─────────────────────────────────────────────────────────────┘\r\n                            │\r\n                            ▼\r\n┌─────────────────────────────────────────────────────────────┐\r\n│                    MIDDLEWARE.JS (EDGE)                     │\r\n│  • Check if route is protected                              │\r\n│  • Verify admin_session cookie exists                       │\r\n│  • Redirect to /admin if missing                            │\r\n└─────────────────────────────────────────────────────────────┘\r\n                            │\r\n                            ▼\r\n┌─────────────────────────────────────────────────────────────┐\r\n│              getServerSideProps (SSR Pages)                 │\r\n│  • Double-check authentication                              │\r\n│  • Verify session token validity                            │\r\n│  • Return 307 redirect if invalid                           │\r\n└─────────────────────────────────────────────────────────────┘\r\n                            │\r\n                            ▼\r\n┌─────────────────────────────────────────────────────────────┐\r\n│                  requireAuth() (API Routes)                 │\r\n│  • Verify session token from cookie                         │\r\n│  • Return 401 if invalid                                    │\r\n│  • Execute handler if valid                                 │\r\n└─────────────────────────────────────────────────────────────┘\r\n                            │\r\n                            ▼\r\n┌─────────────────────────────────────────────────────────────┐\r\n│                     PROTECTED CONTENT                       │\r\n└─────────────────────────────────────────────────────────────┘\r\n```\r\n\r\n## File Structure\r\n\r\n```\r\nwashlabs/\r\n├── lib/\r\n│   └── auth.js                    # Authentication utilities\r\n├── middleware.js                  # Edge middleware (route protection)\r\n├── pages/\r\n│   ├── admin.js                   # Login page (updated to use API)\r\n│   ├── adminDashboard.js          # Protected with getServerSideProps\r\n│   ├── admin-services.js          # Protected with getServerSideProps\r\n│   └── api/\r\n│       ├── auth/\r\n│       │   ├── login.js           # Server-side login\r\n│       │   ├── logout.js          # Session destruction\r\n│       │   └── check.js           # Session verification\r\n│       ├── get-bookings.js        # Protected with requireAuth\r\n│       ├── update-booking.js      # Protected with requireAuth\r\n│       ├── delete-booking.js      # Protected with requireAuth\r\n│       ├── expenses.js            # Protected with requireAuth\r\n│       ├── update-booking-status.js # Protected with requireAuth\r\n│       ├── admin-add-booking.js   # Protected with requireAuth\r\n│       └── services.js            # PUT protected, GET public\r\n└── .env.example                   # Environment variables template\r\n```\r\n\r\n## Setup Instructions\r\n\r\n### 1. Environment Variables\r\n\r\nCopy `.env.example` to `.env.local`:\r\n\r\n```bash\r\ncp .env.example .env.local\r\n```\r\n\r\nSet your admin password (minimum 12 characters recommended):\r\n\r\n```env\r\nADMIN_PASSWORD=YourSecurePasswordHere123!\r\n```\r\n\r\n### 2. Production Deployment\r\n\r\nWhen deploying to production (Vercel, etc.):\r\n\r\n1. Add `ADMIN_PASSWORD` to environment variables in your hosting dashboard\r\n2. Ensure `NODE_ENV=production` is set\r\n3. Verify HTTPS is enabled (required for secure cookies)\r\n4. Consider using Redis or database for session storage (instead of in-memory)\r\n\r\n### 3. Testing Authentication\r\n\r\n1. Start dev server: `npm run dev`\r\n2. Navigate to `http://localhost:3000/admin`\r\n3. Enter your admin password\r\n4. You should be redirected to `/adminDashboard`\r\n5. Try accessing `/adminDashboard` without logging in - should redirect to `/admin`\r\n6. Try accessing `/api/get-bookings` without authentication - should return 401\r\n\r\n## Session Management\r\n\r\n### Login Flow\r\n1. User submits password to `/api/auth/login`\r\n2. Server verifies password against `ADMIN_PASSWORD` env var\r\n3. Server creates random session token (32 bytes)\r\n4. Server stores session in memory with expiration time\r\n5. Server sets httpOnly cookie with session token\r\n6. Client redirected to `/adminDashboard`\r\n\r\n### Session Verification\r\n1. Client makes request to protected route\r\n2. Middleware extracts `admin_session` cookie\r\n3. Middleware verifies token exists in session store\r\n4. Middleware checks token hasn't expired\r\n5. Request proceeds if valid, otherwise redirected/401\r\n\r\n### Logout Flow\r\n1. User clicks \"Logout\" button\r\n2. Client calls `/api/auth/logout`\r\n3. Server deletes session from store\r\n4. Server clears cookie (maxAge: 0)\r\n5. Client redirected to `/admin`\r\n\r\n## Security Best Practices\r\n\r\n### ✅ DO\r\n- Use a strong admin password (12+ characters, mixed case, numbers, symbols)\r\n- Rotate password regularly (every 90 days)\r\n- Use HTTPS in production\r\n- Keep dependencies updated\r\n- Monitor failed login attempts\r\n- Use Redis or database for sessions in production\r\n- Enable rate limiting on login endpoint\r\n- Add IP allowlisting if admin access is from known IPs\r\n\r\n### ❌ DON'T\r\n- Never commit `.env.local` or `.env` to git\r\n- Never hardcode passwords in code\r\n- Never log sensitive data (passwords, session tokens)\r\n- Never send passwords or tokens to client\r\n- Don't use localStorage for authentication\r\n- Don't skip HTTPS in production\r\n- Don't reuse passwords across services\r\n\r\n## Production Improvements (Optional)\r\n\r\n### 1. Redis Session Store\r\nReplace in-memory sessions with Redis:\r\n\r\n```javascript\r\n// lib/auth.js\r\nimport Redis from 'ioredis';\r\nconst redis = new Redis(process.env.REDIS_URL);\r\n\r\nexport async function storeSession(token, data) {\r\n  await redis.setex(\r\n    `session:${token}`,\r\n    SESSION_MAX_AGE,\r\n    JSON.stringify(data)\r\n  );\r\n}\r\n\r\nexport async function verifySession(token) {\r\n  const data = await redis.get(`session:${token}`);\r\n  return !!data;\r\n}\r\n```\r\n\r\n### 2. Rate Limiting\r\nAdd rate limiting to prevent brute force:\r\n\r\n```javascript\r\n// lib/rateLimit.js\r\nimport rateLimit from 'express-rate-limit';\r\n\r\nexport const loginLimiter = rateLimit({\r\n  windowMs: 15 * 60 * 1000, // 15 minutes\r\n  max: 5, // 5 attempts\r\n  message: 'Too many login attempts, please try again later'\r\n});\r\n```\r\n\r\n### 3. Two-Factor Authentication\r\nAdd TOTP-based 2FA using libraries like `speakeasy` or `otpauth`.\r\n\r\n### 4. Audit Logging\r\nLog all admin actions:\r\n\r\n```javascript\r\n// lib/audit.js\r\nexport function logAdminAction(action, userId, metadata) {\r\n  // Log to database or monitoring service\r\n  console.log({\r\n    timestamp: new Date().toISOString(),\r\n    action,\r\n    userId,\r\n    metadata\r\n  });\r\n}\r\n```\r\n\r\n## Troubleshooting\r\n\r\n### Issue: \"Unauthorized\" on admin pages\r\n- Check that `ADMIN_PASSWORD` is set in environment variables\r\n- Clear browser cookies and login again\r\n- Verify middleware.js is being executed\r\n- Check browser console for errors\r\n\r\n### Issue: Infinite redirect loop\r\n- Clear browser cookies\r\n- Check middleware.js matcher configuration\r\n- Verify getServerSideProps is not redirecting incorrectly\r\n\r\n### Issue: Session expires too quickly\r\n- Increase `SESSION_MAX_AGE` in lib/auth.js\r\n- Check system time is correct\r\n- Verify session store is working\r\n\r\n### Issue: Can't login with correct password\r\n- Verify `ADMIN_PASSWORD` environment variable matches\r\n- Check for whitespace in password\r\n- Look for errors in server logs\r\n- Test with a simple password first\r\n\r\n## Monitoring\r\n\r\nMonitor these metrics:\r\n- Failed login attempts\r\n- Active sessions count\r\n- Session expiration rate\r\n- API 401 errors\r\n- Admin page access patterns\r\n\r\n## License\r\n\r\nThis security implementation is part of the WashLabs application.\r\n\r\n## Support\r\n\r\nFor security issues or questions, contact the development team.\r\n\r\n**IMPORTANT**: Never post passwords, tokens, or sensitive data in public issues or discussions.\r\n"
        }
    ]
}