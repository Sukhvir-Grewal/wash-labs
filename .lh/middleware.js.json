{
    "sourceFile": "middleware.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1761927994694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1761927994694,
            "name": "Commit-0",
            "content": "import { NextResponse } from 'next/server';\r\n\r\n/**\r\n * Next.js Middleware to protect admin routes\r\n * This runs on ALL requests before they reach pages/api\r\n */\r\nexport function middleware(request) {\r\n  const { pathname } = request.nextUrl;\r\n  \r\n  // Define protected admin routes\r\n  const isAdminPage = pathname.startsWith('/admin') || pathname === '/admin-services' || pathname === '/adminDashboard';\r\n  const isAdminApi = pathname.startsWith('/api/admin') || \r\n    pathname.startsWith('/api/get-bookings') ||\r\n    pathname.startsWith('/api/update-booking') ||\r\n    pathname.startsWith('/api/delete-booking') ||\r\n    pathname.startsWith('/api/expenses') ||\r\n    pathname.startsWith('/api/update-booking-status') ||\r\n    pathname.startsWith('/api/analytics-') ||\r\n    (pathname.startsWith('/api/services') && request.method === 'PUT');\r\n  \r\n  // Allow login page and auth APIs\r\n  if (pathname === '/admin' || pathname.startsWith('/api/auth/')) {\r\n    return NextResponse.next();\r\n  }\r\n  \r\n  // Check authentication for admin routes\r\n  if (isAdminPage || isAdminApi) {\r\n    const token = request.cookies.get('admin_session')?.value;\r\n    \r\n    // If no token, redirect to login\r\n    if (!token) {\r\n      // Redirect pages to login\r\n      if (isAdminPage) {\r\n        const url = request.nextUrl.clone();\r\n        url.pathname = '/admin';\r\n        return NextResponse.redirect(url);\r\n      }\r\n      \r\n      // Return 401 for API routes\r\n      if (isAdminApi) {\r\n        return NextResponse.json(\r\n          { error: 'Unauthorized. Please login.' },\r\n          { status: 401 }\r\n        );\r\n      }\r\n    }\r\n    \r\n    // If token exists, allow the request to continue\r\n    // The actual session verification happens in getServerSideProps or API routes\r\n    return NextResponse.next();\r\n  }\r\n  \r\n  return NextResponse.next();\r\n}\r\n\r\n/**\r\n * Configure which routes this middleware runs on\r\n */\r\nexport const config = {\r\n  matcher: [\r\n    // Admin pages\r\n    '/admin/:path*',\r\n    '/adminDashboard',\r\n    '/admin-services',\r\n    // Admin API routes\r\n    '/api/admin/:path*',\r\n    '/api/get-bookings',\r\n    '/api/update-booking/:path*',\r\n    '/api/delete-booking',\r\n    '/api/expenses',\r\n    '/api/update-booking-status',\r\n    '/api/analytics-:path*',\r\n    '/api/services',\r\n  ],\r\n};\r\n"
        }
    ]
}