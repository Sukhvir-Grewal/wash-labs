{
    "sourceFile": "components/RevenueChart.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1760680342090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760680688191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,156 @@\n+\r\n+import { useState } from 'react';\r\n+import { Line } from 'react-chartjs-2';\r\n+import { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\r\n+Chart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\r\n+\r\n+function groupByWeek(bookings) {\r\n+  // Returns { 'YYYY-WW': sum }\r\n+  const weekMap = {};\r\n+  bookings.forEach(b => {\r\n+    if (b.date && b.amount) {\r\n+      const d = new Date(b.date);\r\n+      const year = d.getFullYear();\r\n+      const onejan = new Date(d.getFullYear(),0,1);\r\n+      const week = Math.ceil((((d - onejan) / 86400000) + onejan.getDay()+1)/7);\r\n+      const key = `${year}-W${week}`;\r\n+      weekMap[key] = (weekMap[key] || 0) + b.amount;\r\n+    }\r\n+  });\r\n+  return weekMap;\r\n+}\r\n+\r\n+function groupByMonth(bookings) {\r\n+  // Returns { 'YYYY-MM': sum }\r\n+  const monthMap = {};\r\n+  bookings.forEach(b => {\r\n+    if (b.date && b.amount) {\r\n+      const parts = b.date.split('-');\r\n+      if (parts.length === 3) {\r\n+        const key = `${parts[0]}-${parts[1]}`;\r\n+        monthMap[key] = (monthMap[key] || 0) + b.amount;\r\n+      }\r\n+    }\r\n+  });\r\n+  return monthMap;\r\n+}\r\n+\r\n+export default function RevenueChart({ bookings }) {\r\n+  const [interval, setInterval] = useState('date'); // 'date' | 'week' | 'month'\r\n+  const completed = bookings.filter(b => b.status === 'complete');\r\n+\r\n+  let labels = [], amounts = [];\r\n+  if (interval === 'date') {\r\n+    // Group by date\r\n+    const dateMap = {};\r\n+    completed.forEach(b => {\r\n+      if (b.date && b.amount) {\r\n+        dateMap[b.date] = (dateMap[b.date] || 0) + b.amount;\r\n+      }\r\n+    });\r\n+    const rawDates = Object.keys(dateMap).sort();\r\n+    const months = [\"jan\",\"feb\",\"mar\",\"apr\",\"may\",\"jun\",\"jul\",\"aug\",\"sep\",\"oct\",\"nov\",\"dec\"];\r\n+    labels = rawDates.map(dateStr => {\r\n+      const parts = dateStr.split(\"-\");\r\n+      if (parts.length === 3) {\r\n+        const d = parts[2];\r\n+        const m = months[parseInt(parts[1], 10) - 1];\r\n+        return `${d}${m}`;\r\n+      }\r\n+      return dateStr;\r\n+    });\r\n+    amounts = rawDates.map(date => dateMap[date]);\r\n+  } else if (interval === 'week') {\r\n+      const weekMap = groupByWeek(completed);\r\n+      const rawWeeks = Object.keys(weekMap).sort();\r\n+      // Format as 'monAbbr (startDay-endDay)' e.g. 'oct (15-21)'\r\n+      labels = rawWeeks.map(wstr => {\r\n+        // wstr: 'YYYY-WW'\r\n+        const [year, w] = wstr.split('-W');\r\n+        if (year && w) {\r\n+          // Get start/end date of week\r\n+          const weekNum = parseInt(w, 10);\r\n+          const jan1 = new Date(Number(year), 0, 1);\r\n+          const start = new Date(jan1.getTime() + (weekNum - 1) * 7 * 86400000);\r\n+          // Adjust to week start (Monday)\r\n+          const dayOfWeek = start.getDay();\r\n+          const weekStart = new Date(start);\r\n+          weekStart.setDate(start.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));\r\n+          const weekEnd = new Date(weekStart);\r\n+          weekEnd.setDate(weekStart.getDate() + 6);\r\n+          const months = [\"jan\",\"feb\",\"mar\",\"apr\",\"may\",\"jun\",\"jul\",\"aug\",\"sep\",\"oct\",\"nov\",\"dec\"];\r\n+          const mAbbr = months[weekStart.getMonth()];\r\n+          return `${mAbbr} (${weekStart.getDate()}-${weekEnd.getDate()})`;\r\n+        }\r\n+        return wstr;\r\n+      });\r\n+      amounts = rawWeeks.map(w => weekMap[w]);\r\n+  } else if (interval === 'month') {\r\n+    const monthMap = groupByMonth(completed);\r\n+    const rawMonths = Object.keys(monthMap).sort();\r\n+    const months = [\"jan\",\"feb\",\"mar\",\"apr\",\"may\",\"jun\",\"jul\",\"aug\",\"sep\",\"oct\",\"nov\",\"dec\"];\r\n+    labels = rawMonths.map(mstr => {\r\n+      const parts = mstr.split('-');\r\n+      if (parts.length === 2) {\r\n+        return `${months[parseInt(parts[1],10)-1]} ${parts[0]}`;\r\n+      }\r\n+      return mstr;\r\n+    });\r\n+    amounts = rawMonths.map(m => monthMap[m]);\r\n+  }\r\n+\r\n+  const data = {\r\n+    labels,\r\n+    datasets: [\r\n+      {\r\n+        label: 'Revenue',\r\n+        data: amounts,\r\n+        fill: false,\r\n+        borderColor: 'rgb(37, 99, 235)',\r\n+        backgroundColor: 'rgba(37,99,235,0.2)',\r\n+        tension: 0.2,\r\n+        pointRadius: 4,\r\n+        pointBackgroundColor: 'rgb(37,99,235)',\r\n+      },\r\n+    ],\r\n+  };\r\n+\r\n+  const options = {\r\n+    responsive: true,\r\n+    plugins: {\r\n+      legend: { display: false },\r\n+      tooltip: { enabled: true },\r\n+    },\r\n+    scales: {\r\n+      x: {\r\n+        title: { display: true, text: interval === 'date' ? 'Date' : interval === 'week' ? 'Week' : 'Month' },\r\n+        ticks: { color: '#222' },\r\n+      },\r\n+      y: {\r\n+        title: { display: true, text: 'Revenue ($)' },\r\n+        beginAtZero: true,\r\n+        ticks: { color: '#222' },\r\n+      },\r\n+    },\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{ width: '100%', minHeight: 180 }}>\r\n+      <div className=\"flex gap-2 mb-2 justify-end\">\r\n+        <button\r\n+          className={`px-3 py-1 rounded-full text-xs font-semibold border ${interval==='date' ? 'bg-blue-600 text-white border-blue-600' : 'bg-white text-blue-700 border-blue-200 hover:bg-blue-50'}`}\r\n+          onClick={() => setInterval('date')}\r\n+        >Dates</button>\r\n+        <button\r\n+          className={`px-3 py-1 rounded-full text-xs font-semibold border ${interval==='week' ? 'bg-blue-600 text-white border-blue-600' : 'bg-white text-blue-700 border-blue-200 hover:bg-blue-50'}`}\r\n+          onClick={() => setInterval('week')}\r\n+        >Weeks</button>\r\n+        <button\r\n+          className={`px-3 py-1 rounded-full text-xs font-semibold border ${interval==='month' ? 'bg-blue-600 text-white border-blue-600' : 'bg-white text-blue-700 border-blue-200 hover:bg-blue-50'}`}\r\n+          onClick={() => setInterval('month')}\r\n+        >Months</button>\r\n+      </div>\r\n+      <Line data={data} options={options} />\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1760681521903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,17 +34,17 @@\n   });\r\n   return monthMap;\r\n }\r\n \r\n-export default function RevenueChart({ bookings }) {\r\n+export default function RevenueChart({ bookings, status = 'complete', datasetLabel = 'Revenue', borderColor = 'rgb(37, 99, 235)', backgroundColor = 'rgba(37,99,235,0.2)', pointBackgroundColor = 'rgb(37,99,235)' }) {\r\n   const [interval, setInterval] = useState('date'); // 'date' | 'week' | 'month'\r\n-  const completed = bookings.filter(b => b.status === 'complete');\r\n+  const filtered = bookings.filter(b => b.status === status);\r\n \r\n   let labels = [], amounts = [];\r\n   if (interval === 'date') {\r\n     // Group by date\r\n     const dateMap = {};\r\n-    completed.forEach(b => {\r\n+    filtered.forEach(b => {\r\n       if (b.date && b.amount) {\r\n         dateMap[b.date] = (dateMap[b.date] || 0) + b.amount;\r\n       }\r\n     });\r\n@@ -60,9 +60,9 @@\n       return dateStr;\r\n     });\r\n     amounts = rawDates.map(date => dateMap[date]);\r\n   } else if (interval === 'week') {\r\n-      const weekMap = groupByWeek(completed);\r\n+    const weekMap = groupByWeek(filtered);\r\n       const rawWeeks = Object.keys(weekMap).sort();\r\n       // Format as 'monAbbr (startDay-endDay)' e.g. 'oct (15-21)'\r\n       labels = rawWeeks.map(wstr => {\r\n         // wstr: 'YYYY-WW'\r\n@@ -85,9 +85,9 @@\n         return wstr;\r\n       });\r\n       amounts = rawWeeks.map(w => weekMap[w]);\r\n   } else if (interval === 'month') {\r\n-    const monthMap = groupByMonth(completed);\r\n+    const monthMap = groupByMonth(filtered);\r\n     const rawMonths = Object.keys(monthMap).sort();\r\n     const months = [\"jan\",\"feb\",\"mar\",\"apr\",\"may\",\"jun\",\"jul\",\"aug\",\"sep\",\"oct\",\"nov\",\"dec\"];\r\n     labels = rawMonths.map(mstr => {\r\n       const parts = mstr.split('-');\r\n@@ -102,16 +102,16 @@\n   const data = {\r\n     labels,\r\n     datasets: [\r\n       {\r\n-        label: 'Revenue',\r\n+        label: datasetLabel,\r\n         data: amounts,\r\n         fill: false,\r\n-        borderColor: 'rgb(37, 99, 235)',\r\n-        backgroundColor: 'rgba(37,99,235,0.2)',\r\n+        borderColor: borderColor,\r\n+        backgroundColor: backgroundColor,\r\n         tension: 0.2,\r\n         pointRadius: 4,\r\n-        pointBackgroundColor: 'rgb(37,99,235)',\r\n+        pointBackgroundColor: pointBackgroundColor,\r\n       },\r\n     ],\r\n   };\r\n \r\n@@ -153,63 +153,4 @@\n       <Line data={data} options={options} />\r\n     </div>\r\n   );\r\n }\r\n-import { Line } from 'react-chartjs-2';\r\n-import { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\r\n-Chart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\r\n-\r\n-export default function RevenueChart({ bookings }) {\r\n-  // Only completed bookings\r\n-  const completed = bookings.filter(b => b.status === 'complete');\r\n-  // Group by date\r\n-  const dateMap = {};\r\n-  completed.forEach(b => {\r\n-    if (b.date && b.amount) {\r\n-      dateMap[b.date] = (dateMap[b.date] || 0) + b.amount;\r\n-    }\r\n-  });\r\n-  // Sort dates\r\n-  const dates = Object.keys(dateMap).sort();\r\n-  const amounts = dates.map(date => dateMap[date]);\r\n-\r\n-  const data = {\r\n-    labels: dates,\r\n-    datasets: [\r\n-      {\r\n-        label: 'Revenue',\r\n-        data: amounts,\r\n-        fill: false,\r\n-        borderColor: 'rgb(37, 99, 235)',\r\n-        backgroundColor: 'rgba(37,99,235,0.2)',\r\n-        tension: 0.2,\r\n-        pointRadius: 4,\r\n-        pointBackgroundColor: 'rgb(37,99,235)',\r\n-      },\r\n-    ],\r\n-  };\r\n-\r\n-  const options = {\r\n-    responsive: true,\r\n-    plugins: {\r\n-      legend: { display: false },\r\n-      tooltip: { enabled: true },\r\n-    },\r\n-    scales: {\r\n-      x: {\r\n-        title: { display: true, text: 'Date' },\r\n-        ticks: { color: '#222' },\r\n-      },\r\n-      y: {\r\n-        title: { display: true, text: 'Revenue ($)' },\r\n-        beginAtZero: true,\r\n-        ticks: { color: '#222' },\r\n-      },\r\n-    },\r\n-  };\r\n-\r\n-  return (\r\n-    <div style={{ width: '100%', minHeight: 180 }}>\r\n-      <Line data={data} options={options} />\r\n-    </div>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1761270399129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,165 @@\n+\r\n+import { useState } from 'react';\r\n+import { Line } from 'react-chartjs-2';\r\n+import { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\r\n+Chart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\r\n+\r\n+function groupByWeek(bookings) {\r\n+  // Returns { 'YYYY-WW': sum }\r\n+  const weekMap = {};\r\n+  bookings.forEach(b => {\r\n+    if (b.date && b.amount) {\r\n+      const d = new Date(b.date);\r\n+      const year = d.getFullYear();\r\n+      const onejan = new Date(d.getFullYear(),0,1);\r\n+      const week = Math.ceil((((d - onejan) / 86400000) + onejan.getDay()+1)/7);\r\n+      const key = `${year}-W${week}`;\r\n+      weekMap[key] = (weekMap[key] || 0) + b.amount;\r\n+    }\r\n+  });\r\n+  return weekMap;\r\n+}\r\n+\r\n+function groupByMonth(bookings) {\r\n+  // Returns { 'YYYY-MM': sum }\r\n+  const monthMap = {};\r\n+  bookings.forEach(b => {\r\n+    if (b.date && b.amount) {\r\n+      const parts = b.date.split('-');\r\n+      if (parts.length === 3) {\r\n+        const key = `${parts[0]}-${parts[1]}`;\r\n+        monthMap[key] = (monthMap[key] || 0) + b.amount;\r\n+      }\r\n+    }\r\n+  });\r\n+  return monthMap;\r\n+}\r\n+\r\n+export default function RevenueChart({ bookings, status = 'complete', datasetLabel = 'Revenue', borderColor = 'rgb(37, 99, 235)', backgroundColor = 'rgba(37,99,235,0.2)', pointBackgroundColor = 'rgb(37,99,235)' }) {\r\n+  const [interval, setInterval] = useState('date'); // 'date' | 'week' | 'month'\r\n+  const filtered = bookings.filter(b => b.status === status);\r\n+\r\n+  let labels = [], amounts = [];\r\n+  if (interval === 'date') {\r\n+    // Group by date\r\n+    const dateMap = {};\r\n+    filtered.forEach(b => {\r\n+      if (b.date && b.amount) {\r\n+        dateMap[b.date] = (dateMap[b.date] || 0) + b.amount;\r\n+      }\r\n+    });\r\n+    const rawDates = Object.keys(dateMap).sort();\r\n+    const months = [\"jan\",\"feb\",\"mar\",\"apr\",\"may\",\"jun\",\"jul\",\"aug\",\"sep\",\"oct\",\"nov\",\"dec\"];\r\n+    labels = rawDates.map(dateStr => {\r\n+      const parts = dateStr.split(\"-\");\r\n+      if (parts.length === 3) {\r\n+        const d = parts[2];\r\n+        const m = months[parseInt(parts[1], 10) - 1];\r\n+        return `${d}${m}`;\r\n+      }\r\n+      return dateStr;\r\n+    });\r\n+    amounts = rawDates.map(date => dateMap[date]);\r\n+  } else if (interval === 'week') {\r\n+    const weekMap = groupByWeek(filtered);\r\n+      const rawWeeks = Object.keys(weekMap).sort();\r\n+      // Format as 'monAbbr (startDay-endDay)' e.g. 'oct (15-21)'\r\n+      labels = rawWeeks.map(wstr => {\r\n+        // wstr: 'YYYY-WW'\r\n+        const [year, w] = wstr.split('-W');\r\n+        if (year && w) {\r\n+          // Get start/end date of week\r\n+          const weekNum = parseInt(w, 10);\r\n+          const jan1 = new Date(Number(year), 0, 1);\r\n+          const start = new Date(jan1.getTime() + (weekNum - 1) * 7 * 86400000);\r\n+          // Adjust to week start (Monday)\r\n+          const dayOfWeek = start.getDay();\r\n+          const weekStart = new Date(start);\r\n+          weekStart.setDate(start.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));\r\n+          const weekEnd = new Date(weekStart);\r\n+          weekEnd.setDate(weekStart.getDate() + 6);\r\n+          const months = [\"jan\",\"feb\",\"mar\",\"apr\",\"may\",\"jun\",\"jul\",\"aug\",\"sep\",\"oct\",\"nov\",\"dec\"];\r\n+          const mAbbr = months[weekStart.getMonth()];\r\n+          return `${mAbbr} (${weekStart.getDate()}-${weekEnd.getDate()})`;\r\n+        }\r\n+        return wstr;\r\n+      });\r\n+      amounts = rawWeeks.map(w => weekMap[w]);\r\n+  } else if (interval === 'month') {\r\n+    const monthMap = groupByMonth(filtered);\r\n+    const rawMonths = Object.keys(monthMap).sort();\r\n+    const months = [\"jan\",\"feb\",\"mar\",\"apr\",\"may\",\"jun\",\"jul\",\"aug\",\"sep\",\"oct\",\"nov\",\"dec\"];\r\n+    labels = rawMonths.map(mstr => {\r\n+      const parts = mstr.split('-');\r\n+      if (parts.length === 2) {\r\n+        return `${months[parseInt(parts[1],10)-1]} ${parts[0]}`;\r\n+      }\r\n+      return mstr;\r\n+    });\r\n+    amounts = rawMonths.map(m => monthMap[m]);\r\n+  }\r\n+\r\n+  const data = {\r\n+    labels,\r\n+    datasets: [\r\n+      {\r\n+        label: datasetLabel,\r\n+        data: amounts,\r\n+        fill: false,\r\n+        borderColor: borderColor,\r\n+        backgroundColor: backgroundColor,\r\n+        tension: 0.2,\r\n+        pointRadius: 4,\r\n+        pointBackgroundColor: pointBackgroundColor,\r\n+      },\r\n+    ],\r\n+  };\r\n+\r\n+  const options = {\r\n+    responsive: true,\r\n+    interaction: {\r\n+      mode: 'index',\r\n+      intersect: false,\r\n+      axis: 'x',\r\n+    },\r\n+    plugins: {\r\n+      legend: { display: false },\r\n+      tooltip: {\r\n+        enabled: true,\r\n+        mode: 'index',\r\n+        intersect: false,\r\n+      },\r\n+    },\r\n+    scales: {\r\n+      x: {\r\n+        title: { display: true, text: interval === 'date' ? 'Date' : interval === 'week' ? 'Week' : 'Month' },\r\n+        ticks: { color: '#222' },\r\n+      },\r\n+      y: {\r\n+        title: { display: true, text: 'Revenue ($)' },\r\n+        beginAtZero: true,\r\n+        ticks: { color: '#222' },\r\n+      },\r\n+    },\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{ width: '100%', minHeight: 180 }}>\r\n+      <div className=\"flex gap-2 mb-2 justify-end\">\r\n+        <button\r\n+          className={`px-3 py-1 rounded-full text-xs font-semibold border ${interval==='date' ? 'bg-blue-600 text-white border-blue-600' : 'bg-white text-blue-700 border-blue-200 hover:bg-blue-50'}`}\r\n+          onClick={() => setInterval('date')}\r\n+        >Dates</button>\r\n+        <button\r\n+          className={`px-3 py-1 rounded-full text-xs font-semibold border ${interval==='week' ? 'bg-blue-600 text-white border-blue-600' : 'bg-white text-blue-700 border-blue-200 hover:bg-blue-50'}`}\r\n+          onClick={() => setInterval('week')}\r\n+        >Weeks</button>\r\n+        <button\r\n+          className={`px-3 py-1 rounded-full text-xs font-semibold border ${interval==='month' ? 'bg-blue-600 text-white border-blue-600' : 'bg-white text-blue-700 border-blue-200 hover:bg-blue-50'}`}\r\n+          onClick={() => setInterval('month')}\r\n+        >Months</button>\r\n+      </div>\r\n+      <Line data={data} options={options} />\r\n+    </div>\r\n+  );\r\n+}\r\n"
                }
            ],
            "date": 1760680342090,
            "name": "Commit-0",
            "content": "import { Line } from 'react-chartjs-2';\r\nimport { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\r\nChart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\r\n\r\nexport default function RevenueChart({ bookings }) {\r\n  // Only completed bookings\r\n  const completed = bookings.filter(b => b.status === 'complete');\r\n  // Group by date\r\n  const dateMap = {};\r\n  completed.forEach(b => {\r\n    if (b.date && b.amount) {\r\n      dateMap[b.date] = (dateMap[b.date] || 0) + b.amount;\r\n    }\r\n  });\r\n  // Sort dates\r\n  const dates = Object.keys(dateMap).sort();\r\n  const amounts = dates.map(date => dateMap[date]);\r\n\r\n  const data = {\r\n    labels: dates,\r\n    datasets: [\r\n      {\r\n        label: 'Revenue',\r\n        data: amounts,\r\n        fill: false,\r\n        borderColor: 'rgb(37, 99, 235)',\r\n        backgroundColor: 'rgba(37,99,235,0.2)',\r\n        tension: 0.2,\r\n        pointRadius: 4,\r\n        pointBackgroundColor: 'rgb(37,99,235)',\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: { display: false },\r\n      tooltip: { enabled: true },\r\n    },\r\n    scales: {\r\n      x: {\r\n        title: { display: true, text: 'Date' },\r\n        ticks: { color: '#222' },\r\n      },\r\n      y: {\r\n        title: { display: true, text: 'Revenue ($)' },\r\n        beginAtZero: true,\r\n        ticks: { color: '#222' },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div style={{ width: '100%', minHeight: 180 }}>\r\n      <Line data={data} options={options} />\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}