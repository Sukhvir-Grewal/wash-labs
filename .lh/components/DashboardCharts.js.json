{
    "sourceFile": "components/DashboardCharts.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1760679617027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760679714519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+import { useMemo } from \"react\";\r\n+import { Bar } from \"react-chartjs-2\";\r\n+import Calendar from \"react-calendar\";\r\n+import \"react-calendar/dist/Calendar.css\";\r\n+import { Chart, BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend } from \"chart.js\";\r\n+\r\n+Chart.register(BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend);\r\n+\r\n+export function RevenueChart({ bookings }) {\r\n+  // Group completed bookings by date\r\n+  const data = useMemo(() => {\r\n+    const byDay = {};\r\n+    bookings.filter(b => b.status === \"complete\").forEach(b => {\r\n+      if (!b.date || b.date === \"N/A\") return;\r\n+      byDay[b.date] = (byDay[b.date] || 0) + (b.amount || 0);\r\n+    });\r\n+    const labels = Object.keys(byDay).sort();\r\n+    return {\r\n+      labels,\r\n+      datasets: [{ label: \"Revenue\", data: labels.map(d => byDay[d]), backgroundColor: \"#2563eb\" }],\r\n+    };\r\n+  }, [bookings]);\r\n+  return <Bar data={data} options={{ plugins: { legend: { display: false } } }} />;\r\n+}\r\n+\r\n+export function BookingsCalendar({ bookings }) {\r\n+  // Dates by status\r\n+  const dateStatus = useMemo(() => {\r\n+    const map = {};\r\n+    bookings.forEach(b => {\r\n+      if (!b.date || b.date === \"N/A\") return;\r\n+      map[b.date] = b.status;\r\n+    });\r\n+    return map;\r\n+  }, [bookings]);\r\n+  // Custom tile coloring\r\n+  function tileClassName({ date }) {\r\n+    const d = date.toISOString().slice(0, 10);\r\n+    if (dateStatus[d] === \"complete\") return \"bg-green-300\";\r\n+    if (dateStatus[d] === \"pending\") return \"bg-yellow-200\";\r\n+    if (dateStatus[d]) return \"bg-blue-200\";\r\n+    return \"\";\r\n+  }\r\n+  return <Calendar tileClassName={tileClassName} />;\r\n+}\r\n+\r\n+export function EstimatedRevenueChart({ bookings }) {\r\n+  // Group pending bookings by date\r\n+  const data = useMemo(() => {\r\n+    const byDay = {};\r\n+    bookings.filter(b => b.status === \"pending\").forEach(b => {\r\n+      if (!b.date || b.date === \"N/A\") return;\r\n+      byDay[b.date] = (byDay[b.date] || 0) + (b.amount || 0);\r\n+    });\r\n+    const labels = Object.keys(byDay).sort();\r\n+    return {\r\n+      labels,\r\n+      datasets: [{ label: \"Estimated Revenue\", data: labels.map(d => byDay[d]), backgroundColor: \"#eab308\" }],\r\n+    };\r\n+  }, [bookings]);\r\n+  return <Bar data={data} options={{ plugins: { legend: { display: false } } }} />;\r\n+}\r\n"
                },
                {
                    "date": 1760679882177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,74 @@\n+import { Chart, BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend } from \"chart.js\";\r\n+Chart.register(BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend);\r\n+\r\n+import { useMemo } from \"react\";\r\n+import { Bar } from \"react-chartjs-2\";\r\n+import Calendar from \"react-calendar\";\r\n+import \"react-calendar/dist/Calendar.css\";\r\n+\r\n+export function RevenueChart({ bookings, labelColor = \"#111\" }) {\r\n+  // Group completed bookings by date\r\n+  const data = useMemo(() => {\r\n+    const byDay = {};\r\n+    bookings.filter(b => b.status === \"complete\").forEach(b => {\r\n+      if (!b.date || b.date === \"N/A\") return;\r\n+      byDay[b.date] = (byDay[b.date] || 0) + (b.amount || 0);\r\n+    });\r\n+    const labels = Object.keys(byDay).sort();\r\n+    return {\r\n+      labels,\r\n+      datasets: [{ label: \"Revenue\", data: labels.map(d => byDay[d]), backgroundColor: \"#2563eb\" }],\r\n+    };\r\n+  }, [bookings]);\r\n+  return <Bar data={data} options={{\r\n+    plugins: { legend: { labels: { color: labelColor, font: { weight: \"bold\" } } } },\r\n+    scales: {\r\n+      x: { ticks: { color: labelColor, font: { weight: \"bold\" } } },\r\n+      y: { ticks: { color: labelColor, font: { weight: \"bold\" } } }\r\n+    }\r\n+  }} />;\r\n+}\r\n+\r\n+export function BookingsCalendar({ bookings, labelColor = \"#111\" }) {\r\n+  // Dates by status\r\n+  const dateStatus = useMemo(() => {\r\n+    const map = {};\r\n+    bookings.forEach(b => {\r\n+      if (!b.date || b.date === \"N/A\") return;\r\n+      map[b.date] = b.status;\r\n+    });\r\n+    return map;\r\n+  }, [bookings]);\r\n+  // Custom tile coloring\r\n+  function tileClassName({ date }) {\r\n+    const d = date.toISOString().slice(0, 10);\r\n+    if (dateStatus[d] === \"complete\") return \"bg-green-300\";\r\n+    if (dateStatus[d] === \"pending\") return \"bg-yellow-200\";\r\n+    if (dateStatus[d]) return \"bg-blue-200\";\r\n+    return \"\";\r\n+  }\r\n+  return <Calendar tileClassName={tileClassName} />;\r\n+}\r\n+\r\n+export function EstimatedRevenueChart({ bookings, labelColor = \"#111\" }) {\r\n+  // Group pending bookings by date\r\n+  const data = useMemo(() => {\r\n+    const byDay = {};\r\n+    bookings.filter(b => b.status === \"pending\").forEach(b => {\r\n+      if (!b.date || b.date === \"N/A\") return;\r\n+      byDay[b.date] = (byDay[b.date] || 0) + (b.amount || 0);\r\n+    });\r\n+    const labels = Object.keys(byDay).sort();\r\n+    return {\r\n+      labels,\r\n+      datasets: [{ label: \"Estimated Revenue\", data: labels.map(d => byDay[d]), backgroundColor: \"#eab308\" }],\r\n+    };\r\n+  }, [bookings]);\r\n+  return <Bar data={data} options={{\r\n+    plugins: { legend: { labels: { color: labelColor, font: { weight: \"bold\" } } } },\r\n+    scales: {\r\n+      x: { ticks: { color: labelColor, font: { weight: \"bold\" } } },\r\n+      y: { ticks: { color: labelColor, font: { weight: \"bold\" } } }\r\n+    }\r\n+  }} />;\r\n+}\r\n"
                },
                {
                    "date": 1760679940556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,27 +28,31 @@\n     }\r\n   }} />;\r\n }\r\n \r\n-export function BookingsCalendar({ bookings, labelColor = \"#111\" }) {\r\n-  // Dates by status\r\n+export function BookingsCalendar({ bookings, labelColor = \"#111\", alwaysOpen = false }) {\r\n+  // Dates by status (support multiple bookings per day)\r\n   const dateStatus = useMemo(() => {\r\n     const map = {};\r\n     bookings.forEach(b => {\r\n       if (!b.date || b.date === \"N/A\") return;\r\n-      map[b.date] = b.status;\r\n+      if (!map[b.date]) map[b.date] = [];\r\n+      map[b.date].push(b.status);\r\n     });\r\n     return map;\r\n   }, [bookings]);\r\n-  // Custom tile coloring\r\n+  // Custom tile coloring: green if any completed, yellow if any pending, blue if only booked\r\n   function tileClassName({ date }) {\r\n     const d = date.toISOString().slice(0, 10);\r\n-    if (dateStatus[d] === \"complete\") return \"bg-green-300\";\r\n-    if (dateStatus[d] === \"pending\") return \"bg-yellow-200\";\r\n-    if (dateStatus[d]) return \"bg-blue-200\";\r\n+    const statuses = dateStatus[d];\r\n+    if (statuses) {\r\n+      if (statuses.includes(\"complete\")) return \"bg-green-300\";\r\n+      if (statuses.includes(\"pending\")) return \"bg-yellow-200\";\r\n+      return \"bg-blue-200\";\r\n+    }\r\n     return \"\";\r\n   }\r\n-  return <Calendar tileClassName={tileClassName} />;\r\n+  return <div style={{ minHeight: alwaysOpen ? 340 : undefined }}><Calendar tileClassName={tileClassName} /></div>;\r\n }\r\n \r\n export function EstimatedRevenueChart({ bookings, labelColor = \"#111\" }) {\r\n   // Group pending bookings by date\r\n@@ -71,125 +75,4 @@\n       y: { ticks: { color: labelColor, font: { weight: \"bold\" } } }\r\n     }\r\n   }} />;\r\n }\r\n-import { useMemo } from \"react\";\r\n-import { Bar } from \"react-chartjs-2\";\r\n-import Calendar from \"react-calendar\";\r\n-import \"react-calendar/dist/Calendar.css\";\r\n-import { Chart, BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend } from \"chart.js\";\r\n-\r\n-Chart.register(BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend);\r\n-\r\n-export function RevenueChart({ bookings }) {\r\n-  // Group completed bookings by date\r\n-  const data = useMemo(() => {\r\n-    const byDay = {};\r\n-    bookings.filter(b => b.status === \"complete\").forEach(b => {\r\n-      if (!b.date || b.date === \"N/A\") return;\r\n-      byDay[b.date] = (byDay[b.date] || 0) + (b.amount || 0);\r\n-    });\r\n-    const labels = Object.keys(byDay).sort();\r\n-    return {\r\n-      labels,\r\n-      datasets: [{ label: \"Revenue\", data: labels.map(d => byDay[d]), backgroundColor: \"#2563eb\" }],\r\n-    };\r\n-  }, [bookings]);\r\n-  return <Bar data={data} options={{ plugins: { legend: { display: false } } }} />;\r\n-}\r\n-\r\n-export function BookingsCalendar({ bookings }) {\r\n-  // Dates by status\r\n-  const dateStatus = useMemo(() => {\r\n-    const map = {};\r\n-    bookings.forEach(b => {\r\n-      if (!b.date || b.date === \"N/A\") return;\r\n-      map[b.date] = b.status;\r\n-    });\r\n-    return map;\r\n-  }, [bookings]);\r\n-  // Custom tile coloring\r\n-  function tileClassName({ date }) {\r\n-    const d = date.toISOString().slice(0, 10);\r\n-    if (dateStatus[d] === \"complete\") return \"bg-green-300\";\r\n-    if (dateStatus[d] === \"pending\") return \"bg-yellow-200\";\r\n-    if (dateStatus[d]) return \"bg-blue-200\";\r\n-    return \"\";\r\n-  }\r\n-  return <Calendar tileClassName={tileClassName} />;\r\n-}\r\n-\r\n-export function EstimatedRevenueChart({ bookings }) {\r\n-  // Group pending bookings by date\r\n-  const data = useMemo(() => {\r\n-    const byDay = {};\r\n-    bookings.filter(b => b.status === \"pending\").forEach(b => {\r\n-      if (!b.date || b.date === \"N/A\") return;\r\n-      byDay[b.date] = (byDay[b.date] || 0) + (b.amount || 0);\r\n-    });\r\n-    const labels = Object.keys(byDay).sort();\r\n-    return {\r\n-      labels,\r\n-      datasets: [{ label: \"Estimated Revenue\", data: labels.map(d => byDay[d]), backgroundColor: \"#eab308\" }],\r\n-    };\r\n-  }, [bookings]);\r\n-  return <Bar data={data} options={{ plugins: { legend: { display: false } } }} />;\r\n-}\r\n-import { useMemo } from \"react\";\r\n-import { Bar } from \"react-chartjs-2\";\r\n-import Calendar from \"react-calendar\";\r\n-import \"react-calendar/dist/Calendar.css\";\r\n-\r\n-export function RevenueChart({ bookings }) {\r\n-  // Group completed bookings by date\r\n-  const data = useMemo(() => {\r\n-    const byDay = {};\r\n-    bookings.filter(b => b.status === \"complete\").forEach(b => {\r\n-      if (!b.date || b.date === \"N/A\") return;\r\n-      byDay[b.date] = (byDay[b.date] || 0) + (b.amount || 0);\r\n-    });\r\n-    const labels = Object.keys(byDay).sort();\r\n-    return {\r\n-      labels,\r\n-      datasets: [{ label: \"Revenue\", data: labels.map(d => byDay[d]), backgroundColor: \"#2563eb\" }],\r\n-    };\r\n-  }, [bookings]);\r\n-  return <Bar data={data} options={{ plugins: { legend: { display: false } } }} />;\r\n-}\r\n-\r\n-export function BookingsCalendar({ bookings }) {\r\n-  // Dates by status\r\n-  const dateStatus = useMemo(() => {\r\n-    const map = {};\r\n-    bookings.forEach(b => {\r\n-      if (!b.date || b.date === \"N/A\") return;\r\n-      map[b.date] = b.status;\r\n-    });\r\n-    return map;\r\n-  }, [bookings]);\r\n-  // Custom tile coloring\r\n-  function tileClassName({ date }) {\r\n-    const d = date.toISOString().slice(0, 10);\r\n-    if (dateStatus[d] === \"complete\") return \"bg-green-300\";\r\n-    if (dateStatus[d] === \"pending\") return \"bg-yellow-200\";\r\n-    if (dateStatus[d]) return \"bg-blue-200\";\r\n-    return \"\";\r\n-  }\r\n-  return <Calendar tileClassName={tileClassName} />;\r\n-}\r\n-\r\n-export function EstimatedRevenueChart({ bookings }) {\r\n-  // Group pending bookings by date\r\n-  const data = useMemo(() => {\r\n-    const byDay = {};\r\n-    bookings.filter(b => b.status === \"pending\").forEach(b => {\r\n-      if (!b.date || b.date === \"N/A\") return;\r\n-      byDay[b.date] = (byDay[b.date] || 0) + (b.amount || 0);\r\n-    });\r\n-    const labels = Object.keys(byDay).sort();\r\n-    return {\r\n-      labels,\r\n-      datasets: [{ label: \"Estimated Revenue\", data: labels.map(d => byDay[d]), backgroundColor: \"#eab308\" }],\r\n-    };\r\n-  }, [bookings]);\r\n-  return <Bar data={data} options={{ plugins: { legend: { display: false } } }} />;\r\n-}\r\n"
                },
                {
                    "date": 1760680235902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,78 +0,0 @@\n-import { Chart, BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend } from \"chart.js\";\r\n-Chart.register(BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend);\r\n-\r\n-import { useMemo } from \"react\";\r\n-import { Bar } from \"react-chartjs-2\";\r\n-import Calendar from \"react-calendar\";\r\n-import \"react-calendar/dist/Calendar.css\";\r\n-\r\n-export function RevenueChart({ bookings, labelColor = \"#111\" }) {\r\n-  // Group completed bookings by date\r\n-  const data = useMemo(() => {\r\n-    const byDay = {};\r\n-    bookings.filter(b => b.status === \"complete\").forEach(b => {\r\n-      if (!b.date || b.date === \"N/A\") return;\r\n-      byDay[b.date] = (byDay[b.date] || 0) + (b.amount || 0);\r\n-    });\r\n-    const labels = Object.keys(byDay).sort();\r\n-    return {\r\n-      labels,\r\n-      datasets: [{ label: \"Revenue\", data: labels.map(d => byDay[d]), backgroundColor: \"#2563eb\" }],\r\n-    };\r\n-  }, [bookings]);\r\n-  return <Bar data={data} options={{\r\n-    plugins: { legend: { labels: { color: labelColor, font: { weight: \"bold\" } } } },\r\n-    scales: {\r\n-      x: { ticks: { color: labelColor, font: { weight: \"bold\" } } },\r\n-      y: { ticks: { color: labelColor, font: { weight: \"bold\" } } }\r\n-    }\r\n-  }} />;\r\n-}\r\n-\r\n-export function BookingsCalendar({ bookings, labelColor = \"#111\", alwaysOpen = false }) {\r\n-  // Dates by status (support multiple bookings per day)\r\n-  const dateStatus = useMemo(() => {\r\n-    const map = {};\r\n-    bookings.forEach(b => {\r\n-      if (!b.date || b.date === \"N/A\") return;\r\n-      if (!map[b.date]) map[b.date] = [];\r\n-      map[b.date].push(b.status);\r\n-    });\r\n-    return map;\r\n-  }, [bookings]);\r\n-  // Custom tile coloring: green if any completed, yellow if any pending, blue if only booked\r\n-  function tileClassName({ date }) {\r\n-    const d = date.toISOString().slice(0, 10);\r\n-    const statuses = dateStatus[d];\r\n-    if (statuses) {\r\n-      if (statuses.includes(\"complete\")) return \"bg-green-300\";\r\n-      if (statuses.includes(\"pending\")) return \"bg-yellow-200\";\r\n-      return \"bg-blue-200\";\r\n-    }\r\n-    return \"\";\r\n-  }\r\n-  return <div style={{ minHeight: alwaysOpen ? 340 : undefined }}><Calendar tileClassName={tileClassName} /></div>;\r\n-}\r\n-\r\n-export function EstimatedRevenueChart({ bookings, labelColor = \"#111\" }) {\r\n-  // Group pending bookings by date\r\n-  const data = useMemo(() => {\r\n-    const byDay = {};\r\n-    bookings.filter(b => b.status === \"pending\").forEach(b => {\r\n-      if (!b.date || b.date === \"N/A\") return;\r\n-      byDay[b.date] = (byDay[b.date] || 0) + (b.amount || 0);\r\n-    });\r\n-    const labels = Object.keys(byDay).sort();\r\n-    return {\r\n-      labels,\r\n-      datasets: [{ label: \"Estimated Revenue\", data: labels.map(d => byDay[d]), backgroundColor: \"#eab308\" }],\r\n-    };\r\n-  }, [bookings]);\r\n-  return <Bar data={data} options={{\r\n-    plugins: { legend: { labels: { color: labelColor, font: { weight: \"bold\" } } } },\r\n-    scales: {\r\n-      x: { ticks: { color: labelColor, font: { weight: \"bold\" } } },\r\n-      y: { ticks: { color: labelColor, font: { weight: \"bold\" } } }\r\n-    }\r\n-  }} />;\r\n-}\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760680342097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +0,0 @@\n-\n\\ No newline at end of file\n"
                }
            ],
            "date": 1760679617027,
            "name": "Commit-0",
            "content": "import { useMemo } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\n\r\nexport function RevenueChart({ bookings }) {\r\n  // Group completed bookings by date\r\n  const data = useMemo(() => {\r\n    const byDay = {};\r\n    bookings.filter(b => b.status === \"complete\").forEach(b => {\r\n      if (!b.date || b.date === \"N/A\") return;\r\n      byDay[b.date] = (byDay[b.date] || 0) + (b.amount || 0);\r\n    });\r\n    const labels = Object.keys(byDay).sort();\r\n    return {\r\n      labels,\r\n      datasets: [{ label: \"Revenue\", data: labels.map(d => byDay[d]), backgroundColor: \"#2563eb\" }],\r\n    };\r\n  }, [bookings]);\r\n  return <Bar data={data} options={{ plugins: { legend: { display: false } } }} />;\r\n}\r\n\r\nexport function BookingsCalendar({ bookings }) {\r\n  // Dates by status\r\n  const dateStatus = useMemo(() => {\r\n    const map = {};\r\n    bookings.forEach(b => {\r\n      if (!b.date || b.date === \"N/A\") return;\r\n      map[b.date] = b.status;\r\n    });\r\n    return map;\r\n  }, [bookings]);\r\n  // Custom tile coloring\r\n  function tileClassName({ date }) {\r\n    const d = date.toISOString().slice(0, 10);\r\n    if (dateStatus[d] === \"complete\") return \"bg-green-300\";\r\n    if (dateStatus[d] === \"pending\") return \"bg-yellow-200\";\r\n    if (dateStatus[d]) return \"bg-blue-200\";\r\n    return \"\";\r\n  }\r\n  return <Calendar tileClassName={tileClassName} />;\r\n}\r\n\r\nexport function EstimatedRevenueChart({ bookings }) {\r\n  // Group pending bookings by date\r\n  const data = useMemo(() => {\r\n    const byDay = {};\r\n    bookings.filter(b => b.status === \"pending\").forEach(b => {\r\n      if (!b.date || b.date === \"N/A\") return;\r\n      byDay[b.date] = (byDay[b.date] || 0) + (b.amount || 0);\r\n    });\r\n    const labels = Object.keys(byDay).sort();\r\n    return {\r\n      labels,\r\n      datasets: [{ label: \"Estimated Revenue\", data: labels.map(d => byDay[d]), backgroundColor: \"#eab308\" }],\r\n    };\r\n  }, [bookings]);\r\n  return <Bar data={data} options={{ plugins: { legend: { display: false } } }} />;\r\n}\r\n"
        }
    ]
}