{
    "sourceFile": "components/Location.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1760160966509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760161400958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,52 +10,138 @@\n         location?.address\r\n             ? { display_name: location.address, lat: location.lat, lon: location.lon }\r\n             : null\r\n     );\r\n+\r\n+    // Performance and UX helpers\r\n     const debounceRef = useRef();\r\n+    const controllerRef = useRef(null);\r\n+    const cacheRef = useRef(new Map());\r\n+    const [activeIndex, setActiveIndex] = useState(-1);\r\n+    const listRef = useRef(null);\r\n \r\n+    // Format concise suggestion parts\r\n+    const formatSuggestion = (s) => {\r\n+        const primaryParts = [];\r\n+        const secondaryParts = [];\r\n+        const addr = s.address || {};\r\n+        // Primary: house number + road or named place\r\n+        const primary =\r\n+            (addr.house_number ? addr.house_number + \" \" : \"\") +\r\n+            (addr.road || addr.pedestrian || addr.cycleway || addr.footway || addr.path || s.name || \"\");\r\n+        if (primary.trim().length) primaryParts.push(primary.trim());\r\n+\r\n+        // Secondary: area + region (short)\r\n+        const locality = addr.city || addr.town || addr.village || addr.suburb || addr.hamlet || addr.neighbourhood;\r\n+        const region = addr.state || addr.province || addr.region || addr.state_district;\r\n+        const postcode = addr.postcode ? ` ${String(addr.postcode).slice(0, 3)}` : \"\";\r\n+\r\n+        if (locality) secondaryParts.push(locality);\r\n+        if (region) secondaryParts.push(region + postcode);\r\n+\r\n+        return {\r\n+            primary: primaryParts.join(\" \").trim() || (s.name || \"\").trim(),\r\n+            secondary: secondaryParts.filter(Boolean).join(\", \"),\r\n+        };\r\n+    };\r\n+\r\n+    // Query Nominatim (fast: debounce + abort + cache)\r\n     useEffect(() => {\r\n-        if (!query || query.trim().length < 3) {\r\n+        const q = (query || \"\").trim();\r\n+        if (q.length < 3) {\r\n             setSuggestions([]);\r\n+            setActiveIndex(-1);\r\n             return;\r\n         }\r\n+\r\n+        // serve from cache instantly\r\n+        const cached = cacheRef.current.get(q.toLowerCase());\r\n+        if (cached) {\r\n+            setSuggestions(cached);\r\n+        }\r\n+\r\n         setLoading(true);\r\n         clearTimeout(debounceRef.current);\r\n+\r\n         debounceRef.current = setTimeout(async () => {\r\n             try {\r\n-                const url = `https://nominatim.openstreetmap.org/search?format=json&addressdetails=1&limit=5&countrycodes=ca&q=${encodeURIComponent(\r\n-                    query\r\n+                // Abort previous request\r\n+                if (controllerRef.current) controllerRef.current.abort();\r\n+                controllerRef.current = new AbortController();\r\n+\r\n+                const url = `https://nominatim.openstreetmap.org/search?format=jsonv2&addressdetails=1&dedupe=1&limit=8&countrycodes=ca&q=${encodeURIComponent(\r\n+                    q\r\n                 )}`;\r\n+\r\n                 const res = await fetch(url, {\r\n                     headers: {\r\n-                        \"Accept\": \"application/json\",\r\n+                        Accept: \"application/json\",\r\n+                        \"Accept-Language\": \"en-CA\",\r\n                     },\r\n+                    signal: controllerRef.current.signal,\r\n                 });\r\n+                if (!res.ok) throw new Error(\"Lookup failed\");\r\n                 const data = await res.json();\r\n-                setSuggestions(\r\n-                    Array.isArray(data)\r\n-                        ? data.map((d) => ({\r\n-                              display_name: d.display_name,\r\n-                              lat: d.lat,\r\n-                              lon: d.lon,\r\n-                          }))\r\n-                        : []\r\n-                );\r\n-            } catch {\r\n-                setSuggestions([]);\r\n+\r\n+                const mapped = (Array.isArray(data) ? data : []).map((d) => ({\r\n+                    display_name: d.display_name,\r\n+                    lat: Number(d.lat),\r\n+                    lon: Number(d.lon),\r\n+                    address: d.address || {},\r\n+                    name: d.name || \"\",\r\n+                }));\r\n+\r\n+                cacheRef.current.set(q.toLowerCase(), mapped);\r\n+                setSuggestions(mapped);\r\n+                setActiveIndex(mapped.length ? 0 : -1);\r\n+            } catch (e) {\r\n+                if (e?.name !== \"AbortError\") {\r\n+                    setSuggestions([]);\r\n+                    setActiveIndex(-1);\r\n+                }\r\n             } finally {\r\n                 setLoading(false);\r\n             }\r\n-        }, 300);\r\n-        return () => clearTimeout(debounceRef.current);\r\n+        }, 150);\r\n+\r\n+        return () => {\r\n+            clearTimeout(debounceRef.current);\r\n+            // do not abort here to let the latest request finish if in-flight\r\n+        };\r\n     }, [query]);\r\n \r\n     const handleSelect = (s) => {\r\n-        setSelected(s);\r\n-        setQuery(s.display_name);\r\n+        const view = formatSuggestion(s);\r\n+        setSelected({ ...s, label: [view.primary, view.secondary].filter(Boolean).join(\", \") });\r\n+        setQuery([view.primary, view.secondary].filter(Boolean).join(\", \"));\r\n         setSuggestions([]);\r\n+        setActiveIndex(-1);\r\n     };\r\n \r\n+    const handleKeyDown = (e) => {\r\n+        if (!suggestions.length) return;\r\n+        if (e.key === \"ArrowDown\") {\r\n+            e.preventDefault();\r\n+            setActiveIndex((i) => (i + 1) % suggestions.length);\r\n+            scrollIntoView((activeIndex + 1) % suggestions.length);\r\n+        } else if (e.key === \"ArrowUp\") {\r\n+            e.preventDefault();\r\n+            setActiveIndex((i) => (i - 1 + suggestions.length) % suggestions.length);\r\n+            scrollIntoView((activeIndex - 1 + suggestions.length) % suggestions.length);\r\n+        } else if (e.key === \"Enter\") {\r\n+            e.preventDefault();\r\n+            if (activeIndex >= 0) handleSelect(suggestions[activeIndex]);\r\n+        } else if (e.key === \"Escape\") {\r\n+            setSuggestions([]);\r\n+            setActiveIndex(-1);\r\n+        }\r\n+    };\r\n+\r\n+    const scrollIntoView = (index) => {\r\n+        const node = listRef.current?.querySelector(`[data-idx=\"${index}\"]`);\r\n+        if (node) node.scrollIntoView({ block: \"nearest\" });\r\n+    };\r\n+\r\n     const canProceed = !!selected?.display_name;\r\n \r\n     return (\r\n         <motion.div\r\n@@ -65,9 +151,9 @@\n             exit={{ opacity: 0, x: -50 }}\r\n             transition={{ duration: 0.4 }}\r\n             className=\"space-y-4\"\r\n         >\r\n-            <div>\r\n+            <div onBlur={() => setTimeout(() => setSuggestions([]), 120)}>\r\n                 <label htmlFor=\"service-address\" className=\"block text-sm mb-1 text-gray-700\">\r\n                     Service Address\r\n                 </label>\r\n                 <div className=\"relative\">\r\n@@ -78,31 +164,52 @@\n                         onChange={(e) => {\r\n                             setQuery(e.target.value);\r\n                             setSelected(null);\r\n                         }}\r\n+                        onKeyDown={handleKeyDown}\r\n                         placeholder=\"Start typing your address\"\r\n                         autoComplete=\"off\"\r\n                         className=\"w-full px-4 py-3 rounded-lg bg-white border border-blue-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 outline-none text-gray-900\"\r\n                         required\r\n                         aria-required=\"true\"\r\n+                        aria-autocomplete=\"list\"\r\n+                        aria-controls=\"address-suggestions\"\r\n+                        role=\"combobox\"\r\n+                        aria-expanded={suggestions.length > 0}\r\n                     />\r\n                     {loading && (\r\n                         <div className=\"absolute right-3 top-1/2 -translate-y-1/2 text-sm text-blue-600\">\r\n                             Searchingâ€¦\r\n                         </div>\r\n                     )}\r\n                     {suggestions.length > 0 && (\r\n-                        <ul className=\"absolute left-0 right-0 mt-1 bg-white rounded-lg overflow-hidden z-50 border border-blue-200 max-h-60 overflow-y-auto\">\r\n-                            {suggestions.map((s, i) => (\r\n-                                <li\r\n-                                    key={`${s.display_name}-${i}`}\r\n-                                    onMouseDown={() => handleSelect(s)}\r\n-                                    className=\"px-4 py-2 cursor-pointer hover:bg-blue-100 hover:text-blue-700 transition text-black\"\r\n-                                    title={s.display_name}\r\n-                                >\r\n-                                    {s.display_name}\r\n-                                </li>\r\n-                            ))}\r\n+                        <ul\r\n+                            id=\"address-suggestions\"\r\n+                            ref={listRef}\r\n+                            role=\"listbox\"\r\n+                            className=\"absolute right-0 left-auto mt-1 bg-white rounded-lg overflow-auto z-50 border border-blue-200 max-h-64 w-[min(36rem,90vw)] shadow\"\r\n+                        >\r\n+                            {suggestions.map((s, i) => {\r\n+                                const view = formatSuggestion(s);\r\n+                                return (\r\n+                                    <li\r\n+                                        key={`${s.display_name}-${i}`}\r\n+                                        data-idx={i}\r\n+                                        role=\"option\"\r\n+                                        aria-selected={activeIndex === i}\r\n+                                        onMouseDown={() => handleSelect(s)}\r\n+                                        className={`px-4 py-2 cursor-pointer transition text-black text-right ${\r\n+                                            activeIndex === i ? \"bg-blue-100 text-blue-700\" : \"hover:bg-blue-50\"\r\n+                                        }`}\r\n+                                        title={s.display_name}\r\n+                                    >\r\n+                                        <div className=\"font-semibold truncate\">{view.primary || s.name || \"Address\"}</div>\r\n+                                        {view.secondary ? (\r\n+                                            <div className=\"text-sm text-gray-600 truncate\">{view.secondary}</div>\r\n+                                        ) : null}\r\n+                                    </li>\r\n+                                );\r\n+                            })}\r\n                         </ul>\r\n                     )}\r\n                 </div>\r\n                 <p className=\"text-xs text-gray-500 mt-2\">\r\n@@ -122,9 +229,9 @@\n                     type=\"button\"\r\n                     onClick={() =>\r\n                         canProceed &&\r\n                         onNext({\r\n-                            address: selected.display_name,\r\n+                            address: selected.label || selected.display_name,\r\n                             lat: selected.lat,\r\n                             lon: selected.lon,\r\n                         })\r\n                     }\r\n"
                },
                {
                    "date": 1760162505840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,281 @@\n+\"use client\";\r\n+import { useEffect, useRef, useState } from \"react\";\r\n+import { motion } from \"framer-motion\";\r\n+\r\n+export default function Location({ location, onNext, onBack }) {\r\n+    const [query, setQuery] = useState(location?.address || \"\");\r\n+    const [suggestions, setSuggestions] = useState([]);\r\n+    const [loading, setLoading] = useState(false);\r\n+    const [selected, setSelected] = useState(\r\n+        location?.address\r\n+            ? { display_name: location.address, lat: location.lat, lon: location.lon }\r\n+            : null\r\n+    );\r\n+\r\n+    // Performance and UX helpers\r\n+    const debounceRef = useRef();\r\n+    const controllerRef = useRef(null);\r\n+    const cacheRef = useRef(new Map());\r\n+    const [activeIndex, setActiveIndex] = useState(-1);\r\n+    const listRef = useRef(null);\r\n+\r\n+    // Canadian province/territory mapping (normalized)\r\n+    const provinceMap = {\r\n+        \"alberta\": \"AB\",\r\n+        \"british columbia\": \"BC\",\r\n+        \"manitoba\": \"MB\",\r\n+        \"new brunswick\": \"NB\",\r\n+        \"newfoundland and labrador\": \"NL\",\r\n+        \"newfoundland & labrador\": \"NL\",\r\n+        \"nova scotia\": \"NS\",\r\n+        \"ontario\": \"ON\",\r\n+        \"prince edward island\": \"PE\",\r\n+        \"quebec\": \"QC\",\r\n+        \"quÃ©bec\": \"QC\",\r\n+        \"saskatchewan\": \"SK\",\r\n+        \"yukon\": \"YT\",\r\n+        \"northwest territories\": \"NT\",\r\n+        \"nunavut\": \"NU\",\r\n+    };\r\n+\r\n+    const normalize = (s = \"\") =>\r\n+        s.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase().trim();\r\n+\r\n+    const getProvinceAbbr = (addr = {}) => {\r\n+        if (addr.state_code) return String(addr.state_code).toUpperCase();\r\n+        const cand =\r\n+            addr.state ||\r\n+            addr.province ||\r\n+            addr.region ||\r\n+            addr.state_district ||\r\n+            \"\";\r\n+        const key = normalize(cand);\r\n+        return provinceMap[key] || \"\";\r\n+    };\r\n+\r\n+    // Format concise suggestion parts\r\n+    const formatSuggestion = (s) => {\r\n+        const primaryParts = [];\r\n+        const addr = s.address || {};\r\n+        // Primary: house number + road or named place\r\n+        const primary =\r\n+            (addr.house_number ? addr.house_number + \" \" : \"\") +\r\n+            (addr.road || addr.pedestrian || addr.cycleway || addr.footway || addr.path || s.name || \"\");\r\n+        if (primary.trim().length) primaryParts.push(primary.trim());\r\n+\r\n+        // Secondary: city + province/territory short code (no postcode)\r\n+        const locality = addr.city || addr.town || addr.village || addr.suburb || addr.hamlet || addr.neighbourhood;\r\n+        const provinceCode = getProvinceAbbr(addr);\r\n+        const secondary = [locality, provinceCode].filter(Boolean).join(\", \");\r\n+\r\n+        return {\r\n+            primary: primaryParts.join(\" \").trim() || (s.name || \"\").trim(),\r\n+            secondary,\r\n+        };\r\n+    };\r\n+\r\n+    // Query Nominatim (fast: debounce + abort + cache)\r\n+    useEffect(() => {\r\n+        const q = (query || \"\").trim();\r\n+        if (q.length < 3) {\r\n+            setSuggestions([]);\r\n+            setActiveIndex(-1);\r\n+            return;\r\n+        }\r\n+\r\n+        // serve from cache instantly\r\n+        const cached = cacheRef.current.get(q.toLowerCase());\r\n+        if (cached) {\r\n+            setSuggestions(cached);\r\n+        }\r\n+\r\n+        setLoading(true);\r\n+        clearTimeout(debounceRef.current);\r\n+\r\n+        debounceRef.current = setTimeout(async () => {\r\n+            try {\r\n+                // Abort previous request\r\n+                if (controllerRef.current) controllerRef.current.abort();\r\n+                controllerRef.current = new AbortController();\r\n+\r\n+                const url = `https://nominatim.openstreetmap.org/search?format=jsonv2&addressdetails=1&dedupe=1&limit=8&countrycodes=ca&q=${encodeURIComponent(\r\n+                    q\r\n+                )}`;\r\n+\r\n+                const res = await fetch(url, {\r\n+                    headers: {\r\n+                        Accept: \"application/json\",\r\n+                        \"Accept-Language\": \"en-CA\",\r\n+                    },\r\n+                    signal: controllerRef.current.signal,\r\n+                });\r\n+                if (!res.ok) throw new Error(\"Lookup failed\");\r\n+                const data = await res.json();\r\n+\r\n+                const mapped = (Array.isArray(data) ? data : []).map((d) => ({\r\n+                    display_name: d.display_name,\r\n+                    lat: Number(d.lat),\r\n+                    lon: Number(d.lon),\r\n+                    address: d.address || {},\r\n+                    name: d.name || \"\",\r\n+                }));\r\n+\r\n+                cacheRef.current.set(q.toLowerCase(), mapped);\r\n+                setSuggestions(mapped);\r\n+                setActiveIndex(mapped.length ? 0 : -1);\r\n+            } catch (e) {\r\n+                if (e?.name !== \"AbortError\") {\r\n+                    setSuggestions([]);\r\n+                    setActiveIndex(-1);\r\n+                }\r\n+            } finally {\r\n+                setLoading(false);\r\n+            }\r\n+        }, 150);\r\n+\r\n+        return () => {\r\n+            clearTimeout(debounceRef.current);\r\n+            // do not abort here to let the latest request finish if in-flight\r\n+        };\r\n+    }, [query]);\r\n+\r\n+    const handleSelect = (s) => {\r\n+        const view = formatSuggestion(s);\r\n+        setSelected({ ...s, label: [view.primary, view.secondary].filter(Boolean).join(\", \") });\r\n+        setQuery([view.primary, view.secondary].filter(Boolean).join(\", \"));\r\n+        setSuggestions([]);\r\n+        setActiveIndex(-1);\r\n+    };\r\n+\r\n+    const handleKeyDown = (e) => {\r\n+        if (!suggestions.length) return;\r\n+        if (e.key === \"ArrowDown\") {\r\n+            e.preventDefault();\r\n+            setActiveIndex((i) => (i + 1) % suggestions.length);\r\n+            scrollIntoView((activeIndex + 1) % suggestions.length);\r\n+        } else if (e.key === \"ArrowUp\") {\r\n+            e.preventDefault();\r\n+            setActiveIndex((i) => (i - 1 + suggestions.length) % suggestions.length);\r\n+            scrollIntoView((activeIndex - 1 + suggestions.length) % suggestions.length);\r\n+        } else if (e.key === \"Enter\") {\r\n+            e.preventDefault();\r\n+            if (activeIndex >= 0) handleSelect(suggestions[activeIndex]);\r\n+        } else if (e.key === \"Escape\") {\r\n+            setSuggestions([]);\r\n+            setActiveIndex(-1);\r\n+        }\r\n+    };\r\n+\r\n+    const scrollIntoView = (index) => {\r\n+        const node = listRef.current?.querySelector(`[data-idx=\"${index}\"]`);\r\n+        if (node) node.scrollIntoView({ block: \"nearest\" });\r\n+    };\r\n+\r\n+    const canProceed = !!selected?.display_name;\r\n+\r\n+    return (\r\n+        <motion.div\r\n+            key=\"location-step\"\r\n+            initial={{ opacity: 0, x: 50 }}\r\n+            animate={{ opacity: 1, x: 0 }}\r\n+            exit={{ opacity: 0, x: -50 }}\r\n+            transition={{ duration: 0.4 }}\r\n+            className=\"space-y-4\"\r\n+        >\r\n+            <div onBlur={() => setTimeout(() => setSuggestions([]), 120)}>\r\n+                <label htmlFor=\"service-address\" className=\"block text-sm mb-1 text-gray-700\">\r\n+                    Service Address\r\n+                </label>\r\n+                <div className=\"relative\">\r\n+                    <input\r\n+                        id=\"service-address\"\r\n+                        type=\"text\"\r\n+                        value={query}\r\n+                        onChange={(e) => {\r\n+                            setQuery(e.target.value);\r\n+                            setSelected(null);\r\n+                        }}\r\n+                        onKeyDown={handleKeyDown}\r\n+                        placeholder=\"Start typing your address\"\r\n+                        autoComplete=\"off\"\r\n+                        className=\"w-full px-4 py-3 rounded-lg bg-white border border-blue-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 outline-none text-gray-900\"\r\n+                        required\r\n+                        aria-required=\"true\"\r\n+                        aria-autocomplete=\"list\"\r\n+                        aria-controls=\"address-suggestions\"\r\n+                        role=\"combobox\"\r\n+                        aria-expanded={suggestions.length > 0}\r\n+                    />\r\n+                    {loading && (\r\n+                        <div className=\"absolute right-3 top-1/2 -translate-y-1/2 text-sm text-blue-600\">\r\n+                            Searchingâ€¦\r\n+                        </div>\r\n+                    )}\r\n+                    {suggestions.length > 0 && (\r\n+                        <ul\r\n+                            id=\"address-suggestions\"\r\n+                            ref={listRef}\r\n+                            role=\"listbox\"\r\n+                            className=\"absolute top-full left-0 mt-1 bg-white rounded-lg overflow-auto z-50 border border-blue-200 max-h-64 w-full shadow\"\r\n+                        >\r\n+                            {suggestions.map((s, i) => {\r\n+                                const view = formatSuggestion(s);\r\n+                                return (\r\n+                                    <li\r\n+                                        key={`${s.display_name}-${i}`}\r\n+                                        data-idx={i}\r\n+                                        role=\"option\"\r\n+                                        aria-selected={activeIndex === i}\r\n+                                        onMouseDown={() => handleSelect(s)}\r\n+                                        className={`px-4 py-2 cursor-pointer transition text-black text-left ${\r\n+                                            activeIndex === i ? \"bg-blue-100 text-blue-700\" : \"hover:bg-blue-50\"\r\n+                                        }`}\r\n+                                        title={s.display_name}\r\n+                                    >\r\n+                                        <div className=\"font-semibold truncate\">{view.primary || s.name || \"Address\"}</div>\r\n+                                        {view.secondary ? (\r\n+                                            <div className=\"text-sm text-gray-600 truncate\">{view.secondary}</div>\r\n+                                        ) : null}\r\n+                                    </li>\r\n+                                );\r\n+                            })}\r\n+                        </ul>\r\n+                    )}\r\n+                </div>\r\n+                <p className=\"text-xs text-gray-500 mt-2\">\r\n+                    We use your address to confirm availability and estimate travel time. Extra charges may apply if the address is far.\r\n+                </p>\r\n+            </div>\r\n+\r\n+            <div className=\"flex justify-between gap-4\">\r\n+                <button\r\n+                    type=\"button\"\r\n+                    onClick={onBack}\r\n+                    className=\"py-3 px-6 rounded-lg bg-gray-200 hover:bg-gray-300 text-blue-700 font-semibold transition border border-blue-200\"\r\n+                >\r\n+                    Back\r\n+                </button>\r\n+                <button\r\n+                    type=\"button\"\r\n+                    onClick={() =>\r\n+                        canProceed &&\r\n+                        onNext({\r\n+                            address: selected.label || selected.display_name,\r\n+                            lat: selected.lat,\r\n+                            lon: selected.lon,\r\n+                        })\r\n+                    }\r\n+                    disabled={!canProceed}\r\n+                    className={`py-3 px-6 rounded-lg font-semibold transition border \r\n+                        ${\r\n+                            canProceed\r\n+                                ? \"bg-blue-600 hover:bg-blue-700 text-white border-blue-600\"\r\n+                                : \"bg-gray-200 cursor-not-allowed text-gray-400 border-blue-100\"\r\n+                        }`}\r\n+                >\r\n+                    Next\r\n+                </button>\r\n+            </div>\r\n+        </motion.div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1760167162867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -278,255 +278,4 @@\n             </div>\r\n         </motion.div>\r\n     );\r\n }\r\n-\"use client\";\r\n-import { useEffect, useRef, useState } from \"react\";\r\n-import { motion } from \"framer-motion\";\r\n-\r\n-export default function Location({ location, onNext, onBack }) {\r\n-    const [query, setQuery] = useState(location?.address || \"\");\r\n-    const [suggestions, setSuggestions] = useState([]);\r\n-    const [loading, setLoading] = useState(false);\r\n-    const [selected, setSelected] = useState(\r\n-        location?.address\r\n-            ? { display_name: location.address, lat: location.lat, lon: location.lon }\r\n-            : null\r\n-    );\r\n-\r\n-    // Performance and UX helpers\r\n-    const debounceRef = useRef();\r\n-    const controllerRef = useRef(null);\r\n-    const cacheRef = useRef(new Map());\r\n-    const [activeIndex, setActiveIndex] = useState(-1);\r\n-    const listRef = useRef(null);\r\n-\r\n-    // Format concise suggestion parts\r\n-    const formatSuggestion = (s) => {\r\n-        const primaryParts = [];\r\n-        const secondaryParts = [];\r\n-        const addr = s.address || {};\r\n-        // Primary: house number + road or named place\r\n-        const primary =\r\n-            (addr.house_number ? addr.house_number + \" \" : \"\") +\r\n-            (addr.road || addr.pedestrian || addr.cycleway || addr.footway || addr.path || s.name || \"\");\r\n-        if (primary.trim().length) primaryParts.push(primary.trim());\r\n-\r\n-        // Secondary: area + region (short)\r\n-        const locality = addr.city || addr.town || addr.village || addr.suburb || addr.hamlet || addr.neighbourhood;\r\n-        const region = addr.state || addr.province || addr.region || addr.state_district;\r\n-        const postcode = addr.postcode ? ` ${String(addr.postcode).slice(0, 3)}` : \"\";\r\n-\r\n-        if (locality) secondaryParts.push(locality);\r\n-        if (region) secondaryParts.push(region + postcode);\r\n-\r\n-        return {\r\n-            primary: primaryParts.join(\" \").trim() || (s.name || \"\").trim(),\r\n-            secondary: secondaryParts.filter(Boolean).join(\", \"),\r\n-        };\r\n-    };\r\n-\r\n-    // Query Nominatim (fast: debounce + abort + cache)\r\n-    useEffect(() => {\r\n-        const q = (query || \"\").trim();\r\n-        if (q.length < 3) {\r\n-            setSuggestions([]);\r\n-            setActiveIndex(-1);\r\n-            return;\r\n-        }\r\n-\r\n-        // serve from cache instantly\r\n-        const cached = cacheRef.current.get(q.toLowerCase());\r\n-        if (cached) {\r\n-            setSuggestions(cached);\r\n-        }\r\n-\r\n-        setLoading(true);\r\n-        clearTimeout(debounceRef.current);\r\n-\r\n-        debounceRef.current = setTimeout(async () => {\r\n-            try {\r\n-                // Abort previous request\r\n-                if (controllerRef.current) controllerRef.current.abort();\r\n-                controllerRef.current = new AbortController();\r\n-\r\n-                const url = `https://nominatim.openstreetmap.org/search?format=jsonv2&addressdetails=1&dedupe=1&limit=8&countrycodes=ca&q=${encodeURIComponent(\r\n-                    q\r\n-                )}`;\r\n-\r\n-                const res = await fetch(url, {\r\n-                    headers: {\r\n-                        Accept: \"application/json\",\r\n-                        \"Accept-Language\": \"en-CA\",\r\n-                    },\r\n-                    signal: controllerRef.current.signal,\r\n-                });\r\n-                if (!res.ok) throw new Error(\"Lookup failed\");\r\n-                const data = await res.json();\r\n-\r\n-                const mapped = (Array.isArray(data) ? data : []).map((d) => ({\r\n-                    display_name: d.display_name,\r\n-                    lat: Number(d.lat),\r\n-                    lon: Number(d.lon),\r\n-                    address: d.address || {},\r\n-                    name: d.name || \"\",\r\n-                }));\r\n-\r\n-                cacheRef.current.set(q.toLowerCase(), mapped);\r\n-                setSuggestions(mapped);\r\n-                setActiveIndex(mapped.length ? 0 : -1);\r\n-            } catch (e) {\r\n-                if (e?.name !== \"AbortError\") {\r\n-                    setSuggestions([]);\r\n-                    setActiveIndex(-1);\r\n-                }\r\n-            } finally {\r\n-                setLoading(false);\r\n-            }\r\n-        }, 150);\r\n-\r\n-        return () => {\r\n-            clearTimeout(debounceRef.current);\r\n-            // do not abort here to let the latest request finish if in-flight\r\n-        };\r\n-    }, [query]);\r\n-\r\n-    const handleSelect = (s) => {\r\n-        const view = formatSuggestion(s);\r\n-        setSelected({ ...s, label: [view.primary, view.secondary].filter(Boolean).join(\", \") });\r\n-        setQuery([view.primary, view.secondary].filter(Boolean).join(\", \"));\r\n-        setSuggestions([]);\r\n-        setActiveIndex(-1);\r\n-    };\r\n-\r\n-    const handleKeyDown = (e) => {\r\n-        if (!suggestions.length) return;\r\n-        if (e.key === \"ArrowDown\") {\r\n-            e.preventDefault();\r\n-            setActiveIndex((i) => (i + 1) % suggestions.length);\r\n-            scrollIntoView((activeIndex + 1) % suggestions.length);\r\n-        } else if (e.key === \"ArrowUp\") {\r\n-            e.preventDefault();\r\n-            setActiveIndex((i) => (i - 1 + suggestions.length) % suggestions.length);\r\n-            scrollIntoView((activeIndex - 1 + suggestions.length) % suggestions.length);\r\n-        } else if (e.key === \"Enter\") {\r\n-            e.preventDefault();\r\n-            if (activeIndex >= 0) handleSelect(suggestions[activeIndex]);\r\n-        } else if (e.key === \"Escape\") {\r\n-            setSuggestions([]);\r\n-            setActiveIndex(-1);\r\n-        }\r\n-    };\r\n-\r\n-    const scrollIntoView = (index) => {\r\n-        const node = listRef.current?.querySelector(`[data-idx=\"${index}\"]`);\r\n-        if (node) node.scrollIntoView({ block: \"nearest\" });\r\n-    };\r\n-\r\n-    const canProceed = !!selected?.display_name;\r\n-\r\n-    return (\r\n-        <motion.div\r\n-            key=\"location-step\"\r\n-            initial={{ opacity: 0, x: 50 }}\r\n-            animate={{ opacity: 1, x: 0 }}\r\n-            exit={{ opacity: 0, x: -50 }}\r\n-            transition={{ duration: 0.4 }}\r\n-            className=\"space-y-4\"\r\n-        >\r\n-            <div onBlur={() => setTimeout(() => setSuggestions([]), 120)}>\r\n-                <label htmlFor=\"service-address\" className=\"block text-sm mb-1 text-gray-700\">\r\n-                    Service Address\r\n-                </label>\r\n-                <div className=\"relative\">\r\n-                    <input\r\n-                        id=\"service-address\"\r\n-                        type=\"text\"\r\n-                        value={query}\r\n-                        onChange={(e) => {\r\n-                            setQuery(e.target.value);\r\n-                            setSelected(null);\r\n-                        }}\r\n-                        onKeyDown={handleKeyDown}\r\n-                        placeholder=\"Start typing your address\"\r\n-                        autoComplete=\"off\"\r\n-                        className=\"w-full px-4 py-3 rounded-lg bg-white border border-blue-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 outline-none text-gray-900\"\r\n-                        required\r\n-                        aria-required=\"true\"\r\n-                        aria-autocomplete=\"list\"\r\n-                        aria-controls=\"address-suggestions\"\r\n-                        role=\"combobox\"\r\n-                        aria-expanded={suggestions.length > 0}\r\n-                    />\r\n-                    {loading && (\r\n-                        <div className=\"absolute right-3 top-1/2 -translate-y-1/2 text-sm text-blue-600\">\r\n-                            Searchingâ€¦\r\n-                        </div>\r\n-                    )}\r\n-                    {suggestions.length > 0 && (\r\n-                        <ul\r\n-                            id=\"address-suggestions\"\r\n-                            ref={listRef}\r\n-                            role=\"listbox\"\r\n-                            className=\"absolute right-0 left-auto mt-1 bg-white rounded-lg overflow-auto z-50 border border-blue-200 max-h-64 w-[min(36rem,90vw)] shadow\"\r\n-                        >\r\n-                            {suggestions.map((s, i) => {\r\n-                                const view = formatSuggestion(s);\r\n-                                return (\r\n-                                    <li\r\n-                                        key={`${s.display_name}-${i}`}\r\n-                                        data-idx={i}\r\n-                                        role=\"option\"\r\n-                                        aria-selected={activeIndex === i}\r\n-                                        onMouseDown={() => handleSelect(s)}\r\n-                                        className={`px-4 py-2 cursor-pointer transition text-black text-right ${\r\n-                                            activeIndex === i ? \"bg-blue-100 text-blue-700\" : \"hover:bg-blue-50\"\r\n-                                        }`}\r\n-                                        title={s.display_name}\r\n-                                    >\r\n-                                        <div className=\"font-semibold truncate\">{view.primary || s.name || \"Address\"}</div>\r\n-                                        {view.secondary ? (\r\n-                                            <div className=\"text-sm text-gray-600 truncate\">{view.secondary}</div>\r\n-                                        ) : null}\r\n-                                    </li>\r\n-                                );\r\n-                            })}\r\n-                        </ul>\r\n-                    )}\r\n-                </div>\r\n-                <p className=\"text-xs text-gray-500 mt-2\">\r\n-                    We use your address to confirm availability and estimate travel time.\r\n-                </p>\r\n-            </div>\r\n-\r\n-            <div className=\"flex justify-between gap-4\">\r\n-                <button\r\n-                    type=\"button\"\r\n-                    onClick={onBack}\r\n-                    className=\"py-3 px-6 rounded-lg bg-gray-200 hover:bg-gray-300 text-blue-700 font-semibold transition border border-blue-200\"\r\n-                >\r\n-                    Back\r\n-                </button>\r\n-                <button\r\n-                    type=\"button\"\r\n-                    onClick={() =>\r\n-                        canProceed &&\r\n-                        onNext({\r\n-                            address: selected.label || selected.display_name,\r\n-                            lat: selected.lat,\r\n-                            lon: selected.lon,\r\n-                        })\r\n-                    }\r\n-                    disabled={!canProceed}\r\n-                    className={`py-3 px-6 rounded-lg font-semibold transition border \r\n-                        ${\r\n-                            canProceed\r\n-                                ? \"bg-blue-600 hover:bg-blue-700 text-white border-blue-600\"\r\n-                                : \"bg-gray-200 cursor-not-allowed text-gray-400 border-blue-100\"\r\n-                        }`}\r\n-                >\r\n-                    Next\r\n-                </button>\r\n-            </div>\r\n-        </motion.div>\r\n-    );\r\n-}\r\n"
                }
            ],
            "date": 1760160966509,
            "name": "Commit-0",
            "content": "\"use client\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nexport default function Location({ location, onNext, onBack }) {\r\n    const [query, setQuery] = useState(location?.address || \"\");\r\n    const [suggestions, setSuggestions] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [selected, setSelected] = useState(\r\n        location?.address\r\n            ? { display_name: location.address, lat: location.lat, lon: location.lon }\r\n            : null\r\n    );\r\n    const debounceRef = useRef();\r\n\r\n    useEffect(() => {\r\n        if (!query || query.trim().length < 3) {\r\n            setSuggestions([]);\r\n            return;\r\n        }\r\n        setLoading(true);\r\n        clearTimeout(debounceRef.current);\r\n        debounceRef.current = setTimeout(async () => {\r\n            try {\r\n                const url = `https://nominatim.openstreetmap.org/search?format=json&addressdetails=1&limit=5&countrycodes=ca&q=${encodeURIComponent(\r\n                    query\r\n                )}`;\r\n                const res = await fetch(url, {\r\n                    headers: {\r\n                        \"Accept\": \"application/json\",\r\n                    },\r\n                });\r\n                const data = await res.json();\r\n                setSuggestions(\r\n                    Array.isArray(data)\r\n                        ? data.map((d) => ({\r\n                              display_name: d.display_name,\r\n                              lat: d.lat,\r\n                              lon: d.lon,\r\n                          }))\r\n                        : []\r\n                );\r\n            } catch {\r\n                setSuggestions([]);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        }, 300);\r\n        return () => clearTimeout(debounceRef.current);\r\n    }, [query]);\r\n\r\n    const handleSelect = (s) => {\r\n        setSelected(s);\r\n        setQuery(s.display_name);\r\n        setSuggestions([]);\r\n    };\r\n\r\n    const canProceed = !!selected?.display_name;\r\n\r\n    return (\r\n        <motion.div\r\n            key=\"location-step\"\r\n            initial={{ opacity: 0, x: 50 }}\r\n            animate={{ opacity: 1, x: 0 }}\r\n            exit={{ opacity: 0, x: -50 }}\r\n            transition={{ duration: 0.4 }}\r\n            className=\"space-y-4\"\r\n        >\r\n            <div>\r\n                <label htmlFor=\"service-address\" className=\"block text-sm mb-1 text-gray-700\">\r\n                    Service Address\r\n                </label>\r\n                <div className=\"relative\">\r\n                    <input\r\n                        id=\"service-address\"\r\n                        type=\"text\"\r\n                        value={query}\r\n                        onChange={(e) => {\r\n                            setQuery(e.target.value);\r\n                            setSelected(null);\r\n                        }}\r\n                        placeholder=\"Start typing your address\"\r\n                        autoComplete=\"off\"\r\n                        className=\"w-full px-4 py-3 rounded-lg bg-white border border-blue-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 outline-none text-gray-900\"\r\n                        required\r\n                        aria-required=\"true\"\r\n                    />\r\n                    {loading && (\r\n                        <div className=\"absolute right-3 top-1/2 -translate-y-1/2 text-sm text-blue-600\">\r\n                            Searchingâ€¦\r\n                        </div>\r\n                    )}\r\n                    {suggestions.length > 0 && (\r\n                        <ul className=\"absolute left-0 right-0 mt-1 bg-white rounded-lg overflow-hidden z-50 border border-blue-200 max-h-60 overflow-y-auto\">\r\n                            {suggestions.map((s, i) => (\r\n                                <li\r\n                                    key={`${s.display_name}-${i}`}\r\n                                    onMouseDown={() => handleSelect(s)}\r\n                                    className=\"px-4 py-2 cursor-pointer hover:bg-blue-100 hover:text-blue-700 transition text-black\"\r\n                                    title={s.display_name}\r\n                                >\r\n                                    {s.display_name}\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    )}\r\n                </div>\r\n                <p className=\"text-xs text-gray-500 mt-2\">\r\n                    We use your address to confirm availability and estimate travel time.\r\n                </p>\r\n            </div>\r\n\r\n            <div className=\"flex justify-between gap-4\">\r\n                <button\r\n                    type=\"button\"\r\n                    onClick={onBack}\r\n                    className=\"py-3 px-6 rounded-lg bg-gray-200 hover:bg-gray-300 text-blue-700 font-semibold transition border border-blue-200\"\r\n                >\r\n                    Back\r\n                </button>\r\n                <button\r\n                    type=\"button\"\r\n                    onClick={() =>\r\n                        canProceed &&\r\n                        onNext({\r\n                            address: selected.display_name,\r\n                            lat: selected.lat,\r\n                            lon: selected.lon,\r\n                        })\r\n                    }\r\n                    disabled={!canProceed}\r\n                    className={`py-3 px-6 rounded-lg font-semibold transition border \r\n                        ${\r\n                            canProceed\r\n                                ? \"bg-blue-600 hover:bg-blue-700 text-white border-blue-600\"\r\n                                : \"bg-gray-200 cursor-not-allowed text-gray-400 border-blue-100\"\r\n                        }`}\r\n                >\r\n                    Next\r\n                </button>\r\n            </div>\r\n        </motion.div>\r\n    );\r\n}\r\n"
        }
    ]
}