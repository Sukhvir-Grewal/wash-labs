{
    "sourceFile": "components/ProfitsCard.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1760895589535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761270123418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,20 +39,30 @@\n       exp[key] += Number(it.amount || 0) || 0;\r\n     });\r\n     const keys = Array.from(new Set([...Object.keys(rev), ...Object.keys(exp)])).sort();\r\n     const profit = {};\r\n-    keys.forEach(k => { profit[k] = (rev[k] || 0) - (exp[k] || 0); });\r\n+    keys.forEach(k => {\r\n+      const net = (rev[k] || 0) - (exp[k] || 0);\r\n+      profit[k] = Number(net.toFixed(2));\r\n+    });\r\n     return { keys, rev, exp, profit };\r\n   }, [bookings, expenses]);\r\n \r\n-  const totalProfit = useMemo(() => monthly.keys.reduce((s,k)=> s + (monthly.profit[k] || 0), 0), [monthly]);\r\n+  const totalProfit = useMemo(() => {\r\n+    const total = monthly.keys.reduce((s,k)=> s + (monthly.profit[k] || 0), 0);\r\n+    return Number(total.toFixed(2));\r\n+  }, [monthly]);\r\n \r\n   const data = useMemo(() => ({\r\n     labels: monthly.keys,\r\n     datasets: [\r\n       { label: 'Revenue (completed)', data: monthly.keys.map(k => monthly.rev[k] || 0), backgroundColor: 'rgba(37,99,235,0.6)' },\r\n       { label: 'Expenses', data: monthly.keys.map(k => monthly.exp[k] || 0), backgroundColor: 'rgba(239,68,68,0.6)' },\r\n-      { label: 'Profit', data: monthly.keys.map(k => monthly.profit[k] || 0), backgroundColor: 'rgba(16,185,129,0.6)' },\r\n+      {\r\n+        label: 'Profit',\r\n+        data: monthly.keys.map(k => monthly.profit[k] || 0),\r\n+        backgroundColor: monthly.keys.map(k => (monthly.profit[k] || 0) < 0 ? 'rgba(239,68,68,0.8)' : 'rgba(16,185,129,0.6)'),\r\n+      },\r\n     ],\r\n   }), [monthly]);\r\n \r\n   const options = { responsive: true, maintainAspectRatio: false, plugins: { legend: { display: true } } };\r\n@@ -60,9 +70,11 @@\n   return (\r\n     <div className=\"bg-white rounded-xl shadow p-6 border border-blue-100\">\r\n       <div className=\"flex items-center justify-between mb-2\">\r\n         <div className=\"text-lg font-semibold text-blue-700\">Profits</div>\r\n-        <div className=\"text-xl font-bold text-green-700\">${totalProfit}</div>\r\n+        <div className={`text-xl font-bold ${totalProfit < 0 ? 'text-red-600' : 'text-green-700'}`}>\r\n+          ${totalProfit.toFixed(2)}\r\n+        </div>\r\n       </div>\r\n       {error && <div className=\"text-red-600 text-sm mb-2\">{error}</div>}\r\n       <div className=\"w-full mt-2 bg-white rounded-lg p-2\" style={{ height: '240px' }}>\r\n         <Bar data={data} options={options} />\r\n"
                },
                {
                    "date": 1761275787746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,103 @@\n+import { useEffect, useMemo, useState } from 'react';\r\n+import { Bar } from 'react-chartjs-2';\r\n+import { Chart, CategoryScale, LinearScale, BarElement, Tooltip, Legend } from 'chart.js';\r\n+import EyeToggle from './EyeToggle';\r\n+Chart.register(CategoryScale, LinearScale, BarElement, Tooltip, Legend);\r\n+\r\n+function getMonthKey(dateStr) {\r\n+  // bookings have YYYY-MM-DD; expenses use same\r\n+  return (dateStr || '').slice(0,7); // YYYY-MM\r\n+}\r\n+\r\n+export default function ProfitsCard({ bookings }) {\r\n+  const [expenses, setExpenses] = useState([]);\r\n+  const [error, setError] = useState('');\r\n+  const [showChart, setShowChart] = useState(true);\r\n+\r\n+  useEffect(() => {\r\n+    (async () => {\r\n+      try {\r\n+        const res = await fetch('/api/expenses');\r\n+        const data = await res.json();\r\n+        if (res.ok && data.success) setExpenses(data.items || []);\r\n+        else setError(data.error || 'Failed to load expenses');\r\n+      } catch (e) { setError(e.message || 'Failed to load expenses'); }\r\n+    })();\r\n+  }, []);\r\n+\r\n+  const monthly = useMemo(() => {\r\n+    const rev = {}; // completed revenue by month\r\n+    const exp = {}; // expenses by month\r\n+    (bookings || []).forEach(b => {\r\n+      if (b.status !== 'complete') return;\r\n+      const key = getMonthKey(b.date);\r\n+      if (!rev[key]) rev[key] = 0;\r\n+      const amt = Number(b.amount || 0) || 0;\r\n+      rev[key] += amt;\r\n+    });\r\n+    (expenses || []).forEach(it => {\r\n+      const key = getMonthKey(it.date);\r\n+      if (!exp[key]) exp[key] = 0;\r\n+      exp[key] += Number(it.amount || 0) || 0;\r\n+    });\r\n+    const keys = Array.from(new Set([...Object.keys(rev), ...Object.keys(exp)])).sort();\r\n+    const profit = {};\r\n+    keys.forEach(k => {\r\n+      const net = (rev[k] || 0) - (exp[k] || 0);\r\n+      profit[k] = Number(net.toFixed(2));\r\n+    });\r\n+    return { keys, rev, exp, profit };\r\n+  }, [bookings, expenses]);\r\n+\r\n+  const totalProfit = useMemo(() => {\r\n+    const total = monthly.keys.reduce((s,k)=> s + (monthly.profit[k] || 0), 0);\r\n+    return Number(total.toFixed(2));\r\n+  }, [monthly]);\r\n+\r\n+  const data = useMemo(() => ({\r\n+    labels: monthly.keys,\r\n+    datasets: [\r\n+      { label: 'Revenue (completed)', data: monthly.keys.map(k => monthly.rev[k] || 0), backgroundColor: 'rgba(37,99,235,0.6)' },\r\n+      { label: 'Expenses', data: monthly.keys.map(k => monthly.exp[k] || 0), backgroundColor: 'rgba(239,68,68,0.6)' },\r\n+      {\r\n+        label: 'Profit',\r\n+        data: monthly.keys.map(k => monthly.profit[k] || 0),\r\n+        backgroundColor: monthly.keys.map(k => (monthly.profit[k] || 0) < 0 ? 'rgba(239,68,68,0.8)' : 'rgba(16,185,129,0.6)'),\r\n+      },\r\n+    ],\r\n+  }), [monthly]);\r\n+\r\n+  const options = { responsive: true, maintainAspectRatio: false, plugins: { legend: { display: true } } };\r\n+\r\n+  return (\r\n+    <div className=\"bg-white rounded-xl shadow p-6 border border-blue-100\">\r\n+      <div className=\"flex items-start justify-between mb-2\">\r\n+        <div>\r\n+          <div className=\"text-lg font-semibold text-blue-700\">Profits</div>\r\n+          <div className={`text-xl font-bold ${totalProfit < 0 ? 'text-red-600' : 'text-green-700'}`}>\r\n+            ${totalProfit.toFixed(2)}\r\n+          </div>\r\n+        </div>\r\n+        <EyeToggle\r\n+          open={showChart}\r\n+          onToggle={() => setShowChart(prev => !prev)}\r\n+          label=\"profit chart\"\r\n+        />\r\n+      </div>\r\n+      {error && <div className=\"text-red-600 text-sm mb-2\">{error}</div>}\r\n+      <div\r\n+        style={{\r\n+          width: '100%',\r\n+          overflow: 'hidden',\r\n+          transition: 'max-height 0.35s ease, margin-top 0.2s ease',\r\n+          maxHeight: showChart ? '260px' : '0px',\r\n+          marginTop: showChart ? '16px' : '0px',\r\n+        }}\r\n+      >\r\n+        <div className=\"w-full bg-white rounded-lg p-2\" style={{ height: '240px' }}>\r\n+          <Bar data={data} options={options} />\r\n+        </div>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1761276851369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,20 +53,39 @@\n     const total = monthly.keys.reduce((s,k)=> s + (monthly.profit[k] || 0), 0);\r\n     return Number(total.toFixed(2));\r\n   }, [monthly]);\r\n \r\n-  const data = useMemo(() => ({\r\n-    labels: monthly.keys,\r\n-    datasets: [\r\n-      { label: 'Revenue (completed)', data: monthly.keys.map(k => monthly.rev[k] || 0), backgroundColor: 'rgba(37,99,235,0.6)' },\r\n-      { label: 'Expenses', data: monthly.keys.map(k => monthly.exp[k] || 0), backgroundColor: 'rgba(239,68,68,0.6)' },\r\n-      {\r\n-        label: 'Profit',\r\n-        data: monthly.keys.map(k => monthly.profit[k] || 0),\r\n-        backgroundColor: monthly.keys.map(k => (monthly.profit[k] || 0) < 0 ? 'rgba(239,68,68,0.8)' : 'rgba(16,185,129,0.6)'),\r\n-      },\r\n-    ],\r\n-  }), [monthly]);\r\n+  const data = useMemo(() => {\r\n+    const labels = monthly.keys;\r\n+    const profitBackground = labels.map(k => (monthly.profit[k] || 0) < 0 ? 'rgba(239,68,68,0.7)' : 'rgba(16,185,129,0.6)');\r\n+    const profitBorder = labels.map(k => (monthly.profit[k] || 0) < 0 ? 'rgb(220,38,38)' : 'rgb(5,150,105)');\r\n+    return {\r\n+      labels,\r\n+      datasets: [\r\n+        {\r\n+          label: 'Revenue (completed)',\r\n+          data: labels.map(k => monthly.rev[k] || 0),\r\n+          backgroundColor: 'rgba(37,99,235,0.6)',\r\n+          borderColor: 'rgb(37,99,235)',\r\n+          borderWidth: 1,\r\n+        },\r\n+        {\r\n+          label: 'Expenses',\r\n+          data: labels.map(k => monthly.exp[k] || 0),\r\n+          backgroundColor: 'rgba(239,68,68,0.6)',\r\n+          borderColor: 'rgb(239,68,68)',\r\n+          borderWidth: 1,\r\n+        },\r\n+        {\r\n+          label: 'Profit',\r\n+          data: labels.map(k => monthly.profit[k] || 0),\r\n+          backgroundColor: profitBackground,\r\n+          borderColor: profitBorder,\r\n+          borderWidth: 1,\r\n+        },\r\n+      ],\r\n+    };\r\n+  }, [monthly]);\r\n \r\n   const options = { responsive: true, maintainAspectRatio: false, plugins: { legend: { display: true } } };\r\n \r\n   return (\r\n@@ -100,88 +119,4 @@\n       </div>\r\n     </div>\r\n   );\r\n }\r\n-import { useEffect, useMemo, useState } from 'react';\r\n-import { Bar } from 'react-chartjs-2';\r\n-import { Chart, CategoryScale, LinearScale, BarElement, Tooltip, Legend } from 'chart.js';\r\n-Chart.register(CategoryScale, LinearScale, BarElement, Tooltip, Legend);\r\n-\r\n-function getMonthKey(dateStr) {\r\n-  // bookings have YYYY-MM-DD; expenses use same\r\n-  return (dateStr || '').slice(0,7); // YYYY-MM\r\n-}\r\n-\r\n-export default function ProfitsCard({ bookings }) {\r\n-  const [expenses, setExpenses] = useState([]);\r\n-  const [error, setError] = useState('');\r\n-\r\n-  useEffect(() => {\r\n-    (async () => {\r\n-      try {\r\n-        const res = await fetch('/api/expenses');\r\n-        const data = await res.json();\r\n-        if (res.ok && data.success) setExpenses(data.items || []);\r\n-        else setError(data.error || 'Failed to load expenses');\r\n-      } catch (e) { setError(e.message || 'Failed to load expenses'); }\r\n-    })();\r\n-  }, []);\r\n-\r\n-  const monthly = useMemo(() => {\r\n-    const rev = {}; // completed revenue by month\r\n-    const exp = {}; // expenses by month\r\n-    (bookings || []).forEach(b => {\r\n-      if (b.status !== 'complete') return;\r\n-      const key = getMonthKey(b.date);\r\n-      if (!rev[key]) rev[key] = 0;\r\n-      const amt = Number(b.amount || 0) || 0;\r\n-      rev[key] += amt;\r\n-    });\r\n-    (expenses || []).forEach(it => {\r\n-      const key = getMonthKey(it.date);\r\n-      if (!exp[key]) exp[key] = 0;\r\n-      exp[key] += Number(it.amount || 0) || 0;\r\n-    });\r\n-    const keys = Array.from(new Set([...Object.keys(rev), ...Object.keys(exp)])).sort();\r\n-    const profit = {};\r\n-    keys.forEach(k => {\r\n-      const net = (rev[k] || 0) - (exp[k] || 0);\r\n-      profit[k] = Number(net.toFixed(2));\r\n-    });\r\n-    return { keys, rev, exp, profit };\r\n-  }, [bookings, expenses]);\r\n-\r\n-  const totalProfit = useMemo(() => {\r\n-    const total = monthly.keys.reduce((s,k)=> s + (monthly.profit[k] || 0), 0);\r\n-    return Number(total.toFixed(2));\r\n-  }, [monthly]);\r\n-\r\n-  const data = useMemo(() => ({\r\n-    labels: monthly.keys,\r\n-    datasets: [\r\n-      { label: 'Revenue (completed)', data: monthly.keys.map(k => monthly.rev[k] || 0), backgroundColor: 'rgba(37,99,235,0.6)' },\r\n-      { label: 'Expenses', data: monthly.keys.map(k => monthly.exp[k] || 0), backgroundColor: 'rgba(239,68,68,0.6)' },\r\n-      {\r\n-        label: 'Profit',\r\n-        data: monthly.keys.map(k => monthly.profit[k] || 0),\r\n-        backgroundColor: monthly.keys.map(k => (monthly.profit[k] || 0) < 0 ? 'rgba(239,68,68,0.8)' : 'rgba(16,185,129,0.6)'),\r\n-      },\r\n-    ],\r\n-  }), [monthly]);\r\n-\r\n-  const options = { responsive: true, maintainAspectRatio: false, plugins: { legend: { display: true } } };\r\n-\r\n-  return (\r\n-    <div className=\"bg-white rounded-xl shadow p-6 border border-blue-100\">\r\n-      <div className=\"flex items-center justify-between mb-2\">\r\n-        <div className=\"text-lg font-semibold text-blue-700\">Profits</div>\r\n-        <div className={`text-xl font-bold ${totalProfit < 0 ? 'text-red-600' : 'text-green-700'}`}>\r\n-          ${totalProfit.toFixed(2)}\r\n-        </div>\r\n-      </div>\r\n-      {error && <div className=\"text-red-600 text-sm mb-2\">{error}</div>}\r\n-      <div className=\"w-full mt-2 bg-white rounded-lg p-2\" style={{ height: '240px' }}>\r\n-        <Bar data={data} options={options} />\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1761278727781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,162 @@\n+import { useEffect, useMemo, useState } from 'react';\r\n+import { Bar } from 'react-chartjs-2';\r\n+import { Chart, CategoryScale, LinearScale, BarElement, Tooltip, Legend } from 'chart.js';\r\n+import EyeToggle from './EyeToggle';\r\n+Chart.register(CategoryScale, LinearScale, BarElement, Tooltip, Legend);\r\n+\r\n+function getMonthKey(dateStr) {\r\n+  // bookings have YYYY-MM-DD; expenses use same\r\n+  return (dateStr || '').slice(0,7); // YYYY-MM\r\n+}\r\n+\r\n+export default function ProfitsCard({ bookings }) {\r\n+  const [expenses, setExpenses] = useState([]);\r\n+  const [error, setError] = useState('');\r\n+  const [showChart, setShowChart] = useState(false);\r\n+\r\n+  useEffect(() => {\r\n+    (async () => {\r\n+      try {\r\n+        const res = await fetch('/api/expenses');\r\n+        const data = await res.json();\r\n+        if (res.ok && data.success) setExpenses(data.items || []);\r\n+        else setError(data.error || 'Failed to load expenses');\r\n+      } catch (e) { setError(e.message || 'Failed to load expenses'); }\r\n+    })();\r\n+  }, []);\r\n+\r\n+  const monthly = useMemo(() => {\r\n+    const rev = {}; // completed revenue by month\r\n+    const exp = {}; // expenses by month\r\n+    (bookings || []).forEach(b => {\r\n+      if (b.status !== 'complete') return;\r\n+      const key = getMonthKey(b.date);\r\n+      if (!rev[key]) rev[key] = 0;\r\n+      const amt = Number(b.amount || 0) || 0;\r\n+      rev[key] += amt;\r\n+    });\r\n+    (expenses || []).forEach(it => {\r\n+      const key = getMonthKey(it.date);\r\n+      if (!exp[key]) exp[key] = 0;\r\n+      exp[key] += Number(it.amount || 0) || 0;\r\n+    });\r\n+    const keys = Array.from(new Set([...Object.keys(rev), ...Object.keys(exp)])).sort();\r\n+    const profit = {};\r\n+    keys.forEach(k => {\r\n+      const net = (rev[k] || 0) - (exp[k] || 0);\r\n+      profit[k] = Number(net.toFixed(2));\r\n+    });\r\n+    return { keys, rev, exp, profit };\r\n+  }, [bookings, expenses]);\r\n+\r\n+  const totalProfit = useMemo(() => {\r\n+    const total = monthly.keys.reduce((s,k)=> s + (monthly.profit[k] || 0), 0);\r\n+    return Number(total.toFixed(2));\r\n+  }, [monthly]);\r\n+\r\n+  const data = useMemo(() => {\r\n+    const labels = monthly.keys;\r\n+    const profitBackground = labels.map(k => {\r\n+      const value = monthly.profit[k] || 0;\r\n+      return value < 0 ? 'rgba(239,68,68,0.7)' : 'rgba(74,222,128,0.7)';\r\n+    });\r\n+    const profitBorder = labels.map(k => {\r\n+      const value = monthly.profit[k] || 0;\r\n+      return value < 0 ? 'rgb(220,38,38)' : 'rgb(34,197,94)';\r\n+    });\r\n+    return {\r\n+      labels,\r\n+      datasets: [\r\n+        {\r\n+          label: 'Revenue',\r\n+          data: labels.map(k => monthly.rev[k] || 0),\r\n+          backgroundColor: 'rgba(37,99,235,0.6)',\r\n+          borderColor: 'rgb(37,99,235)',\r\n+          borderWidth: 1,\r\n+        },\r\n+        {\r\n+          label: 'Expenses',\r\n+          data: labels.map(k => monthly.exp[k] || 0),\r\n+          backgroundColor: 'rgba(239,68,68,0.6)',\r\n+          borderColor: 'rgb(239,68,68)',\r\n+          borderWidth: 1,\r\n+        },\r\n+        {\r\n+          label: 'Profit',\r\n+          data: labels.map(k => monthly.profit[k] || 0),\r\n+          backgroundColor: profitBackground,\r\n+          borderColor: profitBorder,\r\n+          borderWidth: 1,\r\n+        },\r\n+      ],\r\n+    };\r\n+  }, [monthly]);\r\n+\r\n+  const hasPositiveProfit = useMemo(\r\n+    () => monthly.keys.some(k => (monthly.profit[k] || 0) > 0),\r\n+    [monthly],\r\n+  );\r\n+  const hasNegativeProfit = useMemo(\r\n+    () => monthly.keys.some(k => (monthly.profit[k] || 0) < 0),\r\n+    [monthly],\r\n+  );\r\n+\r\n+  const options = { responsive: true, maintainAspectRatio: false, plugins: { legend: { display: false } } };\r\n+\r\n+  return (\r\n+    <div\r\n+      className=\"rounded-xl shadow p-6\"\r\n+      style={{ backgroundColor: '#bbf7d0' }}\r\n+    >\r\n+      <div className=\"flex items-start justify-between mb-2\">\r\n+        <div>\r\n+          <div className=\"text-lg font-semibold text-emerald-900\">Profits</div>\r\n+          <div className={`text-xl font-bold ${totalProfit < 0 ? 'text-red-600' : 'text-emerald-900'}`}>\r\n+            ${totalProfit.toFixed(2)}\r\n+          </div>\r\n+        </div>\r\n+        <EyeToggle\r\n+          open={showChart}\r\n+          onToggle={() => setShowChart(prev => !prev)}\r\n+          label=\"profit chart\"\r\n+        />\r\n+      </div>\r\n+      {error && <div className=\"text-red-600 text-sm mb-2\">{error}</div>}\r\n+      <div\r\n+        style={{\r\n+          width: '100%',\r\n+          overflow: 'hidden',\r\n+          transition: 'max-height 0.35s ease, margin-top 0.2s ease',\r\n+          maxHeight: showChart ? '260px' : '0px',\r\n+          marginTop: showChart ? '16px' : '0px',\r\n+        }}\r\n+      >\r\n+        <div className=\"w-full bg-white rounded-lg p-2\" style={{ height: '240px' }}>\r\n+          <Bar data={data} options={options} />\r\n+        </div>\r\n+      </div>\r\n+  <div className=\"flex flex-wrap gap-4 mt-4 text-sm text-emerald-900\">\r\n+        <div className=\"flex items-center gap-1\">\r\n+          <span className=\"inline-block w-3 h-3 rounded-sm\" style={{ backgroundColor: 'rgba(37,99,235,0.6)' }} />\r\n+          Revenue\r\n+        </div>\r\n+        <div className=\"flex items-center gap-1\">\r\n+          <span className=\"inline-block w-3 h-3 rounded-sm\" style={{ backgroundColor: 'rgba(239,68,68,0.6)' }} />\r\n+          Expenses\r\n+        </div>\r\n+        {hasPositiveProfit && (\r\n+          <div className=\"flex items-center gap-1\">\r\n+            <span className=\"inline-block w-3 h-3 rounded-sm\" style={{ backgroundColor: 'rgba(74,222,128,0.7)' }} />\r\n+            Profit (+)\r\n+          </div>\r\n+        )}\r\n+        {hasNegativeProfit && (\r\n+          <div className=\"flex items-center gap-1\">\r\n+            <span className=\"inline-block w-3 h-3 rounded-sm\" style={{ backgroundColor: 'rgba(239,68,68,0.7)' }} />\r\n+            Profit (-)\r\n+          </div>\r\n+        )}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n"
                }
            ],
            "date": 1760895589535,
            "name": "Commit-0",
            "content": "import { useEffect, useMemo, useState } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { Chart, CategoryScale, LinearScale, BarElement, Tooltip, Legend } from 'chart.js';\r\nChart.register(CategoryScale, LinearScale, BarElement, Tooltip, Legend);\r\n\r\nfunction getMonthKey(dateStr) {\r\n  // bookings have YYYY-MM-DD; expenses use same\r\n  return (dateStr || '').slice(0,7); // YYYY-MM\r\n}\r\n\r\nexport default function ProfitsCard({ bookings }) {\r\n  const [expenses, setExpenses] = useState([]);\r\n  const [error, setError] = useState('');\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const res = await fetch('/api/expenses');\r\n        const data = await res.json();\r\n        if (res.ok && data.success) setExpenses(data.items || []);\r\n        else setError(data.error || 'Failed to load expenses');\r\n      } catch (e) { setError(e.message || 'Failed to load expenses'); }\r\n    })();\r\n  }, []);\r\n\r\n  const monthly = useMemo(() => {\r\n    const rev = {}; // completed revenue by month\r\n    const exp = {}; // expenses by month\r\n    (bookings || []).forEach(b => {\r\n      if (b.status !== 'complete') return;\r\n      const key = getMonthKey(b.date);\r\n      if (!rev[key]) rev[key] = 0;\r\n      const amt = Number(b.amount || 0) || 0;\r\n      rev[key] += amt;\r\n    });\r\n    (expenses || []).forEach(it => {\r\n      const key = getMonthKey(it.date);\r\n      if (!exp[key]) exp[key] = 0;\r\n      exp[key] += Number(it.amount || 0) || 0;\r\n    });\r\n    const keys = Array.from(new Set([...Object.keys(rev), ...Object.keys(exp)])).sort();\r\n    const profit = {};\r\n    keys.forEach(k => { profit[k] = (rev[k] || 0) - (exp[k] || 0); });\r\n    return { keys, rev, exp, profit };\r\n  }, [bookings, expenses]);\r\n\r\n  const totalProfit = useMemo(() => monthly.keys.reduce((s,k)=> s + (monthly.profit[k] || 0), 0), [monthly]);\r\n\r\n  const data = useMemo(() => ({\r\n    labels: monthly.keys,\r\n    datasets: [\r\n      { label: 'Revenue (completed)', data: monthly.keys.map(k => monthly.rev[k] || 0), backgroundColor: 'rgba(37,99,235,0.6)' },\r\n      { label: 'Expenses', data: monthly.keys.map(k => monthly.exp[k] || 0), backgroundColor: 'rgba(239,68,68,0.6)' },\r\n      { label: 'Profit', data: monthly.keys.map(k => monthly.profit[k] || 0), backgroundColor: 'rgba(16,185,129,0.6)' },\r\n    ],\r\n  }), [monthly]);\r\n\r\n  const options = { responsive: true, maintainAspectRatio: false, plugins: { legend: { display: true } } };\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-xl shadow p-6 border border-blue-100\">\r\n      <div className=\"flex items-center justify-between mb-2\">\r\n        <div className=\"text-lg font-semibold text-blue-700\">Profits</div>\r\n        <div className=\"text-xl font-bold text-green-700\">${totalProfit}</div>\r\n      </div>\r\n      {error && <div className=\"text-red-600 text-sm mb-2\">{error}</div>}\r\n      <div className=\"w-full mt-2 bg-white rounded-lg p-2\" style={{ height: '240px' }}>\r\n        <Bar data={data} options={options} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}