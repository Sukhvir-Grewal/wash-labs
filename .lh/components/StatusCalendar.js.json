{
    "sourceFile": "components/StatusCalendar.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1760681522207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760846638631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,53 +3,105 @@\n import 'react-calendar/dist/Calendar.css';\r\n \r\n function parseISODate(dateStr) {\r\n   if (!dateStr || typeof dateStr !== 'string') return null;\r\n-  const m = dateStr.match(/^(\\d{4})-(\\d{2})-(\\d{2})$/);\r\n+  const norm = dateStr.replace(/\\//g, '-');\r\n+  const m = norm.match(/^(\\d{4})-(\\d{2})-(\\d{2})$/);\r\n   if (!m) return null;\r\n   const [_, y, mo, d] = m;\r\n   return new Date(Number(y), Number(mo) - 1, Number(d));\r\n }\r\n \r\n+function fmtCAD(amount) {\r\n+  const num = Number(amount || 0);\r\n+  return num.toLocaleString('en-CA', { style: 'currency', currency: 'CAD', maximumFractionDigits: 0 });\r\n+}\r\n+\r\n export default function StatusCalendar({ bookings }) {\r\n   const [value, setValue] = useState(new Date());\r\n+  const [filter, setFilter] = useState('all'); // 'all' | 'complete' | 'pending'\r\n \r\n-  const statusByDay = useMemo(() => {\r\n+  const summaryByDay = useMemo(() => {\r\n     const map = {};\r\n-    bookings.forEach(b => {\r\n+    (bookings || []).forEach(b => {\r\n       const dt = parseISODate(b.date);\r\n       if (!dt) return;\r\n       const key = dt.toISOString().slice(0,10);\r\n-      // track statuses for each day\r\n-      if (!map[key]) map[key] = new Set();\r\n-      if (b.status) map[key].add(b.status);\r\n+      const amt = Number(b.amount || 0) || 0;\r\n+      if (!map[key]) map[key] = { complete: 0, pending: 0, sumComplete: 0, sumPending: 0 };\r\n+      if (b.status === 'complete') {\r\n+        map[key].complete += 1;\r\n+        map[key].sumComplete += amt;\r\n+      } else if (b.status === 'pending') {\r\n+        map[key].pending += 1;\r\n+        map[key].sumPending += amt;\r\n+      }\r\n     });\r\n     return map;\r\n   }, [bookings]);\r\n \r\n   const getTileContent = ({ date, view }) => {\r\n     if (view !== 'month') return null;\r\n     const key = date.toISOString().slice(0,10);\r\n-    const statuses = statusByDay[key];\r\n-    if (!statuses) return null;\r\n+    const summary = summaryByDay[key];\r\n+    if (!summary) return null;\r\n \r\n-    const hasPending = statuses.has('pending');\r\n-    const hasComplete = statuses.has('complete');\r\n+    const hasPending = summary.pending > 0;\r\n+    const hasComplete = summary.complete > 0;\r\n \r\n+    // Compose hover label based on filter\r\n+    let hoverTitle = '';\r\n+    if (filter === 'complete' && summary.sumComplete > 0) {\r\n+      hoverTitle = `Earned: ${fmtCAD(summary.sumComplete)}`;\r\n+    } else if (filter === 'pending' && summary.sumPending > 0) {\r\n+      hoverTitle = `PE: ${fmtCAD(summary.sumPending)}`;\r\n+    } else if (filter === 'all') {\r\n+      const parts = [];\r\n+      if (summary.sumComplete > 0) parts.push(`Earned: ${fmtCAD(summary.sumComplete)}`);\r\n+      if (summary.sumPending > 0) parts.push(`PE: ${fmtCAD(summary.sumPending)}`);\r\n+      hoverTitle = parts.join(' | ');\r\n+    }\r\n+\r\n     return (\r\n-      <div style={{ display: 'flex', gap: 4, justifyContent: 'center', marginTop: 2 }}>\r\n-        {hasComplete && <span className=\"cal-dot cal-dot-green\" />}\r\n-        {hasPending && <span className=\"cal-dot cal-dot-yellow\" />}\r\n+      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: 2 }} title={hoverTitle}>\r\n+        <div style={{ display: 'flex', gap: 4, justifyContent: 'center' }}>\r\n+          {(filter === 'all' || filter === 'complete') && hasComplete && <span className=\"cal-dot cal-dot-green\" />}\r\n+          {(filter === 'all' || filter === 'pending') && hasPending && <span className=\"cal-dot cal-dot-yellow\" />}\r\n+        </div>\r\n+        {value && value instanceof Date && value.toISOString().slice(0,10) === key && hoverTitle && (\r\n+          <div className=\"text-[10px] mt-1 text-blue-700/80 font-semibold\">{hoverTitle}</div>\r\n+        )}\r\n       </div>\r\n     );\r\n   };\r\n \r\n   return (\r\n     <div className=\"status-calendar\">\r\n+      <div className=\"flex items-center gap-2 mb-2\">\r\n+        <button onClick={() => setFilter('all')} className={`px-3 py-1 text-sm rounded ${filter === 'all' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`}>All</button>\r\n+        <button onClick={() => setFilter('complete')} className={`px-3 py-1 text-sm rounded ${filter === 'complete' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`}>Completed</button>\r\n+        <button onClick={() => setFilter('pending')} className={`px-3 py-1 text-sm rounded ${filter === 'pending' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`}>Pending</button>\r\n+      </div>\r\n       <Calendar value={value} onChange={setValue} tileContent={getTileContent} />\r\n       <div className=\"flex items-center gap-3 mt-2 text-xs text-gray-600\">\r\n         <span className=\"flex items-center gap-1\"><span className=\"cal-dot cal-dot-green\" /> Complete</span>\r\n         <span className=\"flex items-center gap-1\"><span className=\"cal-dot cal-dot-yellow\" /> Pending</span>\r\n       </div>\r\n+      {/* Selected day summary */}\r\n+      {value && value instanceof Date && (() => {\r\n+        const key = value.toISOString().slice(0,10);\r\n+        const s = summaryByDay[key];\r\n+        if (!s) return null;\r\n+        let text = '';\r\n+        if (filter === 'complete' && s.sumComplete > 0) text = `Earned: ${fmtCAD(s.sumComplete)}`;\r\n+        else if (filter === 'pending' && s.sumPending > 0) text = `PE: ${fmtCAD(s.sumPending)}`;\r\n+        else if (filter === 'all') {\r\n+          const parts = [];\r\n+          if (s.sumComplete > 0) parts.push(`Earned: ${fmtCAD(s.sumComplete)}`);\r\n+          if (s.sumPending > 0) parts.push(`PE: ${fmtCAD(s.sumPending)}`);\r\n+          text = parts.join(' | ');\r\n+        }\r\n+        return text ? <div className=\"mt-2 text-sm text-blue-700/80 font-semibold\">{text}</div> : null;\r\n+      })()}\r\n     </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1760846945365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,100 @@\n+import { useMemo, useState } from 'react';\r\n+import Calendar from 'react-calendar';\r\n+import 'react-calendar/dist/Calendar.css';\r\n+\r\n+function parseISODate(dateStr) {\r\n+  if (!dateStr || typeof dateStr !== 'string') return null;\r\n+  const norm = dateStr.replace(/\\//g, '-');\r\n+  const m = norm.match(/^(\\d{4})-(\\d{2})-(\\d{2})$/);\r\n+  if (!m) return null;\r\n+  const [_, y, mo, d] = m;\r\n+  return new Date(Number(y), Number(mo) - 1, Number(d));\r\n+}\r\n+\r\n+function fmtCAD(amount) {\r\n+  const num = Number(amount || 0);\r\n+  return num.toLocaleString('en-CA', { style: 'currency', currency: 'CAD', maximumFractionDigits: 0 });\r\n+}\r\n+\r\n+export default function StatusCalendar({ bookings }) {\r\n+  const [value, setValue] = useState(new Date());\r\n+  const [filter, setFilter] = useState('all'); // 'all' | 'complete' | 'pending'\r\n+\r\n+  const summaryByDay = useMemo(() => {\r\n+    const map = {};\r\n+    (bookings || []).forEach(b => {\r\n+      const dt = parseISODate(b.date);\r\n+      if (!dt) return;\r\n+      const key = dt.toISOString().slice(0,10);\r\n+      const amt = Number(b.amount || 0) || 0;\r\n+      if (!map[key]) map[key] = { complete: 0, pending: 0, sumComplete: 0, sumPending: 0 };\r\n+      if (b.status === 'complete') {\r\n+        map[key].complete += 1;\r\n+        map[key].sumComplete += amt;\r\n+      } else if (b.status === 'pending') {\r\n+        map[key].pending += 1;\r\n+        map[key].sumPending += amt;\r\n+      }\r\n+    });\r\n+    return map;\r\n+  }, [bookings]);\r\n+\r\n+  const getTileContent = ({ date, view }) => {\r\n+    if (view !== 'month') return null;\r\n+    const key = date.toISOString().slice(0,10);\r\n+    const summary = summaryByDay[key];\r\n+    if (!summary) return null;\r\n+\r\n+    const hasPending = summary.pending > 0;\r\n+    const hasComplete = summary.complete > 0;\r\n+\r\n+    // Compose hover label based on filter\r\n+    let hoverTitle = '';\r\n+    if (filter === 'complete' && summary.sumComplete > 0) {\r\n+      hoverTitle = `Earned: ${fmtCAD(summary.sumComplete)}`;\r\n+    } else if (filter === 'pending' && summary.sumPending > 0) {\r\n+      hoverTitle = `PE: ${fmtCAD(summary.sumPending)}`;\r\n+    } else if (filter === 'all') {\r\n+      const parts = [];\r\n+      if (summary.sumComplete > 0) parts.push(`Earned: ${fmtCAD(summary.sumComplete)}`);\r\n+      if (summary.sumPending > 0) parts.push(`PE: ${fmtCAD(summary.sumPending)}`);\r\n+      hoverTitle = parts.join(' | ');\r\n+    }\r\n+\r\n+    return (\r\n+      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: 2 }} title={hoverTitle}>\r\n+        <div style={{ display: 'flex', gap: 4, justifyContent: 'center' }}>\r\n+          {(filter === 'all' || filter === 'complete') && hasComplete && <span className=\"cal-dot cal-dot-green\" />}\r\n+          {(filter === 'all' || filter === 'pending') && hasPending && <span className=\"cal-dot cal-dot-yellow\" />}\r\n+        </div>\r\n+      </div>\r\n+    );\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"status-calendar\">\r\n+      {/* Count under the Bookings heading, adapts to filter */}\r\n+      {(() => {\r\n+        let pending = 0, complete = 0;\r\n+        (bookings || []).forEach(b => {\r\n+          if (b.status === 'pending') pending += 1;\r\n+          else if (b.status === 'complete') complete += 1;\r\n+        });\r\n+        const displayCount = filter === 'pending' ? pending : filter === 'complete' ? complete : (pending + complete);\r\n+        return (\r\n+          <div className=\"text-3xl font-bold text-blue-900 text-center mb-2\">{displayCount}</div>\r\n+        );\r\n+      })()}\r\n+      <div className=\"flex items-center gap-2 mb-2\">\r\n+        <button onClick={() => setFilter('all')} className={`px-3 py-1 text-sm rounded ${filter === 'all' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`}>All</button>\r\n+        <button onClick={() => setFilter('complete')} className={`px-3 py-1 text-sm rounded ${filter === 'complete' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`}>Completed</button>\r\n+        <button onClick={() => setFilter('pending')} className={`px-3 py-1 text-sm rounded ${filter === 'pending' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`}>Pending</button>\r\n+      </div>\r\n+      <Calendar value={value} onChange={setValue} tileContent={getTileContent} />\r\n+      <div className=\"flex items-center gap-3 mt-2 text-xs text-gray-600\">\r\n+        <span className=\"flex items-center gap-1\"><span className=\"cal-dot cal-dot-green\" /> Complete</span>\r\n+        <span className=\"flex items-center gap-1\"><span className=\"cal-dot cal-dot-yellow\" /> Pending</span>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1760847181871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,15 +50,15 @@\n \r\n     // Compose hover label based on filter\r\n     let hoverTitle = '';\r\n     if (filter === 'complete' && summary.sumComplete > 0) {\r\n-      hoverTitle = `Earned: ${fmtCAD(summary.sumComplete)}`;\r\n+      hoverTitle = `Earned ${fmtCAD(summary.sumComplete)}`;\r\n     } else if (filter === 'pending' && summary.sumPending > 0) {\r\n-      hoverTitle = `PE: ${fmtCAD(summary.sumPending)}`;\r\n+      hoverTitle = `PE ${fmtCAD(summary.sumPending)}`;\r\n     } else if (filter === 'all') {\r\n       const parts = [];\r\n-      if (summary.sumComplete > 0) parts.push(`Earned: ${fmtCAD(summary.sumComplete)}`);\r\n-      if (summary.sumPending > 0) parts.push(`PE: ${fmtCAD(summary.sumPending)}`);\r\n+      if (summary.sumComplete > 0) parts.push(`Earned ${fmtCAD(summary.sumComplete)}`);\r\n+      if (summary.sumPending > 0) parts.push(`PE ${fmtCAD(summary.sumPending)}`);\r\n       hoverTitle = parts.join(' | ');\r\n     }\r\n \r\n     return (\r\n@@ -80,10 +80,11 @@\n           if (b.status === 'pending') pending += 1;\r\n           else if (b.status === 'complete') complete += 1;\r\n         });\r\n         const displayCount = filter === 'pending' ? pending : filter === 'complete' ? complete : (pending + complete);\r\n+        const colorClass = filter === 'complete' ? 'text-green-600' : filter === 'pending' ? 'text-amber-600' : 'text-blue-900';\r\n         return (\r\n-          <div className=\"text-3xl font-bold text-blue-900 text-center mb-2\">{displayCount}</div>\r\n+          <div className={`text-3xl font-bold text-center mb-2 ${colorClass}`}>{displayCount}</div>\r\n         );\r\n       })()}\r\n       <div className=\"flex items-center gap-2 mb-2\">\r\n         <button onClick={() => setFilter('all')} className={`px-3 py-1 text-sm rounded ${filter === 'all' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`}>All</button>\r\n@@ -97,111 +98,4 @@\n       </div>\r\n     </div>\r\n   );\r\n }\r\n-import { useMemo, useState } from 'react';\r\n-import Calendar from 'react-calendar';\r\n-import 'react-calendar/dist/Calendar.css';\r\n-\r\n-function parseISODate(dateStr) {\r\n-  if (!dateStr || typeof dateStr !== 'string') return null;\r\n-  const norm = dateStr.replace(/\\//g, '-');\r\n-  const m = norm.match(/^(\\d{4})-(\\d{2})-(\\d{2})$/);\r\n-  if (!m) return null;\r\n-  const [_, y, mo, d] = m;\r\n-  return new Date(Number(y), Number(mo) - 1, Number(d));\r\n-}\r\n-\r\n-function fmtCAD(amount) {\r\n-  const num = Number(amount || 0);\r\n-  return num.toLocaleString('en-CA', { style: 'currency', currency: 'CAD', maximumFractionDigits: 0 });\r\n-}\r\n-\r\n-export default function StatusCalendar({ bookings }) {\r\n-  const [value, setValue] = useState(new Date());\r\n-  const [filter, setFilter] = useState('all'); // 'all' | 'complete' | 'pending'\r\n-\r\n-  const summaryByDay = useMemo(() => {\r\n-    const map = {};\r\n-    (bookings || []).forEach(b => {\r\n-      const dt = parseISODate(b.date);\r\n-      if (!dt) return;\r\n-      const key = dt.toISOString().slice(0,10);\r\n-      const amt = Number(b.amount || 0) || 0;\r\n-      if (!map[key]) map[key] = { complete: 0, pending: 0, sumComplete: 0, sumPending: 0 };\r\n-      if (b.status === 'complete') {\r\n-        map[key].complete += 1;\r\n-        map[key].sumComplete += amt;\r\n-      } else if (b.status === 'pending') {\r\n-        map[key].pending += 1;\r\n-        map[key].sumPending += amt;\r\n-      }\r\n-    });\r\n-    return map;\r\n-  }, [bookings]);\r\n-\r\n-  const getTileContent = ({ date, view }) => {\r\n-    if (view !== 'month') return null;\r\n-    const key = date.toISOString().slice(0,10);\r\n-    const summary = summaryByDay[key];\r\n-    if (!summary) return null;\r\n-\r\n-    const hasPending = summary.pending > 0;\r\n-    const hasComplete = summary.complete > 0;\r\n-\r\n-    // Compose hover label based on filter\r\n-    let hoverTitle = '';\r\n-    if (filter === 'complete' && summary.sumComplete > 0) {\r\n-      hoverTitle = `Earned: ${fmtCAD(summary.sumComplete)}`;\r\n-    } else if (filter === 'pending' && summary.sumPending > 0) {\r\n-      hoverTitle = `PE: ${fmtCAD(summary.sumPending)}`;\r\n-    } else if (filter === 'all') {\r\n-      const parts = [];\r\n-      if (summary.sumComplete > 0) parts.push(`Earned: ${fmtCAD(summary.sumComplete)}`);\r\n-      if (summary.sumPending > 0) parts.push(`PE: ${fmtCAD(summary.sumPending)}`);\r\n-      hoverTitle = parts.join(' | ');\r\n-    }\r\n-\r\n-    return (\r\n-      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: 2 }} title={hoverTitle}>\r\n-        <div style={{ display: 'flex', gap: 4, justifyContent: 'center' }}>\r\n-          {(filter === 'all' || filter === 'complete') && hasComplete && <span className=\"cal-dot cal-dot-green\" />}\r\n-          {(filter === 'all' || filter === 'pending') && hasPending && <span className=\"cal-dot cal-dot-yellow\" />}\r\n-        </div>\r\n-        {value && value instanceof Date && value.toISOString().slice(0,10) === key && hoverTitle && (\r\n-          <div className=\"text-[10px] mt-1 text-blue-700/80 font-semibold\">{hoverTitle}</div>\r\n-        )}\r\n-      </div>\r\n-    );\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"status-calendar\">\r\n-      <div className=\"flex items-center gap-2 mb-2\">\r\n-        <button onClick={() => setFilter('all')} className={`px-3 py-1 text-sm rounded ${filter === 'all' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`}>All</button>\r\n-        <button onClick={() => setFilter('complete')} className={`px-3 py-1 text-sm rounded ${filter === 'complete' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`}>Completed</button>\r\n-        <button onClick={() => setFilter('pending')} className={`px-3 py-1 text-sm rounded ${filter === 'pending' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`}>Pending</button>\r\n-      </div>\r\n-      <Calendar value={value} onChange={setValue} tileContent={getTileContent} />\r\n-      <div className=\"flex items-center gap-3 mt-2 text-xs text-gray-600\">\r\n-        <span className=\"flex items-center gap-1\"><span className=\"cal-dot cal-dot-green\" /> Complete</span>\r\n-        <span className=\"flex items-center gap-1\"><span className=\"cal-dot cal-dot-yellow\" /> Pending</span>\r\n-      </div>\r\n-      {/* Selected day summary */}\r\n-      {value && value instanceof Date && (() => {\r\n-        const key = value.toISOString().slice(0,10);\r\n-        const s = summaryByDay[key];\r\n-        if (!s) return null;\r\n-        let text = '';\r\n-        if (filter === 'complete' && s.sumComplete > 0) text = `Earned: ${fmtCAD(s.sumComplete)}`;\r\n-        else if (filter === 'pending' && s.sumPending > 0) text = `PE: ${fmtCAD(s.sumPending)}`;\r\n-        else if (filter === 'all') {\r\n-          const parts = [];\r\n-          if (s.sumComplete > 0) parts.push(`Earned: ${fmtCAD(s.sumComplete)}`);\r\n-          if (s.sumPending > 0) parts.push(`PE: ${fmtCAD(s.sumPending)}`);\r\n-          text = parts.join(' | ');\r\n-        }\r\n-        return text ? <div className=\"mt-2 text-sm text-blue-700/80 font-semibold\">{text}</div> : null;\r\n-      })()}\r\n-    </div>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1761274613959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,115 @@\n+import { useMemo, useState } from 'react';\r\n+import Calendar from 'react-calendar';\r\n+import 'react-calendar/dist/Calendar.css';\r\n+\r\n+function parseISODate(dateStr) {\r\n+  if (!dateStr || typeof dateStr !== 'string') return null;\r\n+  const norm = dateStr.replace(/\\//g, '-');\r\n+  const m = norm.match(/^(\\d{4})-(\\d{2})-(\\d{2})$/);\r\n+  if (!m) return null;\r\n+  const [_, y, mo, d] = m;\r\n+  return new Date(Number(y), Number(mo) - 1, Number(d));\r\n+}\r\n+\r\n+function fmtCAD(amount) {\r\n+  const num = Number(amount || 0);\r\n+  return num.toLocaleString('en-CA', { style: 'currency', currency: 'CAD', maximumFractionDigits: 0 });\r\n+}\r\n+\r\n+export default function StatusCalendar({ bookings }) {\r\n+  const [value, setValue] = useState(new Date());\r\n+  const [filter, setFilter] = useState('all'); // 'all' | 'complete' | 'pending'\r\n+\r\n+  const summaryByDay = useMemo(() => {\r\n+    const map = {};\r\n+    (bookings || []).forEach(b => {\r\n+      const dt = parseISODate(b.date);\r\n+      if (!dt) return;\r\n+      const key = dt.toISOString().slice(0,10);\r\n+      const amt = Number(b.amount || 0) || 0;\r\n+      if (!map[key]) map[key] = { complete: 0, pending: 0, sumComplete: 0, sumPending: 0 };\r\n+      if (b.status === 'complete') {\r\n+        map[key].complete += 1;\r\n+        map[key].sumComplete += amt;\r\n+      } else if (b.status === 'pending') {\r\n+        map[key].pending += 1;\r\n+        map[key].sumPending += amt;\r\n+      }\r\n+    });\r\n+    return map;\r\n+  }, [bookings]);\r\n+\r\n+  const getTileContent = ({ date, view }) => {\r\n+    if (view !== 'month') return null;\r\n+    const key = date.toISOString().slice(0,10);\r\n+    const summary = summaryByDay[key];\r\n+    if (!summary) return null;\r\n+\r\n+    const dots = [];\r\n+    const MAX_DOTS = 3;\r\n+\r\n+    if (filter === 'all' || filter === 'complete') {\r\n+      const limit = filter === 'all' ? Math.min(summary.complete, MAX_DOTS - dots.length) : Math.min(summary.complete, MAX_DOTS);\r\n+      for (let i = 0; i < limit; i += 1) dots.push('green');\r\n+    }\r\n+\r\n+    if (filter === 'all' || filter === 'pending') {\r\n+      const remaining = MAX_DOTS - (filter === 'all' ? dots.length : 0);\r\n+      const limit = filter === 'all' ? Math.min(summary.pending, remaining) : Math.min(summary.pending, MAX_DOTS);\r\n+      for (let i = 0; i < limit; i += 1) dots.push('yellow');\r\n+    }\r\n+\r\n+    const limitedDots = dots.slice(0, MAX_DOTS);\r\n+\r\n+    // Compose hover label based on filter\r\n+    let hoverTitle = '';\r\n+    if (filter === 'complete' && summary.sumComplete > 0) {\r\n+      hoverTitle = `Earned ${fmtCAD(summary.sumComplete)}`;\r\n+    } else if (filter === 'pending' && summary.sumPending > 0) {\r\n+      hoverTitle = `PE ${fmtCAD(summary.sumPending)}`;\r\n+    } else if (filter === 'all') {\r\n+      const parts = [];\r\n+      if (summary.sumComplete > 0) parts.push(`Earned ${fmtCAD(summary.sumComplete)}`);\r\n+      if (summary.sumPending > 0) parts.push(`PE ${fmtCAD(summary.sumPending)}`);\r\n+      hoverTitle = parts.join(' | ');\r\n+    }\r\n+\r\n+    return (\r\n+      <div className=\"cal-dot-wrapper\" title={hoverTitle}>\r\n+        <div className=\"cal-dot-row\">\r\n+          {limitedDots.map((color, idx) => (\r\n+            <span key={idx} className={`cal-dot ${color === 'green' ? 'cal-dot-green' : 'cal-dot-yellow'}`} />\r\n+          ))}\r\n+        </div>\r\n+      </div>\r\n+    );\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"status-calendar\">\r\n+      {/* Count under the Bookings heading, adapts to filter */}\r\n+      {(() => {\r\n+        let pending = 0, complete = 0;\r\n+        (bookings || []).forEach(b => {\r\n+          if (b.status === 'pending') pending += 1;\r\n+          else if (b.status === 'complete') complete += 1;\r\n+        });\r\n+        const displayCount = filter === 'pending' ? pending : filter === 'complete' ? complete : (pending + complete);\r\n+        const colorClass = filter === 'complete' ? 'text-green-600' : filter === 'pending' ? 'text-amber-600' : 'text-blue-900';\r\n+        return (\r\n+          <div className={`text-3xl font-bold text-center mb-2 ${colorClass}`}>{displayCount}</div>\r\n+        );\r\n+      })()}\r\n+      <div className=\"flex items-center gap-2 mb-2\">\r\n+        <button onClick={() => setFilter('all')} className={`px-3 py-1 text-sm rounded ${filter === 'all' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`}>All</button>\r\n+        <button onClick={() => setFilter('complete')} className={`px-3 py-1 text-sm rounded ${filter === 'complete' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`}>Completed</button>\r\n+        <button onClick={() => setFilter('pending')} className={`px-3 py-1 text-sm rounded ${filter === 'pending' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`}>Pending</button>\r\n+      </div>\r\n+      <Calendar value={value} onChange={setValue} tileContent={getTileContent} />\r\n+      <div className=\"flex items-center gap-3 mt-2 text-xs text-gray-600\">\r\n+        <span className=\"flex items-center gap-1\"><span className=\"cal-dot cal-dot-green\" /> Complete</span>\r\n+        <span className=\"flex items-center gap-1\"><span className=\"cal-dot cal-dot-yellow\" /> Pending</span>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1761275122366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,115 @@\n+import { useMemo, useState } from 'react';\r\n+import Calendar from 'react-calendar';\r\n+import 'react-calendar/dist/Calendar.css';\r\n+\r\n+function parseISODate(dateStr) {\r\n+  if (!dateStr || typeof dateStr !== 'string') return null;\r\n+  const norm = dateStr.replace(/\\//g, '-');\r\n+  const m = norm.match(/^(\\d{4})-(\\d{2})-(\\d{2})$/);\r\n+  if (!m) return null;\r\n+  const [_, y, mo, d] = m;\r\n+  return new Date(Number(y), Number(mo) - 1, Number(d));\r\n+}\r\n+\r\n+function fmtCAD(amount) {\r\n+  const num = Number(amount || 0);\r\n+  return num.toLocaleString('en-CA', { style: 'currency', currency: 'CAD', maximumFractionDigits: 0 });\r\n+}\r\n+\r\n+export default function StatusCalendar({ bookings }) {\r\n+  const [value, setValue] = useState(new Date());\r\n+  const [filter, setFilter] = useState('all'); // 'all' | 'complete' | 'pending'\r\n+\r\n+  const summaryByDay = useMemo(() => {\r\n+    const map = {};\r\n+    (bookings || []).forEach(b => {\r\n+      const dt = parseISODate(b.date);\r\n+      if (!dt) return;\r\n+      const key = dt.toISOString().slice(0,10);\r\n+      const amt = Number(b.amount || 0) || 0;\r\n+      if (!map[key]) map[key] = { complete: 0, pending: 0, sumComplete: 0, sumPending: 0 };\r\n+      if (b.status === 'complete') {\r\n+        map[key].complete += 1;\r\n+        map[key].sumComplete += amt;\r\n+      } else if (b.status === 'pending') {\r\n+        map[key].pending += 1;\r\n+        map[key].sumPending += amt;\r\n+      }\r\n+    });\r\n+    return map;\r\n+  }, [bookings]);\r\n+\r\n+  const getTileContent = ({ date, view }) => {\r\n+    if (view !== 'month') return null;\r\n+    const key = date.toISOString().slice(0,10);\r\n+    const summary = summaryByDay[key];\r\n+    if (!summary) return null;\r\n+\r\n+    const dots = [];\r\n+    const MAX_DOTS = 3;\r\n+\r\n+    if (filter === 'all' || filter === 'complete') {\r\n+      const limit = filter === 'all' ? Math.min(summary.complete, MAX_DOTS - dots.length) : Math.min(summary.complete, MAX_DOTS);\r\n+      for (let i = 0; i < limit; i += 1) dots.push('green');\r\n+    }\r\n+\r\n+    if (filter === 'all' || filter === 'pending') {\r\n+      const remaining = MAX_DOTS - (filter === 'all' ? dots.length : 0);\r\n+      const limit = filter === 'all' ? Math.min(summary.pending, remaining) : Math.min(summary.pending, MAX_DOTS);\r\n+      for (let i = 0; i < limit; i += 1) dots.push('yellow');\r\n+    }\r\n+\r\n+    const limitedDots = dots.slice(0, MAX_DOTS);\r\n+\r\n+    // Compose hover label based on filter\r\n+    let hoverTitle = '';\r\n+    if (filter === 'complete' && summary.sumComplete > 0) {\r\n+      hoverTitle = `Earned ${fmtCAD(summary.sumComplete)}`;\r\n+    } else if (filter === 'pending' && summary.sumPending > 0) {\r\n+      hoverTitle = `PE ${fmtCAD(summary.sumPending)}`;\r\n+    } else if (filter === 'all') {\r\n+      const parts = [];\r\n+      if (summary.sumComplete > 0) parts.push(`Earned ${fmtCAD(summary.sumComplete)}`);\r\n+      if (summary.sumPending > 0) parts.push(`PE ${fmtCAD(summary.sumPending)}`);\r\n+      hoverTitle = parts.join(' | ');\r\n+    }\r\n+\r\n+    return (\r\n+      <div className=\"cal-dot-wrapper\" title={hoverTitle}>\r\n+        <div className=\"cal-dot-row\">\r\n+          {limitedDots.map((color, idx) => (\r\n+            <span key={idx} className={`cal-dot ${color === 'green' ? 'cal-dot-green' : 'cal-dot-yellow'}`} />\r\n+          ))}\r\n+        </div>\r\n+      </div>\r\n+    );\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"status-calendar\">\r\n+      {/* Count under the Bookings heading, adapts to filter */}\r\n+      {(() => {\r\n+        let pending = 0, complete = 0;\r\n+        (bookings || []).forEach(b => {\r\n+          if (b.status === 'pending') pending += 1;\r\n+          else if (b.status === 'complete') complete += 1;\r\n+        });\r\n+        const displayCount = filter === 'pending' ? pending : filter === 'complete' ? complete : (pending + complete);\r\n+        const colorClass = filter === 'complete' ? 'text-green-600' : filter === 'pending' ? 'text-amber-600' : 'text-blue-900';\r\n+        return (\r\n+          <div className={`text-3xl font-bold text-center mb-2 ${colorClass}`}>{displayCount}</div>\r\n+        );\r\n+      })()}\r\n+      <div className=\"flex items-center gap-2 mb-2\">\r\n+        <button onClick={() => setFilter('all')} className={`px-3 py-1 text-sm rounded ${filter === 'all' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`}>All</button>\r\n+        <button onClick={() => setFilter('complete')} className={`px-3 py-1 text-sm rounded ${filter === 'complete' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`}>Completed</button>\r\n+        <button onClick={() => setFilter('pending')} className={`px-3 py-1 text-sm rounded ${filter === 'pending' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`}>Pending</button>\r\n+      </div>\r\n+      <Calendar value={value} onChange={setValue} tileContent={getTileContent} />\r\n+      <div className=\"flex items-center gap-3 mt-2 text-xs text-gray-600\">\r\n+        <span className=\"flex items-center gap-1\"><span className=\"cal-dot cal-dot-green\" /> Complete</span>\r\n+        <span className=\"flex items-center gap-1\"><span className=\"cal-dot cal-dot-yellow\" /> Pending</span>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1761275137684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,220 +112,4 @@\n       </div>\r\n     </div>\r\n   );\r\n }\r\n-import { useMemo, useState } from 'react';\r\n-import Calendar from 'react-calendar';\r\n-import 'react-calendar/dist/Calendar.css';\r\n-\r\n-function parseISODate(dateStr) {\r\n-  if (!dateStr || typeof dateStr !== 'string') return null;\r\n-  const norm = dateStr.replace(/\\//g, '-');\r\n-  const m = norm.match(/^(\\d{4})-(\\d{2})-(\\d{2})$/);\r\n-  if (!m) return null;\r\n-  const [_, y, mo, d] = m;\r\n-  return new Date(Number(y), Number(mo) - 1, Number(d));\r\n-}\r\n-\r\n-function fmtCAD(amount) {\r\n-  const num = Number(amount || 0);\r\n-  return num.toLocaleString('en-CA', { style: 'currency', currency: 'CAD', maximumFractionDigits: 0 });\r\n-}\r\n-\r\n-export default function StatusCalendar({ bookings }) {\r\n-  const [value, setValue] = useState(new Date());\r\n-  const [filter, setFilter] = useState('all'); // 'all' | 'complete' | 'pending'\r\n-\r\n-  const summaryByDay = useMemo(() => {\r\n-    const map = {};\r\n-    (bookings || []).forEach(b => {\r\n-      const dt = parseISODate(b.date);\r\n-      if (!dt) return;\r\n-      const key = dt.toISOString().slice(0,10);\r\n-      const amt = Number(b.amount || 0) || 0;\r\n-      if (!map[key]) map[key] = { complete: 0, pending: 0, sumComplete: 0, sumPending: 0 };\r\n-      if (b.status === 'complete') {\r\n-        map[key].complete += 1;\r\n-        map[key].sumComplete += amt;\r\n-      } else if (b.status === 'pending') {\r\n-        map[key].pending += 1;\r\n-        map[key].sumPending += amt;\r\n-      }\r\n-    });\r\n-    return map;\r\n-  }, [bookings]);\r\n-\r\n-  const getTileContent = ({ date, view }) => {\r\n-    if (view !== 'month') return null;\r\n-    const key = date.toISOString().slice(0,10);\r\n-    const summary = summaryByDay[key];\r\n-    if (!summary) return null;\r\n-\r\n-    const dots = [];\r\n-    const MAX_DOTS = 3;\r\n-\r\n-    if (filter === 'all' || filter === 'complete') {\r\n-      const limit = filter === 'all' ? Math.min(summary.complete, MAX_DOTS - dots.length) : Math.min(summary.complete, MAX_DOTS);\r\n-      for (let i = 0; i < limit; i += 1) dots.push('green');\r\n-    }\r\n-\r\n-    if (filter === 'all' || filter === 'pending') {\r\n-      const remaining = MAX_DOTS - (filter === 'all' ? dots.length : 0);\r\n-      const limit = filter === 'all' ? Math.min(summary.pending, remaining) : Math.min(summary.pending, MAX_DOTS);\r\n-      for (let i = 0; i < limit; i += 1) dots.push('yellow');\r\n-    }\r\n-\r\n-    const limitedDots = dots.slice(0, MAX_DOTS);\r\n-\r\n-    // Compose hover label based on filter\r\n-    let hoverTitle = '';\r\n-    if (filter === 'complete' && summary.sumComplete > 0) {\r\n-      hoverTitle = `Earned ${fmtCAD(summary.sumComplete)}`;\r\n-    } else if (filter === 'pending' && summary.sumPending > 0) {\r\n-      hoverTitle = `PE ${fmtCAD(summary.sumPending)}`;\r\n-    } else if (filter === 'all') {\r\n-      const parts = [];\r\n-      if (summary.sumComplete > 0) parts.push(`Earned ${fmtCAD(summary.sumComplete)}`);\r\n-      if (summary.sumPending > 0) parts.push(`PE ${fmtCAD(summary.sumPending)}`);\r\n-      hoverTitle = parts.join(' | ');\r\n-    }\r\n-\r\n-    return (\r\n-      <div className=\"cal-dot-wrapper\" title={hoverTitle}>\r\n-        <div className=\"cal-dot-row\">\r\n-          {limitedDots.map((color, idx) => (\r\n-            <span key={idx} className={`cal-dot ${color === 'green' ? 'cal-dot-green' : 'cal-dot-yellow'}`} />\r\n-          ))}\r\n-        </div>\r\n-      </div>\r\n-    );\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"status-calendar\">\r\n-      {/* Count under the Bookings heading, adapts to filter */}\r\n-      {(() => {\r\n-        let pending = 0, complete = 0;\r\n-        (bookings || []).forEach(b => {\r\n-          if (b.status === 'pending') pending += 1;\r\n-          else if (b.status === 'complete') complete += 1;\r\n-        });\r\n-        const displayCount = filter === 'pending' ? pending : filter === 'complete' ? complete : (pending + complete);\r\n-        const colorClass = filter === 'complete' ? 'text-green-600' : filter === 'pending' ? 'text-amber-600' : 'text-blue-900';\r\n-        return (\r\n-          <div className={`text-3xl font-bold text-center mb-2 ${colorClass}`}>{displayCount}</div>\r\n-        );\r\n-      })()}\r\n-      <div className=\"flex items-center gap-2 mb-2\">\r\n-        <button onClick={() => setFilter('all')} className={`px-3 py-1 text-sm rounded ${filter === 'all' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`}>All</button>\r\n-        <button onClick={() => setFilter('complete')} className={`px-3 py-1 text-sm rounded ${filter === 'complete' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`}>Completed</button>\r\n-        <button onClick={() => setFilter('pending')} className={`px-3 py-1 text-sm rounded ${filter === 'pending' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`}>Pending</button>\r\n-      </div>\r\n-      <Calendar value={value} onChange={setValue} tileContent={getTileContent} />\r\n-      <div className=\"flex items-center gap-3 mt-2 text-xs text-gray-600\">\r\n-        <span className=\"flex items-center gap-1\"><span className=\"cal-dot cal-dot-green\" /> Complete</span>\r\n-        <span className=\"flex items-center gap-1\"><span className=\"cal-dot cal-dot-yellow\" /> Pending</span>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-}\r\n-import { useMemo, useState } from 'react';\r\n-import Calendar from 'react-calendar';\r\n-import 'react-calendar/dist/Calendar.css';\r\n-\r\n-function parseISODate(dateStr) {\r\n-  if (!dateStr || typeof dateStr !== 'string') return null;\r\n-  const norm = dateStr.replace(/\\//g, '-');\r\n-  const m = norm.match(/^(\\d{4})-(\\d{2})-(\\d{2})$/);\r\n-  if (!m) return null;\r\n-  const [_, y, mo, d] = m;\r\n-  return new Date(Number(y), Number(mo) - 1, Number(d));\r\n-}\r\n-\r\n-function fmtCAD(amount) {\r\n-  const num = Number(amount || 0);\r\n-  return num.toLocaleString('en-CA', { style: 'currency', currency: 'CAD', maximumFractionDigits: 0 });\r\n-}\r\n-\r\n-export default function StatusCalendar({ bookings }) {\r\n-  const [value, setValue] = useState(new Date());\r\n-  const [filter, setFilter] = useState('all'); // 'all' | 'complete' | 'pending'\r\n-\r\n-  const summaryByDay = useMemo(() => {\r\n-    const map = {};\r\n-    (bookings || []).forEach(b => {\r\n-      const dt = parseISODate(b.date);\r\n-      if (!dt) return;\r\n-      const key = dt.toISOString().slice(0,10);\r\n-      const amt = Number(b.amount || 0) || 0;\r\n-      if (!map[key]) map[key] = { complete: 0, pending: 0, sumComplete: 0, sumPending: 0 };\r\n-      if (b.status === 'complete') {\r\n-        map[key].complete += 1;\r\n-        map[key].sumComplete += amt;\r\n-      } else if (b.status === 'pending') {\r\n-        map[key].pending += 1;\r\n-        map[key].sumPending += amt;\r\n-      }\r\n-    });\r\n-    return map;\r\n-  }, [bookings]);\r\n-\r\n-  const getTileContent = ({ date, view }) => {\r\n-    if (view !== 'month') return null;\r\n-    const key = date.toISOString().slice(0,10);\r\n-    const summary = summaryByDay[key];\r\n-    if (!summary) return null;\r\n-\r\n-    const hasPending = summary.pending > 0;\r\n-    const hasComplete = summary.complete > 0;\r\n-\r\n-    // Compose hover label based on filter\r\n-    let hoverTitle = '';\r\n-    if (filter === 'complete' && summary.sumComplete > 0) {\r\n-      hoverTitle = `Earned ${fmtCAD(summary.sumComplete)}`;\r\n-    } else if (filter === 'pending' && summary.sumPending > 0) {\r\n-      hoverTitle = `PE ${fmtCAD(summary.sumPending)}`;\r\n-    } else if (filter === 'all') {\r\n-      const parts = [];\r\n-      if (summary.sumComplete > 0) parts.push(`Earned ${fmtCAD(summary.sumComplete)}`);\r\n-      if (summary.sumPending > 0) parts.push(`PE ${fmtCAD(summary.sumPending)}`);\r\n-      hoverTitle = parts.join(' | ');\r\n-    }\r\n-\r\n-    return (\r\n-      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: 2 }} title={hoverTitle}>\r\n-        <div style={{ display: 'flex', gap: 4, justifyContent: 'center' }}>\r\n-          {(filter === 'all' || filter === 'complete') && hasComplete && <span className=\"cal-dot cal-dot-green\" />}\r\n-          {(filter === 'all' || filter === 'pending') && hasPending && <span className=\"cal-dot cal-dot-yellow\" />}\r\n-        </div>\r\n-      </div>\r\n-    );\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"status-calendar\">\r\n-      {/* Count under the Bookings heading, adapts to filter */}\r\n-      {(() => {\r\n-        let pending = 0, complete = 0;\r\n-        (bookings || []).forEach(b => {\r\n-          if (b.status === 'pending') pending += 1;\r\n-          else if (b.status === 'complete') complete += 1;\r\n-        });\r\n-        const displayCount = filter === 'pending' ? pending : filter === 'complete' ? complete : (pending + complete);\r\n-        const colorClass = filter === 'complete' ? 'text-green-600' : filter === 'pending' ? 'text-amber-600' : 'text-blue-900';\r\n-        return (\r\n-          <div className={`text-3xl font-bold text-center mb-2 ${colorClass}`}>{displayCount}</div>\r\n-        );\r\n-      })()}\r\n-      <div className=\"flex items-center gap-2 mb-2\">\r\n-        <button onClick={() => setFilter('all')} className={`px-3 py-1 text-sm rounded ${filter === 'all' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`}>All</button>\r\n-        <button onClick={() => setFilter('complete')} className={`px-3 py-1 text-sm rounded ${filter === 'complete' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`}>Completed</button>\r\n-        <button onClick={() => setFilter('pending')} className={`px-3 py-1 text-sm rounded ${filter === 'pending' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`}>Pending</button>\r\n-      </div>\r\n-      <Calendar value={value} onChange={setValue} tileContent={getTileContent} />\r\n-      <div className=\"flex items-center gap-3 mt-2 text-xs text-gray-600\">\r\n-        <span className=\"flex items-center gap-1\"><span className=\"cal-dot cal-dot-green\" /> Complete</span>\r\n-        <span className=\"flex items-center gap-1\"><span className=\"cal-dot cal-dot-yellow\" /> Pending</span>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1761275318161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,115 @@\n+import { useMemo, useState } from 'react';\r\n+import Calendar from 'react-calendar';\r\n+import 'react-calendar/dist/Calendar.css';\r\n+\r\n+function parseISODate(dateStr) {\r\n+  if (!dateStr || typeof dateStr !== 'string') return null;\r\n+  const norm = dateStr.replace(/\\//g, '-');\r\n+  const m = norm.match(/^(\\d{4})-(\\d{2})-(\\d{2})$/);\r\n+  if (!m) return null;\r\n+  const [_, y, mo, d] = m;\r\n+  return new Date(Number(y), Number(mo) - 1, Number(d));\r\n+}\r\n+\r\n+function fmtCAD(amount) {\r\n+  const num = Number(amount || 0);\r\n+  return num.toLocaleString('en-CA', { style: 'currency', currency: 'CAD', maximumFractionDigits: 0 });\r\n+}\r\n+\r\n+export default function StatusCalendar({ bookings }) {\r\n+  const [value, setValue] = useState(new Date());\r\n+  const [filter, setFilter] = useState('all'); // 'all' | 'complete' | 'pending'\r\n+\r\n+  const summaryByDay = useMemo(() => {\r\n+    const map = {};\r\n+    (bookings || []).forEach(b => {\r\n+      const dt = parseISODate(b.date);\r\n+      if (!dt) return;\r\n+      const key = dt.toISOString().slice(0,10);\r\n+      const amt = Number(b.amount || 0) || 0;\r\n+      if (!map[key]) map[key] = { complete: 0, pending: 0, sumComplete: 0, sumPending: 0 };\r\n+      if (b.status === 'complete') {\r\n+        map[key].complete += 1;\r\n+        map[key].sumComplete += amt;\r\n+      } else if (b.status === 'pending') {\r\n+        map[key].pending += 1;\r\n+        map[key].sumPending += amt;\r\n+      }\r\n+    });\r\n+    return map;\r\n+  }, [bookings]);\r\n+\r\n+  const getTileContent = ({ date, view }) => {\r\n+    if (view !== 'month') return null;\r\n+    const key = date.toISOString().slice(0,10);\r\n+    const summary = summaryByDay[key];\r\n+    if (!summary) return null;\r\n+\r\n+    const dots = [];\r\n+    const MAX_DOTS = 3;\r\n+\r\n+    if (filter === 'all' || filter === 'complete') {\r\n+      const limit = filter === 'all' ? Math.min(summary.complete, MAX_DOTS - dots.length) : Math.min(summary.complete, MAX_DOTS);\r\n+      for (let i = 0; i < limit; i += 1) dots.push('green');\r\n+    }\r\n+\r\n+    if (filter === 'all' || filter === 'pending') {\r\n+      const remaining = MAX_DOTS - (filter === 'all' ? dots.length : 0);\r\n+      const limit = filter === 'all' ? Math.min(summary.pending, remaining) : Math.min(summary.pending, MAX_DOTS);\r\n+      for (let i = 0; i < limit; i += 1) dots.push('yellow');\r\n+    }\r\n+\r\n+    const limitedDots = dots.slice(0, MAX_DOTS);\r\n+\r\n+    // Compose hover label based on filter\r\n+    let hoverTitle = '';\r\n+    if (filter === 'complete' && summary.sumComplete > 0) {\r\n+      hoverTitle = `Earned ${fmtCAD(summary.sumComplete)}`;\r\n+    } else if (filter === 'pending' && summary.sumPending > 0) {\r\n+      hoverTitle = `PE ${fmtCAD(summary.sumPending)}`;\r\n+    } else if (filter === 'all') {\r\n+      const parts = [];\r\n+      if (summary.sumComplete > 0) parts.push(`Earned ${fmtCAD(summary.sumComplete)}`);\r\n+      if (summary.sumPending > 0) parts.push(`PE ${fmtCAD(summary.sumPending)}`);\r\n+      hoverTitle = parts.join(' | ');\r\n+    }\r\n+\r\n+    return (\r\n+      <div className=\"cal-dot-wrapper\" title={hoverTitle}>\r\n+        <div className=\"cal-dot-row\">\r\n+          {limitedDots.map((color, idx) => (\r\n+            <span key={idx} className={`cal-dot ${color === 'green' ? 'cal-dot-green' : 'cal-dot-yellow'}`} />\r\n+          ))}\r\n+        </div>\r\n+      </div>\r\n+    );\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"status-calendar\">\r\n+      {/* Count under the Bookings heading, adapts to filter */}\r\n+      {(() => {\r\n+        let pending = 0, complete = 0;\r\n+        (bookings || []).forEach(b => {\r\n+          if (b.status === 'pending') pending += 1;\r\n+          else if (b.status === 'complete') complete += 1;\r\n+        });\r\n+        const displayCount = filter === 'pending' ? pending : filter === 'complete' ? complete : (pending + complete);\r\n+        const colorClass = filter === 'complete' ? 'text-green-600' : filter === 'pending' ? 'text-amber-600' : 'text-blue-900';\r\n+        return (\r\n+          <div className={`text-3xl font-bold text-center mb-2 ${colorClass}`}>{displayCount}</div>\r\n+        );\r\n+      })()}\r\n+      <div className=\"flex items-center gap-2 mb-2\">\r\n+        <button onClick={() => setFilter('all')} className={`px-3 py-1 text-sm rounded ${filter === 'all' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`}>All</button>\r\n+        <button onClick={() => setFilter('complete')} className={`px-3 py-1 text-sm rounded ${filter === 'complete' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`}>Completed</button>\r\n+        <button onClick={() => setFilter('pending')} className={`px-3 py-1 text-sm rounded ${filter === 'pending' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`}>Pending</button>\r\n+      </div>\r\n+      <Calendar value={value} onChange={setValue} tileContent={getTileContent} />\r\n+      <div className=\"flex items-center gap-3 mt-2 text-xs text-gray-600\">\r\n+        <span className=\"flex items-center gap-1\"><span className=\"cal-dot cal-dot-green\" /> Complete</span>\r\n+        <span className=\"flex items-center gap-1\"><span className=\"cal-dot cal-dot-yellow\" /> Pending</span>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n"
                }
            ],
            "date": 1760681522207,
            "name": "Commit-0",
            "content": "import { useMemo, useState } from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css';\r\n\r\nfunction parseISODate(dateStr) {\r\n  if (!dateStr || typeof dateStr !== 'string') return null;\r\n  const m = dateStr.match(/^(\\d{4})-(\\d{2})-(\\d{2})$/);\r\n  if (!m) return null;\r\n  const [_, y, mo, d] = m;\r\n  return new Date(Number(y), Number(mo) - 1, Number(d));\r\n}\r\n\r\nexport default function StatusCalendar({ bookings }) {\r\n  const [value, setValue] = useState(new Date());\r\n\r\n  const statusByDay = useMemo(() => {\r\n    const map = {};\r\n    bookings.forEach(b => {\r\n      const dt = parseISODate(b.date);\r\n      if (!dt) return;\r\n      const key = dt.toISOString().slice(0,10);\r\n      // track statuses for each day\r\n      if (!map[key]) map[key] = new Set();\r\n      if (b.status) map[key].add(b.status);\r\n    });\r\n    return map;\r\n  }, [bookings]);\r\n\r\n  const getTileContent = ({ date, view }) => {\r\n    if (view !== 'month') return null;\r\n    const key = date.toISOString().slice(0,10);\r\n    const statuses = statusByDay[key];\r\n    if (!statuses) return null;\r\n\r\n    const hasPending = statuses.has('pending');\r\n    const hasComplete = statuses.has('complete');\r\n\r\n    return (\r\n      <div style={{ display: 'flex', gap: 4, justifyContent: 'center', marginTop: 2 }}>\r\n        {hasComplete && <span className=\"cal-dot cal-dot-green\" />}\r\n        {hasPending && <span className=\"cal-dot cal-dot-yellow\" />}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"status-calendar\">\r\n      <Calendar value={value} onChange={setValue} tileContent={getTileContent} />\r\n      <div className=\"flex items-center gap-3 mt-2 text-xs text-gray-600\">\r\n        <span className=\"flex items-center gap-1\"><span className=\"cal-dot cal-dot-green\" /> Complete</span>\r\n        <span className=\"flex items-center gap-1\"><span className=\"cal-dot cal-dot-yellow\" /> Pending</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}