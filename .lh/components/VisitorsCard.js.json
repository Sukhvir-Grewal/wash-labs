{
    "sourceFile": "components/VisitorsCard.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1760682513168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760684108444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,141 @@\n+import { useEffect, useState } from 'react';\r\n+import { Line } from 'react-chartjs-2';\r\n+import { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\r\n+Chart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\r\n+\r\n+function groupByWeek(daily) {\r\n+  // Group daily data into weeks\r\n+  const weekMap = {};\r\n+  daily.forEach(d => {\r\n+    if (!d.date) return;\r\n+    const dt = new Date(d.date.slice(0,4), Number(d.date.slice(4,6))-1, Number(d.date.slice(6,8)));\r\n+    const year = dt.getFullYear();\r\n+    const onejan = new Date(year, 0, 1);\r\n+    const week = Math.ceil((((dt - onejan) / 86400000) + onejan.getDay()+1)/7);\r\n+    const key = `${year}-W${week}`;\r\n+    weekMap[key] = (weekMap[key] || 0) + d.users;\r\n+  });\r\n+  return weekMap;\r\n+}\r\n+\r\n+function groupByMonth(daily) {\r\n+  const monthMap = {};\r\n+  daily.forEach(d => {\r\n+    if (!d.date) return;\r\n+    const key = d.date.slice(0,6); // YYYYMM\r\n+    monthMap[key] = (monthMap[key] || 0) + d.users;\r\n+  });\r\n+  return monthMap;\r\n+}\r\n+\r\n+export default function VisitorsCard() {\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState('');\r\n+  const [total, setTotal] = useState(0);\r\n+  const [rawSeries, setRawSeries] = useState([]);\r\n+  const [interval, setInterval] = useState('week'); // 'day' | 'week' | 'month'\r\n+\r\n+  useEffect(() => {\r\n+    let mounted = true;\r\n+    (async () => {\r\n+      try {\r\n+        const resp = await fetch('/api/analytics-visitors');\r\n+        const data = await resp.json();\r\n+        if (!mounted) return;\r\n+        if (resp.ok && data.success) {\r\n+          setTotal(data.totalUsers || 0);\r\n+          setRawSeries(data.daily || []);\r\n+        } else {\r\n+          setError(data.error || 'Failed to fetch');\r\n+        }\r\n+      } catch (e) {\r\n+        if (mounted) setError(e.message || 'Failed to fetch');\r\n+      } finally {\r\n+        if (mounted) setLoading(false);\r\n+      }\r\n+    })();\r\n+    return () => { mounted = false; };\r\n+  }, []);\r\n+\r\n+  let labels = [], values = [];\r\n+  const months = ['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'];\r\n+\r\n+  if (interval === 'day') {\r\n+    labels = rawSeries.map(p => `${p.date?.slice(6,8)}${months[Number(p.date?.slice(4,6))-1]}`);\r\n+    values = rawSeries.map(p => p.users);\r\n+  } else if (interval === 'week') {\r\n+    const weekMap = groupByWeek(rawSeries);\r\n+    const rawWeeks = Object.keys(weekMap).sort();\r\n+    labels = rawWeeks.map(wstr => {\r\n+      const [year, w] = wstr.split('-W');\r\n+      if (year && w) {\r\n+        const weekNum = parseInt(w, 10);\r\n+        const jan1 = new Date(Number(year), 0, 1);\r\n+        const start = new Date(jan1.getTime() + (weekNum - 1) * 7 * 86400000);\r\n+        const dayOfWeek = start.getDay();\r\n+        const weekStart = new Date(start);\r\n+        weekStart.setDate(start.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));\r\n+        const weekEnd = new Date(weekStart);\r\n+        weekEnd.setDate(weekStart.getDate() + 6);\r\n+        const mAbbr = months[weekStart.getMonth()];\r\n+        return `${mAbbr} (${weekStart.getDate()}-${weekEnd.getDate()})`;\r\n+      }\r\n+      return wstr;\r\n+    });\r\n+    values = rawWeeks.map(w => weekMap[w]);\r\n+  } else if (interval === 'month') {\r\n+    const monthMap = groupByMonth(rawSeries);\r\n+    const rawMonths = Object.keys(monthMap).sort();\r\n+    labels = rawMonths.map(mstr => {\r\n+      if (mstr.length === 6) {\r\n+        const y = mstr.slice(0,4);\r\n+        const m = months[Number(mstr.slice(4,6))-1];\r\n+        return `${m} ${y}`;\r\n+      }\r\n+      return mstr;\r\n+    });\r\n+    values = rawMonths.map(m => monthMap[m]);\r\n+  }\r\n+\r\n+  const data = {\r\n+    labels,\r\n+    datasets: [{\r\n+      label: 'Users',\r\n+      data: values,\r\n+      borderColor: 'rgb(16,185,129)',\r\n+      backgroundColor: 'rgba(16,185,129,0.2)',\r\n+      pointBackgroundColor: 'rgb(16,185,129)',\r\n+      tension: 0.2,\r\n+      pointRadius: 3,\r\n+      fill: false,\r\n+    }]\r\n+  };\r\n+\r\n+  const options = {\r\n+    responsive: true,\r\n+    plugins: { legend: { display: false } },\r\n+    scales: {\r\n+      x: { ticks: { color: '#222' }, title: { display: true, text: 'Date' } },\r\n+      y: { ticks: { color: '#222' }, title: { display: true, text: 'Users' }, beginAtZero: true },\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"bg-white rounded-xl shadow p-6 border border-blue-100 flex flex-col items-center justify-center\">\r\n+      <div className=\"text-lg font-semibold mb-2 text-blue-700\">Visitors (GA4)</div>\r\n+      {loading ? (\r\n+        <div className=\"text-blue-600 font-semibold\">Loading...</div>\r\n+      ) : error ? (\r\n+        <div className=\"text-red-600 text-sm\">{error}</div>\r\n+      ) : (\r\n+        <>\r\n+          <div className=\"text-3xl font-bold text-blue-900\">{total.toLocaleString()}</div>\r\n+          <div className=\"w-full mt-4 bg-white rounded-lg p-2\">\r\n+            <Line data={data} options={options} />\r\n+          </div>\r\n+          <div className=\"text-xs mt-2 text-blue-700/70\">Last 30 days total; 14-day trend</div>\r\n+        </>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1760684315404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,163 @@\n+import { useEffect, useState } from 'react';\r\n+import { Line } from 'react-chartjs-2';\r\n+import { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\r\n+Chart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\r\n+\r\n+function groupByWeek(daily) {\r\n+  // Group daily data into weeks\r\n+  const weekMap = {};\r\n+  daily.forEach(d => {\r\n+    if (!d.date) return;\r\n+    const dt = new Date(d.date.slice(0,4), Number(d.date.slice(4,6))-1, Number(d.date.slice(6,8)));\r\n+    const year = dt.getFullYear();\r\n+    const onejan = new Date(year, 0, 1);\r\n+    const week = Math.ceil((((dt - onejan) / 86400000) + onejan.getDay()+1)/7);\r\n+    const key = `${year}-W${week}`;\r\n+    weekMap[key] = (weekMap[key] || 0) + d.users;\r\n+  });\r\n+  return weekMap;\r\n+}\r\n+\r\n+function groupByMonth(daily) {\r\n+  const monthMap = {};\r\n+  daily.forEach(d => {\r\n+    if (!d.date) return;\r\n+    const key = d.date.slice(0,6); // YYYYMM\r\n+    monthMap[key] = (monthMap[key] || 0) + d.users;\r\n+  });\r\n+  return monthMap;\r\n+}\r\n+\r\n+export default function VisitorsCard() {\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState('');\r\n+  const [total, setTotal] = useState(0);\r\n+  const [rawSeries, setRawSeries] = useState([]);\r\n+  const [interval, setInterval] = useState('week'); // 'day' | 'week' | 'month'\r\n+\r\n+  useEffect(() => {\r\n+    let mounted = true;\r\n+    (async () => {\r\n+      try {\r\n+        const resp = await fetch('/api/analytics-visitors');\r\n+        const data = await resp.json();\r\n+        if (!mounted) return;\r\n+        if (resp.ok && data.success) {\r\n+          setTotal(data.totalUsers || 0);\r\n+          setRawSeries(data.daily || []);\r\n+        } else {\r\n+          setError(data.error || 'Failed to fetch');\r\n+        }\r\n+      } catch (e) {\r\n+        if (mounted) setError(e.message || 'Failed to fetch');\r\n+      } finally {\r\n+        if (mounted) setLoading(false);\r\n+      }\r\n+    })();\r\n+    return () => { mounted = false; };\r\n+  }, []);\r\n+\r\n+  let labels = [], values = [];\r\n+  const months = ['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'];\r\n+\r\n+  if (interval === 'day') {\r\n+    labels = rawSeries.map(p => `${p.date?.slice(6,8)}${months[Number(p.date?.slice(4,6))-1]}`);\r\n+    values = rawSeries.map(p => p.users);\r\n+  } else if (interval === 'week') {\r\n+    const weekMap = groupByWeek(rawSeries);\r\n+    const rawWeeks = Object.keys(weekMap).sort();\r\n+    labels = rawWeeks.map(wstr => {\r\n+      const [year, w] = wstr.split('-W');\r\n+      if (year && w) {\r\n+        const weekNum = parseInt(w, 10);\r\n+        const jan1 = new Date(Number(year), 0, 1);\r\n+        const start = new Date(jan1.getTime() + (weekNum - 1) * 7 * 86400000);\r\n+        const dayOfWeek = start.getDay();\r\n+        const weekStart = new Date(start);\r\n+        weekStart.setDate(start.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));\r\n+        const weekEnd = new Date(weekStart);\r\n+        weekEnd.setDate(weekStart.getDate() + 6);\r\n+        const mAbbr = months[weekStart.getMonth()];\r\n+        return `${mAbbr} (${weekStart.getDate()}-${weekEnd.getDate()})`;\r\n+      }\r\n+      return wstr;\r\n+    });\r\n+    values = rawWeeks.map(w => weekMap[w]);\r\n+  } else if (interval === 'month') {\r\n+    const monthMap = groupByMonth(rawSeries);\r\n+    const rawMonths = Object.keys(monthMap).sort();\r\n+    labels = rawMonths.map(mstr => {\r\n+      if (mstr.length === 6) {\r\n+        const y = mstr.slice(0,4);\r\n+        const m = months[Number(mstr.slice(4,6))-1];\r\n+        return `${m} ${y}`;\r\n+      }\r\n+      return mstr;\r\n+    });\r\n+    values = rawMonths.map(m => monthMap[m]);\r\n+  }\r\n+\r\n+  const data = {\r\n+    labels,\r\n+    datasets: [{\r\n+      label: 'Visitors',\r\n+      data: values,\r\n+      borderColor: '#4b5563',\r\n+      backgroundColor: 'rgba(75, 85, 99, 0.1)',\r\n+      pointBackgroundColor: '#4b5563',\r\n+      fill: true,\r\n+      tension: 0.3,\r\n+    }]\r\n+  };\r\n+\r\n+  const options = {\r\n+    responsive: true,\r\n+    maintainAspectRatio: false,\r\n+    plugins: { \r\n+      legend: { display: false },\r\n+      tooltip: {\r\n+        callbacks: {\r\n+          label: ctx => `${ctx.parsed.y} visitors`,\r\n+        }\r\n+      }\r\n+    },\r\n+    scales: {\r\n+      x: { grid: { display: false } },\r\n+      y: { beginAtZero: true, grid: { color: 'rgba(0,0,0,0.05)' } }\r\n+    }\r\n+  };\r\n+\r\n+  let intervalLabel = 'Last 14 days (daily view)';\r\n+  if (interval === 'week') intervalLabel = `Last ${labels.length} weeks (weekly view)`;\r\n+  if (interval === 'month') intervalLabel = `Last ${labels.length} months (monthly view)`;\r\n+\r\n+  return (\r\n+    <div className=\"bg-white shadow-md rounded-lg p-6\">\r\n+      <div className=\"flex justify-between items-center mb-4\">\r\n+        <h2 className=\"text-xl font-semibold text-gray-700\">Website Visitors</h2>\r\n+        <div className=\"flex gap-2\">\r\n+          <button onClick={() => setInterval('day')} className={`px-3 py-1 text-sm rounded ${interval === 'day' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n+            Daily\r\n+          </button>\r\n+          <button onClick={() => setInterval('week')} className={`px-3 py-1 text-sm rounded ${interval === 'week' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n+            Weekly\r\n+          </button>\r\n+          <button onClick={() => setInterval('month')} className={`px-3 py-1 text-sm rounded ${interval === 'month' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n+            Monthly\r\n+          </button>\r\n+        </div>\r\n+      </div>\r\n+      {loading && <p className=\"text-gray-500\">Loading analytics...</p>}\r\n+      {error && <p className=\"text-red-500\">Error: {error}</p>}\r\n+      {!loading && !error && (\r\n+        <div>\r\n+          <div className=\"text-2xl font-bold text-gray-700\">{total.toLocaleString()}</div>\r\n+          <p className=\"text-sm text-gray-600\">{intervalLabel}; Total: 30 days</p>\r\n+          <div className=\"w-full mt-4 bg-white rounded-lg p-2\" style={{ height: '280px' }}>\r\n+            <Line data={data} options={options} />\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1760684326852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,223 +160,4 @@\n       )}\r\n     </div>\r\n   );\r\n }\r\n-import { useEffect, useState } from 'react';\r\n-import { Line } from 'react-chartjs-2';\r\n-import { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\r\n-Chart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\r\n-\r\n-function groupByWeek(daily) {\r\n-  // Group daily data into weeks\r\n-  const weekMap = {};\r\n-  daily.forEach(d => {\r\n-    if (!d.date) return;\r\n-    const dt = new Date(d.date.slice(0,4), Number(d.date.slice(4,6))-1, Number(d.date.slice(6,8)));\r\n-    const year = dt.getFullYear();\r\n-    const onejan = new Date(year, 0, 1);\r\n-    const week = Math.ceil((((dt - onejan) / 86400000) + onejan.getDay()+1)/7);\r\n-    const key = `${year}-W${week}`;\r\n-    weekMap[key] = (weekMap[key] || 0) + d.users;\r\n-  });\r\n-  return weekMap;\r\n-}\r\n-\r\n-function groupByMonth(daily) {\r\n-  const monthMap = {};\r\n-  daily.forEach(d => {\r\n-    if (!d.date) return;\r\n-    const key = d.date.slice(0,6); // YYYYMM\r\n-    monthMap[key] = (monthMap[key] || 0) + d.users;\r\n-  });\r\n-  return monthMap;\r\n-}\r\n-\r\n-export default function VisitorsCard() {\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState('');\r\n-  const [total, setTotal] = useState(0);\r\n-  const [rawSeries, setRawSeries] = useState([]);\r\n-  const [interval, setInterval] = useState('week'); // 'day' | 'week' | 'month'\r\n-\r\n-  useEffect(() => {\r\n-    let mounted = true;\r\n-    (async () => {\r\n-      try {\r\n-        const resp = await fetch('/api/analytics-visitors');\r\n-        const data = await resp.json();\r\n-        if (!mounted) return;\r\n-        if (resp.ok && data.success) {\r\n-          setTotal(data.totalUsers || 0);\r\n-          setRawSeries(data.daily || []);\r\n-        } else {\r\n-          setError(data.error || 'Failed to fetch');\r\n-        }\r\n-      } catch (e) {\r\n-        if (mounted) setError(e.message || 'Failed to fetch');\r\n-      } finally {\r\n-        if (mounted) setLoading(false);\r\n-      }\r\n-    })();\r\n-    return () => { mounted = false; };\r\n-  }, []);\r\n-\r\n-  let labels = [], values = [];\r\n-  const months = ['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'];\r\n-\r\n-  if (interval === 'day') {\r\n-    labels = rawSeries.map(p => `${p.date?.slice(6,8)}${months[Number(p.date?.slice(4,6))-1]}`);\r\n-    values = rawSeries.map(p => p.users);\r\n-  } else if (interval === 'week') {\r\n-    const weekMap = groupByWeek(rawSeries);\r\n-    const rawWeeks = Object.keys(weekMap).sort();\r\n-    labels = rawWeeks.map(wstr => {\r\n-      const [year, w] = wstr.split('-W');\r\n-      if (year && w) {\r\n-        const weekNum = parseInt(w, 10);\r\n-        const jan1 = new Date(Number(year), 0, 1);\r\n-        const start = new Date(jan1.getTime() + (weekNum - 1) * 7 * 86400000);\r\n-        const dayOfWeek = start.getDay();\r\n-        const weekStart = new Date(start);\r\n-        weekStart.setDate(start.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));\r\n-        const weekEnd = new Date(weekStart);\r\n-        weekEnd.setDate(weekStart.getDate() + 6);\r\n-        const mAbbr = months[weekStart.getMonth()];\r\n-        return `${mAbbr} (${weekStart.getDate()}-${weekEnd.getDate()})`;\r\n-      }\r\n-      return wstr;\r\n-    });\r\n-    values = rawWeeks.map(w => weekMap[w]);\r\n-  } else if (interval === 'month') {\r\n-    const monthMap = groupByMonth(rawSeries);\r\n-    const rawMonths = Object.keys(monthMap).sort();\r\n-    labels = rawMonths.map(mstr => {\r\n-      if (mstr.length === 6) {\r\n-        const y = mstr.slice(0,4);\r\n-        const m = months[Number(mstr.slice(4,6))-1];\r\n-        return `${m} ${y}`;\r\n-      }\r\n-      return mstr;\r\n-    });\r\n-    values = rawMonths.map(m => monthMap[m]);\r\n-  }\r\n-\r\n-  const data = {\r\n-    labels,\r\n-    datasets: [{\r\n-      label: 'Users',\r\n-      data: values,\r\n-      borderColor: 'rgb(16,185,129)',\r\n-      backgroundColor: 'rgba(16,185,129,0.2)',\r\n-      pointBackgroundColor: 'rgb(16,185,129)',\r\n-      tension: 0.2,\r\n-      pointRadius: 3,\r\n-      fill: false,\r\n-    }]\r\n-  };\r\n-\r\n-  const options = {\r\n-    responsive: true,\r\n-    plugins: { legend: { display: false } },\r\n-    scales: {\r\n-      x: { ticks: { color: '#222' }, title: { display: true, text: 'Date' } },\r\n-      y: { ticks: { color: '#222' }, title: { display: true, text: 'Users' }, beginAtZero: true },\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"bg-white rounded-xl shadow p-6 border border-blue-100 flex flex-col items-center justify-center\">\r\n-      <div className=\"text-lg font-semibold mb-2 text-blue-700\">Visitors (GA4)</div>\r\n-      {loading ? (\r\n-        <div className=\"text-blue-600 font-semibold\">Loading...</div>\r\n-      ) : error ? (\r\n-        <div className=\"text-red-600 text-sm\">{error}</div>\r\n-      ) : (\r\n-        <>\r\n-          <div className=\"text-3xl font-bold text-blue-900\">{total.toLocaleString()}</div>\r\n-          <div className=\"w-full mt-4 bg-white rounded-lg p-2\">\r\n-            <Line data={data} options={options} />\r\n-          </div>\r\n-          <div className=\"text-xs mt-2 text-blue-700/70\">Last 30 days total; 14-day trend</div>\r\n-        </>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\r\n-import { useEffect, useState } from 'react';\r\n-import { Line } from 'react-chartjs-2';\r\n-import { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\r\n-Chart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\r\n-\r\n-export default function VisitorsCard() {\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState('');\r\n-  const [total, setTotal] = useState(0);\r\n-  const [series, setSeries] = useState([]);\r\n-\r\n-  useEffect(() => {\r\n-    let mounted = true;\r\n-    (async () => {\r\n-      try {\r\n-        const resp = await fetch('/api/analytics-visitors');\r\n-        const data = await resp.json();\r\n-        if (!mounted) return;\r\n-        if (resp.ok && data.success) {\r\n-          setTotal(data.totalUsers || 0);\r\n-          setSeries(data.daily || []);\r\n-        } else {\r\n-          setError(data.error || 'Failed to fetch');\r\n-        }\r\n-      } catch (e) {\r\n-        if (mounted) setError(e.message || 'Failed to fetch');\r\n-      } finally {\r\n-        if (mounted) setLoading(false);\r\n-      }\r\n-    })();\r\n-    return () => { mounted = false; };\r\n-  }, []);\r\n-\r\n-  const labels = series.map(p => `${p.date?.slice(6,8)}${['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'][Number(p.date?.slice(4,6))-1]}`);\r\n-  const values = series.map(p => p.users);\r\n-\r\n-  const data = {\r\n-    labels,\r\n-    datasets: [{\r\n-      label: 'Users',\r\n-      data: values,\r\n-      borderColor: 'rgb(16,185,129)',\r\n-      backgroundColor: 'rgba(16,185,129,0.2)',\r\n-      pointBackgroundColor: 'rgb(16,185,129)',\r\n-      tension: 0.2,\r\n-      pointRadius: 3,\r\n-      fill: false,\r\n-    }]\r\n-  };\r\n-\r\n-  const options = {\r\n-    responsive: true,\r\n-    plugins: { legend: { display: false } },\r\n-    scales: {\r\n-      x: { ticks: { color: '#222' }, title: { display: true, text: 'Date' } },\r\n-      y: { ticks: { color: '#222' }, title: { display: true, text: 'Users' }, beginAtZero: true },\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"bg-white rounded-xl shadow p-6 border border-blue-100 flex flex-col items-center justify-center\">\r\n-      <div className=\"text-lg font-semibold mb-2 text-blue-700\">Visitors (GA4)</div>\r\n-      {loading ? (\r\n-        <div className=\"text-blue-600 font-semibold\">Loading...</div>\r\n-      ) : error ? (\r\n-        <div className=\"text-red-600 text-sm\">{error}</div>\r\n-      ) : (\r\n-        <>\r\n-          <div className=\"text-3xl font-bold text-blue-900\">{total.toLocaleString()}</div>\r\n-          <div className=\"w-full mt-4 bg-white rounded-lg p-2\">\r\n-            <Line data={data} options={options} />\r\n-          </div>\r\n-          <div className=\"text-xs mt-2 text-blue-700/70\">Last 30 days total; 14-day trend</div>\r\n-        </>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1760684371294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,163 @@\n+import { useEffect, useState } from 'react';\r\n+import { Line } from 'react-chartjs-2';\r\n+import { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\r\n+Chart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\r\n+\r\n+function groupByWeek(daily) {\r\n+  // Group daily data into weeks\r\n+  const weekMap = {};\r\n+  daily.forEach(d => {\r\n+    if (!d.date) return;\r\n+    const dt = new Date(d.date.slice(0,4), Number(d.date.slice(4,6))-1, Number(d.date.slice(6,8)));\r\n+    const year = dt.getFullYear();\r\n+    const onejan = new Date(year, 0, 1);\r\n+    const week = Math.ceil((((dt - onejan) / 86400000) + onejan.getDay()+1)/7);\r\n+    const key = `${year}-W${week}`;\r\n+    weekMap[key] = (weekMap[key] || 0) + d.users;\r\n+  });\r\n+  return weekMap;\r\n+}\r\n+\r\n+function groupByMonth(daily) {\r\n+  const monthMap = {};\r\n+  daily.forEach(d => {\r\n+    if (!d.date) return;\r\n+    const key = d.date.slice(0,6); // YYYYMM\r\n+    monthMap[key] = (monthMap[key] || 0) + d.users;\r\n+  });\r\n+  return monthMap;\r\n+}\r\n+\r\n+export default function VisitorsCard() {\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState('');\r\n+  const [total, setTotal] = useState(0);\r\n+  const [rawSeries, setRawSeries] = useState([]);\r\n+  const [interval, setInterval] = useState('week'); // 'day' | 'week' | 'month'\r\n+\r\n+  useEffect(() => {\r\n+    let mounted = true;\r\n+    (async () => {\r\n+      try {\r\n+        const resp = await fetch('/api/analytics-visitors');\r\n+        const data = await resp.json();\r\n+        if (!mounted) return;\r\n+        if (resp.ok && data.success) {\r\n+          setTotal(data.totalUsers || 0);\r\n+          setRawSeries(data.daily || []);\r\n+        } else {\r\n+          setError(data.error || 'Failed to fetch');\r\n+        }\r\n+      } catch (e) {\r\n+        if (mounted) setError(e.message || 'Failed to fetch');\r\n+      } finally {\r\n+        if (mounted) setLoading(false);\r\n+      }\r\n+    })();\r\n+    return () => { mounted = false; };\r\n+  }, []);\r\n+\r\n+  let labels = [], values = [];\r\n+  const months = ['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'];\r\n+\r\n+  if (interval === 'day') {\r\n+    labels = rawSeries.map(p => `${p.date?.slice(6,8)}${months[Number(p.date?.slice(4,6))-1]}`);\r\n+    values = rawSeries.map(p => p.users);\r\n+  } else if (interval === 'week') {\r\n+    const weekMap = groupByWeek(rawSeries);\r\n+    const rawWeeks = Object.keys(weekMap).sort();\r\n+    labels = rawWeeks.map(wstr => {\r\n+      const [year, w] = wstr.split('-W');\r\n+      if (year && w) {\r\n+        const weekNum = parseInt(w, 10);\r\n+        const jan1 = new Date(Number(year), 0, 1);\r\n+        const start = new Date(jan1.getTime() + (weekNum - 1) * 7 * 86400000);\r\n+        const dayOfWeek = start.getDay();\r\n+        const weekStart = new Date(start);\r\n+        weekStart.setDate(start.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));\r\n+        const weekEnd = new Date(weekStart);\r\n+        weekEnd.setDate(weekStart.getDate() + 6);\r\n+        const mAbbr = months[weekStart.getMonth()];\r\n+        return `${mAbbr} (${weekStart.getDate()}-${weekEnd.getDate()})`;\r\n+      }\r\n+      return wstr;\r\n+    });\r\n+    values = rawWeeks.map(w => weekMap[w]);\r\n+  } else if (interval === 'month') {\r\n+    const monthMap = groupByMonth(rawSeries);\r\n+    const rawMonths = Object.keys(monthMap).sort();\r\n+    labels = rawMonths.map(mstr => {\r\n+      if (mstr.length === 6) {\r\n+        const y = mstr.slice(0,4);\r\n+        const m = months[Number(mstr.slice(4,6))-1];\r\n+        return `${m} ${y}`;\r\n+      }\r\n+      return mstr;\r\n+    });\r\n+    values = rawMonths.map(m => monthMap[m]);\r\n+  }\r\n+\r\n+  const data = {\r\n+    labels,\r\n+    datasets: [{\r\n+      label: 'Visitors',\r\n+      data: values,\r\n+      borderColor: '#4b5563',\r\n+      backgroundColor: 'rgba(75, 85, 99, 0.1)',\r\n+      pointBackgroundColor: '#4b5563',\r\n+      fill: true,\r\n+      tension: 0.3,\r\n+    }]\r\n+  };\r\n+\r\n+  const options = {\r\n+    responsive: true,\r\n+    maintainAspectRatio: false,\r\n+    plugins: { \r\n+      legend: { display: false },\r\n+      tooltip: {\r\n+        callbacks: {\r\n+          label: ctx => `${ctx.parsed.y} visitors`,\r\n+        }\r\n+      }\r\n+    },\r\n+    scales: {\r\n+      x: { grid: { display: false } },\r\n+      y: { beginAtZero: true, grid: { color: 'rgba(0,0,0,0.05)' } }\r\n+    }\r\n+  };\r\n+\r\n+  let intervalLabel = 'Last 14 days (daily view)';\r\n+  if (interval === 'week') intervalLabel = `Last ${labels.length} weeks (weekly view)`;\r\n+  if (interval === 'month') intervalLabel = `Last ${labels.length} months (monthly view)`;\r\n+\r\n+  return (\r\n+    <div className=\"bg-white shadow-md rounded-lg p-6\">\r\n+      <div className=\"flex justify-between items-center mb-4\">\r\n+        <h2 className=\"text-xl font-semibold text-blue-600\">Website Visitors</h2>\r\n+        <div className=\"flex gap-2\">\r\n+          <button onClick={() => setInterval('day')} className={`px-3 py-1 text-sm rounded ${interval === 'day' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n+            Daily\r\n+          </button>\r\n+          <button onClick={() => setInterval('week')} className={`px-3 py-1 text-sm rounded ${interval === 'week' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n+            Weekly\r\n+          </button>\r\n+          <button onClick={() => setInterval('month')} className={`px-3 py-1 text-sm rounded ${interval === 'month' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n+            Monthly\r\n+          </button>\r\n+        </div>\r\n+      </div>\r\n+      {loading && <p className=\"text-gray-500\">Loading analytics...</p>}\r\n+      {error && <p className=\"text-red-500\">Error: {error}</p>}\r\n+      {!loading && !error && (\r\n+        <div>\r\n+          <div className=\"text-2xl font-bold text-gray-700\">{total.toLocaleString()}</div>\r\n+          <p className=\"text-sm text-gray-600\">{intervalLabel}; Total: 30 days</p>\r\n+          <div className=\"w-full mt-4 bg-white rounded-lg p-2\" style={{ height: '280px' }}>\r\n+            <Line data={data} options={options} />\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1760684443381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,163 @@\n+import { useEffect, useState } from 'react';\r\n+import { Line } from 'react-chartjs-2';\r\n+import { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\r\n+Chart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\r\n+\r\n+function groupByWeek(daily) {\r\n+  // Group daily data into weeks\r\n+  const weekMap = {};\r\n+  daily.forEach(d => {\r\n+    if (!d.date) return;\r\n+    const dt = new Date(d.date.slice(0,4), Number(d.date.slice(4,6))-1, Number(d.date.slice(6,8)));\r\n+    const year = dt.getFullYear();\r\n+    const onejan = new Date(year, 0, 1);\r\n+    const week = Math.ceil((((dt - onejan) / 86400000) + onejan.getDay()+1)/7);\r\n+    const key = `${year}-W${week}`;\r\n+    weekMap[key] = (weekMap[key] || 0) + d.users;\r\n+  });\r\n+  return weekMap;\r\n+}\r\n+\r\n+function groupByMonth(daily) {\r\n+  const monthMap = {};\r\n+  daily.forEach(d => {\r\n+    if (!d.date) return;\r\n+    const key = d.date.slice(0,6); // YYYYMM\r\n+    monthMap[key] = (monthMap[key] || 0) + d.users;\r\n+  });\r\n+  return monthMap;\r\n+}\r\n+\r\n+export default function VisitorsCard() {\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState('');\r\n+  const [total, setTotal] = useState(0);\r\n+  const [rawSeries, setRawSeries] = useState([]);\r\n+  const [interval, setInterval] = useState('week'); // 'day' | 'week' | 'month'\r\n+\r\n+  useEffect(() => {\r\n+    let mounted = true;\r\n+    (async () => {\r\n+      try {\r\n+        const resp = await fetch('/api/analytics-visitors');\r\n+        const data = await resp.json();\r\n+        if (!mounted) return;\r\n+        if (resp.ok && data.success) {\r\n+          setTotal(data.totalUsers || 0);\r\n+          setRawSeries(data.daily || []);\r\n+        } else {\r\n+          setError(data.error || 'Failed to fetch');\r\n+        }\r\n+      } catch (e) {\r\n+        if (mounted) setError(e.message || 'Failed to fetch');\r\n+      } finally {\r\n+        if (mounted) setLoading(false);\r\n+      }\r\n+    })();\r\n+    return () => { mounted = false; };\r\n+  }, []);\r\n+\r\n+  let labels = [], values = [];\r\n+  const months = ['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'];\r\n+\r\n+  if (interval === 'day') {\r\n+    labels = rawSeries.map(p => `${p.date?.slice(6,8)}${months[Number(p.date?.slice(4,6))-1]}`);\r\n+    values = rawSeries.map(p => p.users);\r\n+  } else if (interval === 'week') {\r\n+    const weekMap = groupByWeek(rawSeries);\r\n+    const rawWeeks = Object.keys(weekMap).sort();\r\n+    labels = rawWeeks.map(wstr => {\r\n+      const [year, w] = wstr.split('-W');\r\n+      if (year && w) {\r\n+        const weekNum = parseInt(w, 10);\r\n+        const jan1 = new Date(Number(year), 0, 1);\r\n+        const start = new Date(jan1.getTime() + (weekNum - 1) * 7 * 86400000);\r\n+        const dayOfWeek = start.getDay();\r\n+        const weekStart = new Date(start);\r\n+        weekStart.setDate(start.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));\r\n+        const weekEnd = new Date(weekStart);\r\n+        weekEnd.setDate(weekStart.getDate() + 6);\r\n+        const mAbbr = months[weekStart.getMonth()];\r\n+        return `${mAbbr} (${weekStart.getDate()}-${weekEnd.getDate()})`;\r\n+      }\r\n+      return wstr;\r\n+    });\r\n+    values = rawWeeks.map(w => weekMap[w]);\r\n+  } else if (interval === 'month') {\r\n+    const monthMap = groupByMonth(rawSeries);\r\n+    const rawMonths = Object.keys(monthMap).sort();\r\n+    labels = rawMonths.map(mstr => {\r\n+      if (mstr.length === 6) {\r\n+        const y = mstr.slice(0,4);\r\n+        const m = months[Number(mstr.slice(4,6))-1];\r\n+        return `${m} ${y}`;\r\n+      }\r\n+      return mstr;\r\n+    });\r\n+    values = rawMonths.map(m => monthMap[m]);\r\n+  }\r\n+\r\n+  const data = {\r\n+    labels,\r\n+    datasets: [{\r\n+      label: 'Visitors',\r\n+      data: values,\r\n+      borderColor: '#4b5563',\r\n+      backgroundColor: 'rgba(75, 85, 99, 0.1)',\r\n+      pointBackgroundColor: '#4b5563',\r\n+      fill: true,\r\n+      tension: 0.3,\r\n+    }]\r\n+  };\r\n+\r\n+  const options = {\r\n+    responsive: true,\r\n+    maintainAspectRatio: false,\r\n+    plugins: { \r\n+      legend: { display: false },\r\n+      tooltip: {\r\n+        callbacks: {\r\n+          label: ctx => `${ctx.parsed.y} visitors`,\r\n+        }\r\n+      }\r\n+    },\r\n+    scales: {\r\n+      x: { grid: { display: false } },\r\n+      y: { beginAtZero: true, grid: { color: 'rgba(0,0,0,0.05)' } }\r\n+    }\r\n+  };\r\n+\r\n+  let intervalLabel = 'Last 14 days (daily view)';\r\n+  if (interval === 'week') intervalLabel = `Last ${labels.length} weeks (weekly view)`;\r\n+  if (interval === 'month') intervalLabel = `Last ${labels.length} months (monthly view)`;\r\n+\r\n+  return (\r\n+    <div className=\"bg-white shadow-md rounded-lg p-6\">\r\n+      <div className=\"flex justify-between items-center mb-4\">\r\n+        <h2 className=\"text-xl font-semibold\" style={{ color: '#2563eb' }}>Website Visitors</h2>\r\n+        <div className=\"flex gap-2\">\r\n+          <button onClick={() => setInterval('day')} className={`px-3 py-1 text-sm rounded ${interval === 'day' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n+            Daily\r\n+          </button>\r\n+          <button onClick={() => setInterval('week')} className={`px-3 py-1 text-sm rounded ${interval === 'week' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n+            Weekly\r\n+          </button>\r\n+          <button onClick={() => setInterval('month')} className={`px-3 py-1 text-sm rounded ${interval === 'month' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n+            Monthly\r\n+          </button>\r\n+        </div>\r\n+      </div>\r\n+      {loading && <p className=\"text-gray-500\">Loading analytics...</p>}\r\n+      {error && <p className=\"text-red-500\">Error: {error}</p>}\r\n+      {!loading && !error && (\r\n+        <div>\r\n+          <div className=\"text-2xl font-bold text-gray-700\">{total.toLocaleString()}</div>\r\n+          <p className=\"text-sm text-gray-600\">{intervalLabel}; Total: 30 days</p>\r\n+          <div className=\"w-full mt-4 bg-white rounded-lg p-2\" style={{ height: '280px' }}>\r\n+            <Line data={data} options={options} />\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1760730144354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,163 @@\n+import { useEffect, useState } from 'react';\r\n+import { Line } from 'react-chartjs-2';\r\n+import { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend, Filler } from 'chart.js';\r\n+Chart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend, Filler);\r\n+\r\n+function groupByWeek(daily) {\r\n+  // Group daily data into weeks\r\n+  const weekMap = {};\r\n+  daily.forEach(d => {\r\n+    if (!d.date) return;\r\n+    const dt = new Date(d.date.slice(0,4), Number(d.date.slice(4,6))-1, Number(d.date.slice(6,8)));\r\n+    const year = dt.getFullYear();\r\n+    const onejan = new Date(year, 0, 1);\r\n+    const week = Math.ceil((((dt - onejan) / 86400000) + onejan.getDay()+1)/7);\r\n+    const key = `${year}-W${week}`;\r\n+    weekMap[key] = (weekMap[key] || 0) + d.users;\r\n+  });\r\n+  return weekMap;\r\n+}\r\n+\r\n+function groupByMonth(daily) {\r\n+  const monthMap = {};\r\n+  daily.forEach(d => {\r\n+    if (!d.date) return;\r\n+    const key = d.date.slice(0,6); // YYYYMM\r\n+    monthMap[key] = (monthMap[key] || 0) + d.users;\r\n+  });\r\n+  return monthMap;\r\n+}\r\n+\r\n+export default function VisitorsCard() {\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState('');\r\n+  const [total, setTotal] = useState(0);\r\n+  const [rawSeries, setRawSeries] = useState([]);\r\n+  const [interval, setInterval] = useState('week'); // 'day' | 'week' | 'month'\r\n+\r\n+  useEffect(() => {\r\n+    let mounted = true;\r\n+    (async () => {\r\n+      try {\r\n+        const resp = await fetch('/api/analytics-visitors');\r\n+        const data = await resp.json();\r\n+        if (!mounted) return;\r\n+        if (resp.ok && data.success) {\r\n+          setTotal(data.totalUsers || 0);\r\n+          setRawSeries(data.daily || []);\r\n+        } else {\r\n+          setError(data.error || 'Failed to fetch');\r\n+        }\r\n+      } catch (e) {\r\n+        if (mounted) setError(e.message || 'Failed to fetch');\r\n+      } finally {\r\n+        if (mounted) setLoading(false);\r\n+      }\r\n+    })();\r\n+    return () => { mounted = false; };\r\n+  }, []);\r\n+\r\n+  let labels = [], values = [];\r\n+  const months = ['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'];\r\n+\r\n+  if (interval === 'day') {\r\n+    labels = rawSeries.map(p => `${p.date?.slice(6,8)}${months[Number(p.date?.slice(4,6))-1]}`);\r\n+    values = rawSeries.map(p => p.users);\r\n+  } else if (interval === 'week') {\r\n+    const weekMap = groupByWeek(rawSeries);\r\n+    const rawWeeks = Object.keys(weekMap).sort();\r\n+    labels = rawWeeks.map(wstr => {\r\n+      const [year, w] = wstr.split('-W');\r\n+      if (year && w) {\r\n+        const weekNum = parseInt(w, 10);\r\n+        const jan1 = new Date(Number(year), 0, 1);\r\n+        const start = new Date(jan1.getTime() + (weekNum - 1) * 7 * 86400000);\r\n+        const dayOfWeek = start.getDay();\r\n+        const weekStart = new Date(start);\r\n+        weekStart.setDate(start.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));\r\n+        const weekEnd = new Date(weekStart);\r\n+        weekEnd.setDate(weekStart.getDate() + 6);\r\n+        const mAbbr = months[weekStart.getMonth()];\r\n+        return `${mAbbr} (${weekStart.getDate()}-${weekEnd.getDate()})`;\r\n+      }\r\n+      return wstr;\r\n+    });\r\n+    values = rawWeeks.map(w => weekMap[w]);\r\n+  } else if (interval === 'month') {\r\n+    const monthMap = groupByMonth(rawSeries);\r\n+    const rawMonths = Object.keys(monthMap).sort();\r\n+    labels = rawMonths.map(mstr => {\r\n+      if (mstr.length === 6) {\r\n+        const y = mstr.slice(0,4);\r\n+        const m = months[Number(mstr.slice(4,6))-1];\r\n+        return `${m} ${y}`;\r\n+      }\r\n+      return mstr;\r\n+    });\r\n+    values = rawMonths.map(m => monthMap[m]);\r\n+  }\r\n+\r\n+  const data = {\r\n+    labels,\r\n+    datasets: [{\r\n+      label: 'Visitors',\r\n+      data: values,\r\n+      borderColor: '#4b5563',\r\n+      backgroundColor: 'rgba(75, 85, 99, 0.1)',\r\n+      pointBackgroundColor: '#4b5563',\r\n+      fill: true,\r\n+      tension: 0.3,\r\n+    }]\r\n+  };\r\n+\r\n+  const options = {\r\n+    responsive: true,\r\n+    maintainAspectRatio: false,\r\n+    plugins: { \r\n+      legend: { display: false },\r\n+      tooltip: {\r\n+        callbacks: {\r\n+          label: ctx => `${ctx.parsed.y} visitors`,\r\n+        }\r\n+      }\r\n+    },\r\n+    scales: {\r\n+      x: { grid: { display: false } },\r\n+      y: { beginAtZero: true, grid: { color: 'rgba(0,0,0,0.05)' } }\r\n+    }\r\n+  };\r\n+\r\n+  let intervalLabel = 'Last 14 days (daily view)';\r\n+  if (interval === 'week') intervalLabel = `Last ${labels.length} weeks (weekly view)`;\r\n+  if (interval === 'month') intervalLabel = `Last ${labels.length} months (monthly view)`;\r\n+\r\n+  return (\r\n+    <div className=\"bg-white shadow-md rounded-lg p-6\">\r\n+      <div className=\"flex justify-between items-center mb-4\">\r\n+        <h2 className=\"text-xl font-semibold\" style={{ color: '#2563eb' }}>Website Visitors</h2>\r\n+        <div className=\"flex gap-2\">\r\n+          <button onClick={() => setInterval('day')} className={`px-3 py-1 text-sm rounded ${interval === 'day' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n+            Daily\r\n+          </button>\r\n+          <button onClick={() => setInterval('week')} className={`px-3 py-1 text-sm rounded ${interval === 'week' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n+            Weekly\r\n+          </button>\r\n+          <button onClick={() => setInterval('month')} className={`px-3 py-1 text-sm rounded ${interval === 'month' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n+            Monthly\r\n+          </button>\r\n+        </div>\r\n+      </div>\r\n+      {loading && <p className=\"text-gray-500\">Loading analytics...</p>}\r\n+      {error && <p className=\"text-red-500\">Error: {error}</p>}\r\n+      {!loading && !error && (\r\n+        <div>\r\n+          <div className=\"text-2xl font-bold text-gray-700\">{total.toLocaleString()}</div>\r\n+          <p className=\"text-sm text-gray-600\">{intervalLabel}; Total: 30 days</p>\r\n+          <div className=\"w-full mt-4 bg-white rounded-lg p-2\" style={{ height: '280px' }}>\r\n+            <Line data={data} options={options} />\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1760730803110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,169 +1,6 @@\n import { useEffect, useState } from 'react';\r\n import { Line } from 'react-chartjs-2';\r\n-import { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend, Filler } from 'chart.js';\r\n-Chart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend, Filler);\r\n-\r\n-function groupByWeek(daily) {\r\n-  // Group daily data into weeks\r\n-  const weekMap = {};\r\n-  daily.forEach(d => {\r\n-    if (!d.date) return;\r\n-    const dt = new Date(d.date.slice(0,4), Number(d.date.slice(4,6))-1, Number(d.date.slice(6,8)));\r\n-    const year = dt.getFullYear();\r\n-    const onejan = new Date(year, 0, 1);\r\n-    const week = Math.ceil((((dt - onejan) / 86400000) + onejan.getDay()+1)/7);\r\n-    const key = `${year}-W${week}`;\r\n-    weekMap[key] = (weekMap[key] || 0) + d.users;\r\n-  });\r\n-  return weekMap;\r\n-}\r\n-\r\n-function groupByMonth(daily) {\r\n-  const monthMap = {};\r\n-  daily.forEach(d => {\r\n-    if (!d.date) return;\r\n-    const key = d.date.slice(0,6); // YYYYMM\r\n-    monthMap[key] = (monthMap[key] || 0) + d.users;\r\n-  });\r\n-  return monthMap;\r\n-}\r\n-\r\n-export default function VisitorsCard() {\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState('');\r\n-  const [total, setTotal] = useState(0);\r\n-  const [rawSeries, setRawSeries] = useState([]);\r\n-  const [interval, setInterval] = useState('week'); // 'day' | 'week' | 'month'\r\n-\r\n-  useEffect(() => {\r\n-    let mounted = true;\r\n-    (async () => {\r\n-      try {\r\n-        const resp = await fetch('/api/analytics-visitors');\r\n-        const data = await resp.json();\r\n-        if (!mounted) return;\r\n-        if (resp.ok && data.success) {\r\n-          setTotal(data.totalUsers || 0);\r\n-          setRawSeries(data.daily || []);\r\n-        } else {\r\n-          setError(data.error || 'Failed to fetch');\r\n-        }\r\n-      } catch (e) {\r\n-        if (mounted) setError(e.message || 'Failed to fetch');\r\n-      } finally {\r\n-        if (mounted) setLoading(false);\r\n-      }\r\n-    })();\r\n-    return () => { mounted = false; };\r\n-  }, []);\r\n-\r\n-  let labels = [], values = [];\r\n-  const months = ['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'];\r\n-\r\n-  if (interval === 'day') {\r\n-    labels = rawSeries.map(p => `${p.date?.slice(6,8)}${months[Number(p.date?.slice(4,6))-1]}`);\r\n-    values = rawSeries.map(p => p.users);\r\n-  } else if (interval === 'week') {\r\n-    const weekMap = groupByWeek(rawSeries);\r\n-    const rawWeeks = Object.keys(weekMap).sort();\r\n-    labels = rawWeeks.map(wstr => {\r\n-      const [year, w] = wstr.split('-W');\r\n-      if (year && w) {\r\n-        const weekNum = parseInt(w, 10);\r\n-        const jan1 = new Date(Number(year), 0, 1);\r\n-        const start = new Date(jan1.getTime() + (weekNum - 1) * 7 * 86400000);\r\n-        const dayOfWeek = start.getDay();\r\n-        const weekStart = new Date(start);\r\n-        weekStart.setDate(start.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));\r\n-        const weekEnd = new Date(weekStart);\r\n-        weekEnd.setDate(weekStart.getDate() + 6);\r\n-        const mAbbr = months[weekStart.getMonth()];\r\n-        return `${mAbbr} (${weekStart.getDate()}-${weekEnd.getDate()})`;\r\n-      }\r\n-      return wstr;\r\n-    });\r\n-    values = rawWeeks.map(w => weekMap[w]);\r\n-  } else if (interval === 'month') {\r\n-    const monthMap = groupByMonth(rawSeries);\r\n-    const rawMonths = Object.keys(monthMap).sort();\r\n-    labels = rawMonths.map(mstr => {\r\n-      if (mstr.length === 6) {\r\n-        const y = mstr.slice(0,4);\r\n-        const m = months[Number(mstr.slice(4,6))-1];\r\n-        return `${m} ${y}`;\r\n-      }\r\n-      return mstr;\r\n-    });\r\n-    values = rawMonths.map(m => monthMap[m]);\r\n-  }\r\n-\r\n-  const data = {\r\n-    labels,\r\n-    datasets: [{\r\n-      label: 'Visitors',\r\n-      data: values,\r\n-      borderColor: '#4b5563',\r\n-      backgroundColor: 'rgba(75, 85, 99, 0.1)',\r\n-      pointBackgroundColor: '#4b5563',\r\n-      fill: true,\r\n-      tension: 0.3,\r\n-    }]\r\n-  };\r\n-\r\n-  const options = {\r\n-    responsive: true,\r\n-    maintainAspectRatio: false,\r\n-    plugins: { \r\n-      legend: { display: false },\r\n-      tooltip: {\r\n-        callbacks: {\r\n-          label: ctx => `${ctx.parsed.y} visitors`,\r\n-        }\r\n-      }\r\n-    },\r\n-    scales: {\r\n-      x: { grid: { display: false } },\r\n-      y: { beginAtZero: true, grid: { color: 'rgba(0,0,0,0.05)' } }\r\n-    }\r\n-  };\r\n-\r\n-  let intervalLabel = 'Last 14 days (daily view)';\r\n-  if (interval === 'week') intervalLabel = `Last ${labels.length} weeks (weekly view)`;\r\n-  if (interval === 'month') intervalLabel = `Last ${labels.length} months (monthly view)`;\r\n-\r\n-  return (\r\n-    <div className=\"bg-white shadow-md rounded-lg p-6\">\r\n-      <div className=\"flex justify-between items-center mb-4\">\r\n-        <h2 className=\"text-xl font-semibold\" style={{ color: '#2563eb' }}>Website Visitors</h2>\r\n-        <div className=\"flex gap-2\">\r\n-          <button onClick={() => setInterval('day')} className={`px-3 py-1 text-sm rounded ${interval === 'day' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n-            Daily\r\n-          </button>\r\n-          <button onClick={() => setInterval('week')} className={`px-3 py-1 text-sm rounded ${interval === 'week' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n-            Weekly\r\n-          </button>\r\n-          <button onClick={() => setInterval('month')} className={`px-3 py-1 text-sm rounded ${interval === 'month' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n-            Monthly\r\n-          </button>\r\n-        </div>\r\n-      </div>\r\n-      {loading && <p className=\"text-gray-500\">Loading analytics...</p>}\r\n-      {error && <p className=\"text-red-500\">Error: {error}</p>}\r\n-      {!loading && !error && (\r\n-        <div>\r\n-          <div className=\"text-2xl font-bold text-gray-700\">{total.toLocaleString()}</div>\r\n-          <p className=\"text-sm text-gray-600\">{intervalLabel}; Total: 30 days</p>\r\n-          <div className=\"w-full mt-4 bg-white rounded-lg p-2\" style={{ height: '280px' }}>\r\n-            <Line data={data} options={options} />\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\r\n-import { useEffect, useState } from 'react';\r\n-import { Line } from 'react-chartjs-2';\r\n import { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\r\n Chart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\r\n \r\n function groupByWeek(daily) {\r\n@@ -323,330 +160,4 @@\n       )}\r\n     </div>\r\n   );\r\n }\r\n-import { useEffect, useState } from 'react';\r\n-import { Line } from 'react-chartjs-2';\r\n-import { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\r\n-Chart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\r\n-\r\n-function groupByWeek(daily) {\r\n-  // Group daily data into weeks\r\n-  const weekMap = {};\r\n-  daily.forEach(d => {\r\n-    if (!d.date) return;\r\n-    const dt = new Date(d.date.slice(0,4), Number(d.date.slice(4,6))-1, Number(d.date.slice(6,8)));\r\n-    const year = dt.getFullYear();\r\n-    const onejan = new Date(year, 0, 1);\r\n-    const week = Math.ceil((((dt - onejan) / 86400000) + onejan.getDay()+1)/7);\r\n-    const key = `${year}-W${week}`;\r\n-    weekMap[key] = (weekMap[key] || 0) + d.users;\r\n-  });\r\n-  return weekMap;\r\n-}\r\n-\r\n-function groupByMonth(daily) {\r\n-  const monthMap = {};\r\n-  daily.forEach(d => {\r\n-    if (!d.date) return;\r\n-    const key = d.date.slice(0,6); // YYYYMM\r\n-    monthMap[key] = (monthMap[key] || 0) + d.users;\r\n-  });\r\n-  return monthMap;\r\n-}\r\n-\r\n-export default function VisitorsCard() {\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState('');\r\n-  const [total, setTotal] = useState(0);\r\n-  const [rawSeries, setRawSeries] = useState([]);\r\n-  const [interval, setInterval] = useState('week'); // 'day' | 'week' | 'month'\r\n-\r\n-  useEffect(() => {\r\n-    let mounted = true;\r\n-    (async () => {\r\n-      try {\r\n-        const resp = await fetch('/api/analytics-visitors');\r\n-        const data = await resp.json();\r\n-        if (!mounted) return;\r\n-        if (resp.ok && data.success) {\r\n-          setTotal(data.totalUsers || 0);\r\n-          setRawSeries(data.daily || []);\r\n-        } else {\r\n-          setError(data.error || 'Failed to fetch');\r\n-        }\r\n-      } catch (e) {\r\n-        if (mounted) setError(e.message || 'Failed to fetch');\r\n-      } finally {\r\n-        if (mounted) setLoading(false);\r\n-      }\r\n-    })();\r\n-    return () => { mounted = false; };\r\n-  }, []);\r\n-\r\n-  let labels = [], values = [];\r\n-  const months = ['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'];\r\n-\r\n-  if (interval === 'day') {\r\n-    labels = rawSeries.map(p => `${p.date?.slice(6,8)}${months[Number(p.date?.slice(4,6))-1]}`);\r\n-    values = rawSeries.map(p => p.users);\r\n-  } else if (interval === 'week') {\r\n-    const weekMap = groupByWeek(rawSeries);\r\n-    const rawWeeks = Object.keys(weekMap).sort();\r\n-    labels = rawWeeks.map(wstr => {\r\n-      const [year, w] = wstr.split('-W');\r\n-      if (year && w) {\r\n-        const weekNum = parseInt(w, 10);\r\n-        const jan1 = new Date(Number(year), 0, 1);\r\n-        const start = new Date(jan1.getTime() + (weekNum - 1) * 7 * 86400000);\r\n-        const dayOfWeek = start.getDay();\r\n-        const weekStart = new Date(start);\r\n-        weekStart.setDate(start.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));\r\n-        const weekEnd = new Date(weekStart);\r\n-        weekEnd.setDate(weekStart.getDate() + 6);\r\n-        const mAbbr = months[weekStart.getMonth()];\r\n-        return `${mAbbr} (${weekStart.getDate()}-${weekEnd.getDate()})`;\r\n-      }\r\n-      return wstr;\r\n-    });\r\n-    values = rawWeeks.map(w => weekMap[w]);\r\n-  } else if (interval === 'month') {\r\n-    const monthMap = groupByMonth(rawSeries);\r\n-    const rawMonths = Object.keys(monthMap).sort();\r\n-    labels = rawMonths.map(mstr => {\r\n-      if (mstr.length === 6) {\r\n-        const y = mstr.slice(0,4);\r\n-        const m = months[Number(mstr.slice(4,6))-1];\r\n-        return `${m} ${y}`;\r\n-      }\r\n-      return mstr;\r\n-    });\r\n-    values = rawMonths.map(m => monthMap[m]);\r\n-  }\r\n-\r\n-  const data = {\r\n-    labels,\r\n-    datasets: [{\r\n-      label: 'Visitors',\r\n-      data: values,\r\n-      borderColor: '#4b5563',\r\n-      backgroundColor: 'rgba(75, 85, 99, 0.1)',\r\n-      pointBackgroundColor: '#4b5563',\r\n-      fill: true,\r\n-      tension: 0.3,\r\n-    }]\r\n-  };\r\n-\r\n-  const options = {\r\n-    responsive: true,\r\n-    maintainAspectRatio: false,\r\n-    plugins: { \r\n-      legend: { display: false },\r\n-      tooltip: {\r\n-        callbacks: {\r\n-          label: ctx => `${ctx.parsed.y} visitors`,\r\n-        }\r\n-      }\r\n-    },\r\n-    scales: {\r\n-      x: { grid: { display: false } },\r\n-      y: { beginAtZero: true, grid: { color: 'rgba(0,0,0,0.05)' } }\r\n-    }\r\n-  };\r\n-\r\n-  let intervalLabel = 'Last 14 days (daily view)';\r\n-  if (interval === 'week') intervalLabel = `Last ${labels.length} weeks (weekly view)`;\r\n-  if (interval === 'month') intervalLabel = `Last ${labels.length} months (monthly view)`;\r\n-\r\n-  return (\r\n-    <div className=\"bg-white shadow-md rounded-lg p-6\">\r\n-      <div className=\"flex justify-between items-center mb-4\">\r\n-        <h2 className=\"text-xl font-semibold text-blue-600\">Website Visitors</h2>\r\n-        <div className=\"flex gap-2\">\r\n-          <button onClick={() => setInterval('day')} className={`px-3 py-1 text-sm rounded ${interval === 'day' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n-            Daily\r\n-          </button>\r\n-          <button onClick={() => setInterval('week')} className={`px-3 py-1 text-sm rounded ${interval === 'week' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n-            Weekly\r\n-          </button>\r\n-          <button onClick={() => setInterval('month')} className={`px-3 py-1 text-sm rounded ${interval === 'month' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n-            Monthly\r\n-          </button>\r\n-        </div>\r\n-      </div>\r\n-      {loading && <p className=\"text-gray-500\">Loading analytics...</p>}\r\n-      {error && <p className=\"text-red-500\">Error: {error}</p>}\r\n-      {!loading && !error && (\r\n-        <div>\r\n-          <div className=\"text-2xl font-bold text-gray-700\">{total.toLocaleString()}</div>\r\n-          <p className=\"text-sm text-gray-600\">{intervalLabel}; Total: 30 days</p>\r\n-          <div className=\"w-full mt-4 bg-white rounded-lg p-2\" style={{ height: '280px' }}>\r\n-            <Line data={data} options={options} />\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\r\n-import { useEffect, useState } from 'react';\r\n-import { Line } from 'react-chartjs-2';\r\n-import { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\r\n-Chart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\r\n-\r\n-function groupByWeek(daily) {\r\n-  // Group daily data into weeks\r\n-  const weekMap = {};\r\n-  daily.forEach(d => {\r\n-    if (!d.date) return;\r\n-    const dt = new Date(d.date.slice(0,4), Number(d.date.slice(4,6))-1, Number(d.date.slice(6,8)));\r\n-    const year = dt.getFullYear();\r\n-    const onejan = new Date(year, 0, 1);\r\n-    const week = Math.ceil((((dt - onejan) / 86400000) + onejan.getDay()+1)/7);\r\n-    const key = `${year}-W${week}`;\r\n-    weekMap[key] = (weekMap[key] || 0) + d.users;\r\n-  });\r\n-  return weekMap;\r\n-}\r\n-\r\n-function groupByMonth(daily) {\r\n-  const monthMap = {};\r\n-  daily.forEach(d => {\r\n-    if (!d.date) return;\r\n-    const key = d.date.slice(0,6); // YYYYMM\r\n-    monthMap[key] = (monthMap[key] || 0) + d.users;\r\n-  });\r\n-  return monthMap;\r\n-}\r\n-\r\n-export default function VisitorsCard() {\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState('');\r\n-  const [total, setTotal] = useState(0);\r\n-  const [rawSeries, setRawSeries] = useState([]);\r\n-  const [interval, setInterval] = useState('week'); // 'day' | 'week' | 'month'\r\n-\r\n-  useEffect(() => {\r\n-    let mounted = true;\r\n-    (async () => {\r\n-      try {\r\n-        const resp = await fetch('/api/analytics-visitors');\r\n-        const data = await resp.json();\r\n-        if (!mounted) return;\r\n-        if (resp.ok && data.success) {\r\n-          setTotal(data.totalUsers || 0);\r\n-          setRawSeries(data.daily || []);\r\n-        } else {\r\n-          setError(data.error || 'Failed to fetch');\r\n-        }\r\n-      } catch (e) {\r\n-        if (mounted) setError(e.message || 'Failed to fetch');\r\n-      } finally {\r\n-        if (mounted) setLoading(false);\r\n-      }\r\n-    })();\r\n-    return () => { mounted = false; };\r\n-  }, []);\r\n-\r\n-  let labels = [], values = [];\r\n-  const months = ['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'];\r\n-\r\n-  if (interval === 'day') {\r\n-    labels = rawSeries.map(p => `${p.date?.slice(6,8)}${months[Number(p.date?.slice(4,6))-1]}`);\r\n-    values = rawSeries.map(p => p.users);\r\n-  } else if (interval === 'week') {\r\n-    const weekMap = groupByWeek(rawSeries);\r\n-    const rawWeeks = Object.keys(weekMap).sort();\r\n-    labels = rawWeeks.map(wstr => {\r\n-      const [year, w] = wstr.split('-W');\r\n-      if (year && w) {\r\n-        const weekNum = parseInt(w, 10);\r\n-        const jan1 = new Date(Number(year), 0, 1);\r\n-        const start = new Date(jan1.getTime() + (weekNum - 1) * 7 * 86400000);\r\n-        const dayOfWeek = start.getDay();\r\n-        const weekStart = new Date(start);\r\n-        weekStart.setDate(start.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));\r\n-        const weekEnd = new Date(weekStart);\r\n-        weekEnd.setDate(weekStart.getDate() + 6);\r\n-        const mAbbr = months[weekStart.getMonth()];\r\n-        return `${mAbbr} (${weekStart.getDate()}-${weekEnd.getDate()})`;\r\n-      }\r\n-      return wstr;\r\n-    });\r\n-    values = rawWeeks.map(w => weekMap[w]);\r\n-  } else if (interval === 'month') {\r\n-    const monthMap = groupByMonth(rawSeries);\r\n-    const rawMonths = Object.keys(monthMap).sort();\r\n-    labels = rawMonths.map(mstr => {\r\n-      if (mstr.length === 6) {\r\n-        const y = mstr.slice(0,4);\r\n-        const m = months[Number(mstr.slice(4,6))-1];\r\n-        return `${m} ${y}`;\r\n-      }\r\n-      return mstr;\r\n-    });\r\n-    values = rawMonths.map(m => monthMap[m]);\r\n-  }\r\n-\r\n-  const data = {\r\n-    labels,\r\n-    datasets: [{\r\n-      label: 'Visitors',\r\n-      data: values,\r\n-      borderColor: '#4b5563',\r\n-      backgroundColor: 'rgba(75, 85, 99, 0.1)',\r\n-      pointBackgroundColor: '#4b5563',\r\n-      fill: true,\r\n-      tension: 0.3,\r\n-    }]\r\n-  };\r\n-\r\n-  const options = {\r\n-    responsive: true,\r\n-    maintainAspectRatio: false,\r\n-    plugins: { \r\n-      legend: { display: false },\r\n-      tooltip: {\r\n-        callbacks: {\r\n-          label: ctx => `${ctx.parsed.y} visitors`,\r\n-        }\r\n-      }\r\n-    },\r\n-    scales: {\r\n-      x: { grid: { display: false } },\r\n-      y: { beginAtZero: true, grid: { color: 'rgba(0,0,0,0.05)' } }\r\n-    }\r\n-  };\r\n-\r\n-  let intervalLabel = 'Last 14 days (daily view)';\r\n-  if (interval === 'week') intervalLabel = `Last ${labels.length} weeks (weekly view)`;\r\n-  if (interval === 'month') intervalLabel = `Last ${labels.length} months (monthly view)`;\r\n-\r\n-  return (\r\n-    <div className=\"bg-white shadow-md rounded-lg p-6\">\r\n-      <div className=\"flex justify-between items-center mb-4\">\r\n-        <h2 className=\"text-xl font-semibold text-gray-700\">Website Visitors</h2>\r\n-        <div className=\"flex gap-2\">\r\n-          <button onClick={() => setInterval('day')} className={`px-3 py-1 text-sm rounded ${interval === 'day' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n-            Daily\r\n-          </button>\r\n-          <button onClick={() => setInterval('week')} className={`px-3 py-1 text-sm rounded ${interval === 'week' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n-            Weekly\r\n-          </button>\r\n-          <button onClick={() => setInterval('month')} className={`px-3 py-1 text-sm rounded ${interval === 'month' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n-            Monthly\r\n-          </button>\r\n-        </div>\r\n-      </div>\r\n-      {loading && <p className=\"text-gray-500\">Loading analytics...</p>}\r\n-      {error && <p className=\"text-red-500\">Error: {error}</p>}\r\n-      {!loading && !error && (\r\n-        <div>\r\n-          <div className=\"text-2xl font-bold text-gray-700\">{total.toLocaleString()}</div>\r\n-          <p className=\"text-sm text-gray-600\">{intervalLabel}; Total: 30 days</p>\r\n-          <div className=\"w-full mt-4 bg-white rounded-lg p-2\" style={{ height: '280px' }}>\r\n-            <Line data={data} options={options} />\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1760845224035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+import { useEffect, useState } from 'react';\r\n+import { Line } from 'react-chartjs-2';\r\n+import { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\r\n+Chart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\r\n+\r\n+function groupByWeek(daily) {\r\n+  // Group daily data into weeks\r\n+  const weekMap = {};\r\n+  daily.forEach(d => {\r\n+    if (!d.date) return;\r\n+    const dt = new Date(d.date.slice(0,4), Number(d.date.slice(4,6))-1, Number(d.date.slice(6,8)));\r\n+    const year = dt.getFullYear();\r\n+    const onejan = new Date(year, 0, 1);\r\n+    const week = Math.ceil((((dt - onejan) / 86400000) + onejan.getDay()+1)/7);\r\n+    const key = `${year}-W${week}`;\r\n+    weekMap[key] = (weekMap[key] || 0) + d.users;\r\n+  });\r\n+  return weekMap;\r\n+}\r\n+\r\n+function groupByMonth(daily) {\r\n+  const monthMap = {};\r\n+  daily.forEach(d => {\r\n+    if (!d.date) return;\r\n+    const key = d.date.slice(0,6); // YYYYMM\r\n+    monthMap[key] = (monthMap[key] || 0) + d.users;\r\n+  });\r\n+  return monthMap;\r\n+}\r\n+\r\n+export default function VisitorsCard() {\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState('');\r\n+  const [total, setTotal] = useState(0);\r\n+  const [rawSeries, setRawSeries] = useState([]);\r\n+  const [mode, setMode] = useState('live'); // 'live' | 'trend' | 'top'\r\n+  const [excludeMe, setExcludeMe] = useState(true);\r\n+  const [live, setLive] = useState({ active: 0, pages: [] });\r\n+\r\n+  // Fetch trend data once\r\n+  useEffect(() => {\r\n+    let mounted = true;\r\n+    (async () => {\r\n+      try {\r\n+        const resp = await fetch('/api/analytics-visitors');\r\n+        const data = await resp.json();\r\n+        if (!mounted) return;\r\n+        if (resp.ok && data.success) {\r\n+          setTotal(data.totalUsers || 0);\r\n+          setRawSeries(data.daily || []);\r\n+        } else {\r\n+          setError(data.error || 'Failed to fetch');\r\n+        }\r\n+      } catch (e) {\r\n+        if (mounted) setError(e.message || 'Failed to fetch');\r\n+      } finally {\r\n+        if (mounted) setLoading(false);\r\n+      }\r\n+    })();\r\n+    return () => { mounted = false; };\r\n+  }, []);\r\n+\r\n+  // Poll realtime when in live/top\r\n+  useEffect(() => {\r\n+    let mounted = true;\r\n+    let timer;\r\n+    async function loadRealtime() {\r\n+      try {\r\n+        const url = new URL('/api/analytics-realtime', window.location.origin);\r\n+        url.searchParams.set('excludeMe', excludeMe ? '1' : '0');\r\n+        if (mode === 'top') url.searchParams.set('topPages', '1');\r\n+        const resp = await fetch(url.toString());\r\n+        const data = await resp.json();\r\n+        if (!mounted) return;\r\n+        if (resp.ok && data.success) {\r\n+          setLive({ active: data.totalActive || 0, pages: data.pages || [] });\r\n+        } else {\r\n+          setError(data.error || 'Failed to fetch realtime');\r\n+        }\r\n+      } catch (e) {\r\n+        if (mounted) setError(e.message || 'Failed to fetch realtime');\r\n+      }\r\n+    }\r\n+    if (mode === 'live' || mode === 'top') {\r\n+      loadRealtime();\r\n+      timer = setInterval(loadRealtime, 10000); // 10s\r\n+    }\r\n+    return () => { mounted = false; if (timer) clearInterval(timer); };\r\n+  }, [mode, excludeMe]);\r\n+\r\n+  let labels = [], values = [];\r\n+  const months = ['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'];\r\n+\r\n+  const interval = 'day';\r\n+  if (mode === 'trend') {\r\n+    // daily trend view\r\n+    labels = rawSeries.map(p => `${p.date?.slice(6,8)}${months[Number(p.date?.slice(4,6))-1]}`);\r\n+    values = rawSeries.map(p => p.users);\r\n+  }\r\n+\r\n+  const data = {\r\n+    labels,\r\n+    datasets: [{\r\n+      label: mode === 'trend' ? 'Visitors' : 'Live',\r\n+      data: mode === 'trend' ? values : [],\r\n+      borderColor: '#4b5563',\r\n+      backgroundColor: 'rgba(75, 85, 99, 0.1)',\r\n+      pointBackgroundColor: '#4b5563',\r\n+      fill: true,\r\n+      tension: 0.3,\r\n+    }]\r\n+  };\r\n+\r\n+  const options = {\r\n+    responsive: true,\r\n+    maintainAspectRatio: false,\r\n+    plugins: { \r\n+      legend: { display: false },\r\n+      tooltip: {\r\n+        callbacks: {\r\n+          label: ctx => `${ctx.parsed.y} visitors`,\r\n+        }\r\n+      }\r\n+    },\r\n+    scales: {\r\n+      x: { grid: { display: false } },\r\n+      y: { beginAtZero: true, grid: { color: 'rgba(0,0,0,0.05)' } }\r\n+    }\r\n+  };\r\n+\r\n+  let subtitle = '';\r\n+  if (mode === 'trend') subtitle = 'Last 14 days trend';\r\n+  if (mode === 'live') subtitle = 'Realtime active users';\r\n+  if (mode === 'top') subtitle = 'Realtime top pages';\r\n+\r\n+  return (\r\n+    <div className=\"bg-white shadow-md rounded-lg p-6\">\r\n+      <div className=\"flex justify-between items-center mb-4\">\r\n+        <h2 className=\"text-xl font-semibold\" style={{ color: '#2563eb' }}>Website Visitors</h2>\r\n+        <div className=\"flex gap-2 items-center\">\r\n+          <button onClick={() => setMode('live')} className={`px-3 py-1 text-sm rounded ${mode === 'live' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n+            Live\r\n+          </button>\r\n+          <button onClick={() => setMode('trend')} className={`px-3 py-1 text-sm rounded ${mode === 'trend' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n+            Trend\r\n+          </button>\r\n+          <button onClick={() => setMode('top')} className={`px-3 py-1 text-sm rounded ${mode === 'top' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n+            Top Pages\r\n+          </button>\r\n+          {mode !== 'trend' && (\r\n+            <label className=\"ml-2 text-xs text-gray-600 flex items-center gap-1 select-none\">\r\n+              <input type=\"checkbox\" checked={excludeMe} onChange={e => setExcludeMe(e.target.checked)} /> Exclude me\r\n+            </label>\r\n+          )}\r\n+        </div>\r\n+      </div>\r\n+      {loading && <p className=\"text-gray-500\">Loading analytics...</p>}\r\n+      {error && <p className=\"text-red-500\">Error: {error}</p>}\r\n+      {!loading && !error && (\r\n+        <div>\r\n+          {mode === 'trend' ? (\r\n+            <>\r\n+              <div className=\"text-2xl font-bold text-gray-700\">{total.toLocaleString()}</div>\r\n+              <p className=\"text-sm text-gray-600\">{subtitle}; Total: 30 days</p>\r\n+              <div className=\"w-full mt-4 bg-white rounded-lg p-2\" style={{ height: '280px' }}>\r\n+                <Line data={data} options={options} />\r\n+              </div>\r\n+            </>\r\n+          ) : (\r\n+            <>\r\n+              <div className=\"text-2xl font-bold text-gray-700\">{live.active}</div>\r\n+              <p className=\"text-sm text-gray-600\">{subtitle}</p>\r\n+              {mode === 'top' && (\r\n+                <div className=\"mt-3 text-sm text-gray-700 max-h-40 overflow-auto border rounded p-2 bg-gray-50\">\r\n+                  {live.pages.length === 0 ? (\r\n+                    <div className=\"text-gray-500\">No active pages</div>\r\n+                  ) : (\r\n+                    <ul className=\"space-y-1\">\r\n+                      {live.pages.map((p, idx) => (\r\n+                        <li key={idx} className=\"flex justify-between\">\r\n+                          <span className=\"truncate max-w-[80%]\" title={p.path}>{p.path}</span>\r\n+                          <span className=\"font-medium\">{p.active}</span>\r\n+                        </li>\r\n+                      ))}\r\n+                    </ul>\r\n+                  )}\r\n+                </div>\r\n+              )}\r\n+            </>\r\n+          )}\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1760845603588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,11 +32,11 @@\n   const [loading, setLoading] = useState(true);\r\n   const [error, setError] = useState('');\r\n   const [total, setTotal] = useState(0);\r\n   const [rawSeries, setRawSeries] = useState([]);\r\n-  const [mode, setMode] = useState('live'); // 'live' | 'trend' | 'top'\r\n+  const [mode, setMode] = useState('live'); // 'live' | 'trend'\r\n   const [excludeMe, setExcludeMe] = useState(true);\r\n-  const [live, setLive] = useState({ active: 0, pages: [] });\r\n+  const [live, setLive] = useState({ active: 0 });\r\n \r\n   // Fetch trend data once\r\n   useEffect(() => {\r\n     let mounted = true;\r\n@@ -59,30 +59,29 @@\n     })();\r\n     return () => { mounted = false; };\r\n   }, []);\r\n \r\n-  // Poll realtime when in live/top\r\n+  // Poll realtime when in live\r\n   useEffect(() => {\r\n     let mounted = true;\r\n     let timer;\r\n     async function loadRealtime() {\r\n       try {\r\n         const url = new URL('/api/analytics-realtime', window.location.origin);\r\n         url.searchParams.set('excludeMe', excludeMe ? '1' : '0');\r\n-        if (mode === 'top') url.searchParams.set('topPages', '1');\r\n         const resp = await fetch(url.toString());\r\n         const data = await resp.json();\r\n         if (!mounted) return;\r\n         if (resp.ok && data.success) {\r\n-          setLive({ active: data.totalActive || 0, pages: data.pages || [] });\r\n+          setLive({ active: data.totalActive || 0 });\r\n         } else {\r\n           setError(data.error || 'Failed to fetch realtime');\r\n         }\r\n       } catch (e) {\r\n         if (mounted) setError(e.message || 'Failed to fetch realtime');\r\n       }\r\n     }\r\n-    if (mode === 'live' || mode === 'top') {\r\n+    if (mode === 'live') {\r\n       loadRealtime();\r\n       timer = setInterval(loadRealtime, 10000); // 10s\r\n     }\r\n     return () => { mounted = false; if (timer) clearInterval(timer); };\r\n@@ -130,9 +129,8 @@\n \r\n   let subtitle = '';\r\n   if (mode === 'trend') subtitle = 'Last 14 days trend';\r\n   if (mode === 'live') subtitle = 'Realtime active users';\r\n-  if (mode === 'top') subtitle = 'Realtime top pages';\r\n \r\n   return (\r\n     <div className=\"bg-white shadow-md rounded-lg p-6\">\r\n       <div className=\"flex justify-between items-center mb-4\">\r\n@@ -143,11 +141,8 @@\n           </button>\r\n           <button onClick={() => setMode('trend')} className={`px-3 py-1 text-sm rounded ${mode === 'trend' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n             Trend\r\n           </button>\r\n-          <button onClick={() => setMode('top')} className={`px-3 py-1 text-sm rounded ${mode === 'top' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n-            Top Pages\r\n-          </button>\r\n           {mode !== 'trend' && (\r\n             <label className=\"ml-2 text-xs text-gray-600 flex items-center gap-1 select-none\">\r\n               <input type=\"checkbox\" checked={excludeMe} onChange={e => setExcludeMe(e.target.checked)} /> Exclude me\r\n             </label>\r\n@@ -169,190 +164,11 @@\n           ) : (\r\n             <>\r\n               <div className=\"text-2xl font-bold text-gray-700\">{live.active}</div>\r\n               <p className=\"text-sm text-gray-600\">{subtitle}</p>\r\n-              {mode === 'top' && (\r\n-                <div className=\"mt-3 text-sm text-gray-700 max-h-40 overflow-auto border rounded p-2 bg-gray-50\">\r\n-                  {live.pages.length === 0 ? (\r\n-                    <div className=\"text-gray-500\">No active pages</div>\r\n-                  ) : (\r\n-                    <ul className=\"space-y-1\">\r\n-                      {live.pages.map((p, idx) => (\r\n-                        <li key={idx} className=\"flex justify-between\">\r\n-                          <span className=\"truncate max-w-[80%]\" title={p.path}>{p.path}</span>\r\n-                          <span className=\"font-medium\">{p.active}</span>\r\n-                        </li>\r\n-                      ))}\r\n-                    </ul>\r\n-                  )}\r\n-                </div>\r\n-              )}\r\n             </>\r\n           )}\r\n         </div>\r\n       )}\r\n     </div>\r\n   );\r\n }\r\n-import { useEffect, useState } from 'react';\r\n-import { Line } from 'react-chartjs-2';\r\n-import { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\r\n-Chart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\r\n-\r\n-function groupByWeek(daily) {\r\n-  // Group daily data into weeks\r\n-  const weekMap = {};\r\n-  daily.forEach(d => {\r\n-    if (!d.date) return;\r\n-    const dt = new Date(d.date.slice(0,4), Number(d.date.slice(4,6))-1, Number(d.date.slice(6,8)));\r\n-    const year = dt.getFullYear();\r\n-    const onejan = new Date(year, 0, 1);\r\n-    const week = Math.ceil((((dt - onejan) / 86400000) + onejan.getDay()+1)/7);\r\n-    const key = `${year}-W${week}`;\r\n-    weekMap[key] = (weekMap[key] || 0) + d.users;\r\n-  });\r\n-  return weekMap;\r\n-}\r\n-\r\n-function groupByMonth(daily) {\r\n-  const monthMap = {};\r\n-  daily.forEach(d => {\r\n-    if (!d.date) return;\r\n-    const key = d.date.slice(0,6); // YYYYMM\r\n-    monthMap[key] = (monthMap[key] || 0) + d.users;\r\n-  });\r\n-  return monthMap;\r\n-}\r\n-\r\n-export default function VisitorsCard() {\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState('');\r\n-  const [total, setTotal] = useState(0);\r\n-  const [rawSeries, setRawSeries] = useState([]);\r\n-  const [interval, setInterval] = useState('week'); // 'day' | 'week' | 'month'\r\n-\r\n-  useEffect(() => {\r\n-    let mounted = true;\r\n-    (async () => {\r\n-      try {\r\n-        const resp = await fetch('/api/analytics-visitors');\r\n-        const data = await resp.json();\r\n-        if (!mounted) return;\r\n-        if (resp.ok && data.success) {\r\n-          setTotal(data.totalUsers || 0);\r\n-          setRawSeries(data.daily || []);\r\n-        } else {\r\n-          setError(data.error || 'Failed to fetch');\r\n-        }\r\n-      } catch (e) {\r\n-        if (mounted) setError(e.message || 'Failed to fetch');\r\n-      } finally {\r\n-        if (mounted) setLoading(false);\r\n-      }\r\n-    })();\r\n-    return () => { mounted = false; };\r\n-  }, []);\r\n-\r\n-  let labels = [], values = [];\r\n-  const months = ['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'];\r\n-\r\n-  if (interval === 'day') {\r\n-    labels = rawSeries.map(p => `${p.date?.slice(6,8)}${months[Number(p.date?.slice(4,6))-1]}`);\r\n-    values = rawSeries.map(p => p.users);\r\n-  } else if (interval === 'week') {\r\n-    const weekMap = groupByWeek(rawSeries);\r\n-    const rawWeeks = Object.keys(weekMap).sort();\r\n-    labels = rawWeeks.map(wstr => {\r\n-      const [year, w] = wstr.split('-W');\r\n-      if (year && w) {\r\n-        const weekNum = parseInt(w, 10);\r\n-        const jan1 = new Date(Number(year), 0, 1);\r\n-        const start = new Date(jan1.getTime() + (weekNum - 1) * 7 * 86400000);\r\n-        const dayOfWeek = start.getDay();\r\n-        const weekStart = new Date(start);\r\n-        weekStart.setDate(start.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));\r\n-        const weekEnd = new Date(weekStart);\r\n-        weekEnd.setDate(weekStart.getDate() + 6);\r\n-        const mAbbr = months[weekStart.getMonth()];\r\n-        return `${mAbbr} (${weekStart.getDate()}-${weekEnd.getDate()})`;\r\n-      }\r\n-      return wstr;\r\n-    });\r\n-    values = rawWeeks.map(w => weekMap[w]);\r\n-  } else if (interval === 'month') {\r\n-    const monthMap = groupByMonth(rawSeries);\r\n-    const rawMonths = Object.keys(monthMap).sort();\r\n-    labels = rawMonths.map(mstr => {\r\n-      if (mstr.length === 6) {\r\n-        const y = mstr.slice(0,4);\r\n-        const m = months[Number(mstr.slice(4,6))-1];\r\n-        return `${m} ${y}`;\r\n-      }\r\n-      return mstr;\r\n-    });\r\n-    values = rawMonths.map(m => monthMap[m]);\r\n-  }\r\n-\r\n-  const data = {\r\n-    labels,\r\n-    datasets: [{\r\n-      label: 'Visitors',\r\n-      data: values,\r\n-      borderColor: '#4b5563',\r\n-      backgroundColor: 'rgba(75, 85, 99, 0.1)',\r\n-      pointBackgroundColor: '#4b5563',\r\n-      fill: true,\r\n-      tension: 0.3,\r\n-    }]\r\n-  };\r\n-\r\n-  const options = {\r\n-    responsive: true,\r\n-    maintainAspectRatio: false,\r\n-    plugins: { \r\n-      legend: { display: false },\r\n-      tooltip: {\r\n-        callbacks: {\r\n-          label: ctx => `${ctx.parsed.y} visitors`,\r\n-        }\r\n-      }\r\n-    },\r\n-    scales: {\r\n-      x: { grid: { display: false } },\r\n-      y: { beginAtZero: true, grid: { color: 'rgba(0,0,0,0.05)' } }\r\n-    }\r\n-  };\r\n-\r\n-  let intervalLabel = 'Last 14 days (daily view)';\r\n-  if (interval === 'week') intervalLabel = `Last ${labels.length} weeks (weekly view)`;\r\n-  if (interval === 'month') intervalLabel = `Last ${labels.length} months (monthly view)`;\r\n-\r\n-  return (\r\n-    <div className=\"bg-white shadow-md rounded-lg p-6\">\r\n-      <div className=\"flex justify-between items-center mb-4\">\r\n-        <h2 className=\"text-xl font-semibold\" style={{ color: '#2563eb' }}>Website Visitors</h2>\r\n-        <div className=\"flex gap-2\">\r\n-          <button onClick={() => setInterval('day')} className={`px-3 py-1 text-sm rounded ${interval === 'day' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n-            Daily\r\n-          </button>\r\n-          <button onClick={() => setInterval('week')} className={`px-3 py-1 text-sm rounded ${interval === 'week' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n-            Weekly\r\n-          </button>\r\n-          <button onClick={() => setInterval('month')} className={`px-3 py-1 text-sm rounded ${interval === 'month' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n-            Monthly\r\n-          </button>\r\n-        </div>\r\n-      </div>\r\n-      {loading && <p className=\"text-gray-500\">Loading analytics...</p>}\r\n-      {error && <p className=\"text-red-500\">Error: {error}</p>}\r\n-      {!loading && !error && (\r\n-        <div>\r\n-          <div className=\"text-2xl font-bold text-gray-700\">{total.toLocaleString()}</div>\r\n-          <p className=\"text-sm text-gray-600\">{intervalLabel}; Total: 30 days</p>\r\n-          <div className=\"w-full mt-4 bg-white rounded-lg p-2\" style={{ height: '280px' }}>\r\n-            <Line data={data} options={options} />\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1760847182131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,10 +32,10 @@\n   const [loading, setLoading] = useState(true);\r\n   const [error, setError] = useState('');\r\n   const [total, setTotal] = useState(0);\r\n   const [rawSeries, setRawSeries] = useState([]);\r\n-  const [mode, setMode] = useState('live'); // 'live' | 'trend'\r\n-  const [excludeMe, setExcludeMe] = useState(true);\r\n+  const [mode, setMode] = useState('trend'); // 'live' | 'trend'\r\n+  const excludeMe = true;\r\n   const [live, setLive] = useState({ active: 0 });\r\n \r\n   // Fetch trend data once\r\n   useEffect(() => {\r\n@@ -141,13 +141,8 @@\n           </button>\r\n           <button onClick={() => setMode('trend')} className={`px-3 py-1 text-sm rounded ${mode === 'trend' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n             Trend\r\n           </button>\r\n-          {mode !== 'trend' && (\r\n-            <label className=\"ml-2 text-xs text-gray-600 flex items-center gap-1 select-none\">\r\n-              <input type=\"checkbox\" checked={excludeMe} onChange={e => setExcludeMe(e.target.checked)} /> Exclude me\r\n-            </label>\r\n-          )}\r\n         </div>\r\n       </div>\r\n       {loading && <p className=\"text-gray-500\">Loading analytics...</p>}\r\n       {error && <p className=\"text-red-500\">Error: {error}</p>}\r\n"
                },
                {
                    "date": 1761275787617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import { useEffect, useState } from 'react';\r\n import { Line } from 'react-chartjs-2';\r\n import { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\r\n+import EyeToggle from './EyeToggle';\r\n Chart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\r\n \r\n function groupByWeek(daily) {\r\n   // Group daily data into weeks\r\n@@ -33,8 +34,9 @@\n   const [error, setError] = useState('');\r\n   const [total, setTotal] = useState(0);\r\n   const [rawSeries, setRawSeries] = useState([]);\r\n   const [mode, setMode] = useState('trend'); // 'live' | 'trend'\r\n+  const [showChart, setShowChart] = useState(true);\r\n   const excludeMe = true;\r\n   const [live, setLive] = useState({ active: 0 });\r\n \r\n   // Fetch trend data once\r\n@@ -132,17 +134,24 @@\n   if (mode === 'live') subtitle = 'Realtime active users';\r\n \r\n   return (\r\n     <div className=\"bg-white shadow-md rounded-lg p-6\">\r\n-      <div className=\"flex justify-between items-center mb-4\">\r\n-        <h2 className=\"text-xl font-semibold\" style={{ color: '#2563eb' }}>Website Visitors</h2>\r\n+      <div className=\"flex justify-between items-start mb-4\">\r\n+        <div>\r\n+          <h2 className=\"text-xl font-semibold\" style={{ color: '#2563eb' }}>Website Visitors</h2>\r\n+        </div>\r\n         <div className=\"flex gap-2 items-center\">\r\n           <button onClick={() => setMode('live')} className={`px-3 py-1 text-sm rounded ${mode === 'live' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n             Live\r\n           </button>\r\n           <button onClick={() => setMode('trend')} className={`px-3 py-1 text-sm rounded ${mode === 'trend' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n             Trend\r\n           </button>\r\n+          <EyeToggle\r\n+            open={showChart}\r\n+            onToggle={() => setShowChart(prev => !prev)}\r\n+            label=\"visitors chart\"\r\n+          />\r\n         </div>\r\n       </div>\r\n       {loading && <p className=\"text-gray-500\">Loading analytics...</p>}\r\n       {error && <p className=\"text-red-500\">Error: {error}</p>}\r\n@@ -151,10 +160,20 @@\n           {mode === 'trend' ? (\r\n             <>\r\n               <div className=\"text-2xl font-bold text-gray-700\">{total.toLocaleString()}</div>\r\n               <p className=\"text-sm text-gray-600\">{subtitle}; Total: 30 days</p>\r\n-              <div className=\"w-full mt-4 bg-white rounded-lg p-2\" style={{ height: '280px' }}>\r\n-                <Line data={data} options={options} />\r\n+              <div\r\n+                style={{\r\n+                  width: '100%',\r\n+                  overflow: 'hidden',\r\n+                  transition: 'max-height 0.35s ease, margin-top 0.2s ease',\r\n+                  maxHeight: showChart ? '320px' : '0px',\r\n+                  marginTop: showChart ? '16px' : '0px',\r\n+                }}\r\n+              >\r\n+                <div className=\"w-full bg-white rounded-lg p-2\" style={{ height: '280px' }}>\r\n+                  <Line data={data} options={options} />\r\n+                </div>\r\n               </div>\r\n             </>\r\n           ) : (\r\n             <>\r\n"
                },
                {
                    "date": 1761276851229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,187 @@\n+import { useEffect, useState } from 'react';\r\n+import { Line } from 'react-chartjs-2';\r\n+import { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\r\n+import EyeToggle from './EyeToggle';\r\n+Chart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\r\n+\r\n+function groupByWeek(daily) {\r\n+  // Group daily data into weeks\r\n+  const weekMap = {};\r\n+  daily.forEach(d => {\r\n+    if (!d.date) return;\r\n+    const dt = new Date(d.date.slice(0,4), Number(d.date.slice(4,6))-1, Number(d.date.slice(6,8)));\r\n+    const year = dt.getFullYear();\r\n+    const onejan = new Date(year, 0, 1);\r\n+    const week = Math.ceil((((dt - onejan) / 86400000) + onejan.getDay()+1)/7);\r\n+    const key = `${year}-W${week}`;\r\n+    weekMap[key] = (weekMap[key] || 0) + d.users;\r\n+  });\r\n+  return weekMap;\r\n+}\r\n+\r\n+function groupByMonth(daily) {\r\n+  const monthMap = {};\r\n+  daily.forEach(d => {\r\n+    if (!d.date) return;\r\n+    const key = d.date.slice(0,6); // YYYYMM\r\n+    monthMap[key] = (monthMap[key] || 0) + d.users;\r\n+  });\r\n+  return monthMap;\r\n+}\r\n+\r\n+export default function VisitorsCard() {\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState('');\r\n+  const [total, setTotal] = useState(0);\r\n+  const [rawSeries, setRawSeries] = useState([]);\r\n+  const [mode, setMode] = useState('trend'); // 'live' | 'trend'\r\n+  const [showChart, setShowChart] = useState(true);\r\n+  const excludeMe = true;\r\n+  const [live, setLive] = useState({ active: 0 });\r\n+\r\n+  // Fetch trend data once\r\n+  useEffect(() => {\r\n+    let mounted = true;\r\n+    (async () => {\r\n+      try {\r\n+        const resp = await fetch('/api/analytics-visitors');\r\n+        const data = await resp.json();\r\n+        if (!mounted) return;\r\n+        if (resp.ok && data.success) {\r\n+          setTotal(data.totalUsers || 0);\r\n+          setRawSeries(data.daily || []);\r\n+        } else {\r\n+          setError(data.error || 'Failed to fetch');\r\n+        }\r\n+      } catch (e) {\r\n+        if (mounted) setError(e.message || 'Failed to fetch');\r\n+      } finally {\r\n+        if (mounted) setLoading(false);\r\n+      }\r\n+    })();\r\n+    return () => { mounted = false; };\r\n+  }, []);\r\n+\r\n+  // Poll realtime when in live\r\n+  useEffect(() => {\r\n+    let mounted = true;\r\n+    let timer;\r\n+    async function loadRealtime() {\r\n+      try {\r\n+        const url = new URL('/api/analytics-realtime', window.location.origin);\r\n+        url.searchParams.set('excludeMe', excludeMe ? '1' : '0');\r\n+        const resp = await fetch(url.toString());\r\n+        const data = await resp.json();\r\n+        if (!mounted) return;\r\n+        if (resp.ok && data.success) {\r\n+          setLive({ active: data.totalActive || 0 });\r\n+        } else {\r\n+          setError(data.error || 'Failed to fetch realtime');\r\n+        }\r\n+      } catch (e) {\r\n+        if (mounted) setError(e.message || 'Failed to fetch realtime');\r\n+      }\r\n+    }\r\n+    if (mode === 'live') {\r\n+      loadRealtime();\r\n+      timer = setInterval(loadRealtime, 10000); // 10s\r\n+    }\r\n+    return () => { mounted = false; if (timer) clearInterval(timer); };\r\n+  }, [mode, excludeMe]);\r\n+\r\n+  let labels = [], values = [];\r\n+  const months = ['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'];\r\n+\r\n+  const interval = 'day';\r\n+  if (mode === 'trend') {\r\n+    // daily trend view\r\n+    labels = rawSeries.map(p => `${p.date?.slice(6,8)}${months[Number(p.date?.slice(4,6))-1]}`);\r\n+    values = rawSeries.map(p => p.users);\r\n+  }\r\n+\r\n+  const data = {\r\n+    labels,\r\n+    datasets: [{\r\n+      label: mode === 'trend' ? 'Visitors' : 'Live',\r\n+      data: mode === 'trend' ? values : [],\r\n+      borderColor: '#4b5563',\r\n+      backgroundColor: 'rgba(75, 85, 99, 0.1)',\r\n+      pointBackgroundColor: '#4b5563',\r\n+      fill: true,\r\n+      tension: 0.3,\r\n+    }]\r\n+  };\r\n+\r\n+  const options = {\r\n+    responsive: true,\r\n+    maintainAspectRatio: false,\r\n+    plugins: { \r\n+      legend: { display: false },\r\n+      tooltip: {\r\n+        callbacks: {\r\n+          label: ctx => `${ctx.parsed.y} visitors`,\r\n+        }\r\n+      }\r\n+    },\r\n+    scales: {\r\n+      x: { grid: { display: false } },\r\n+      y: { beginAtZero: true, grid: { color: 'rgba(0,0,0,0.05)' } }\r\n+    }\r\n+  };\r\n+\r\n+  let subtitle = '';\r\n+  if (mode === 'trend') subtitle = 'Last 14 days trend';\r\n+  if (mode === 'live') subtitle = 'Realtime active users';\r\n+\r\n+  return (\r\n+    <div className=\"bg-white shadow-md rounded-lg p-6\">\r\n+      <div className=\"flex justify-between items-start mb-4\">\r\n+        <div>\r\n+          <h2 className=\"text-xl font-semibold\" style={{ color: '#2563eb' }}>Visitors</h2>\r\n+        </div>\r\n+        <div className=\"flex gap-2 items-center\">\r\n+          <button onClick={() => setMode('trend')} className={`px-3 py-1 text-sm rounded ${mode === 'trend' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n+            Trend\r\n+          </button>\r\n+          <button onClick={() => setMode('live')} className={`px-3 py-1 text-sm rounded ${mode === 'live' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n+            Live\r\n+          </button>\r\n+          <EyeToggle\r\n+            open={showChart}\r\n+            onToggle={() => setShowChart(prev => !prev)}\r\n+            label=\"visitors chart\"\r\n+          />\r\n+        </div>\r\n+      </div>\r\n+      {loading && <p className=\"text-gray-500\">Loading analytics...</p>}\r\n+      {error && <p className=\"text-red-500\">Error: {error}</p>}\r\n+      {!loading && !error && (\r\n+        <div>\r\n+          {mode === 'trend' ? (\r\n+            <>\r\n+              <div className=\"text-2xl font-bold text-gray-700\">{total.toLocaleString()}</div>\r\n+              <div\r\n+                style={{\r\n+                  width: '100%',\r\n+                  overflow: 'hidden',\r\n+                  transition: 'max-height 0.35s ease, margin-top 0.2s ease',\r\n+                  maxHeight: showChart ? '320px' : '0px',\r\n+                  marginTop: showChart ? '16px' : '0px',\r\n+                }}\r\n+              >\r\n+                <div className=\"w-full bg-white rounded-lg p-2\" style={{ height: '280px' }}>\r\n+                  <Line data={data} options={options} />\r\n+                </div>\r\n+              </div>\r\n+            </>\r\n+          ) : (\r\n+            <>\r\n+              <div className=\"text-2xl font-bold text-gray-700\">{live.active}</div>\r\n+              <p className=\"text-sm text-gray-600\">{subtitle}</p>\r\n+            </>\r\n+          )}\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1761278727676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n   const [error, setError] = useState('');\r\n   const [total, setTotal] = useState(0);\r\n   const [rawSeries, setRawSeries] = useState([]);\r\n   const [mode, setMode] = useState('trend'); // 'live' | 'trend'\r\n-  const [showChart, setShowChart] = useState(true);\r\n+  const [showChart, setShowChart] = useState(false);\r\n   const excludeMe = true;\r\n   const [live, setLive] = useState({ active: 0 });\r\n \r\n   // Fetch trend data once\r\n@@ -98,16 +98,18 @@\n     labels = rawSeries.map(p => `${p.date?.slice(6,8)}${months[Number(p.date?.slice(4,6))-1]}`);\r\n     values = rawSeries.map(p => p.users);\r\n   }\r\n \r\n+  const accentColor = '#e4c59c';\r\n+\r\n   const data = {\r\n     labels,\r\n     datasets: [{\r\n       label: mode === 'trend' ? 'Visitors' : 'Live',\r\n       data: mode === 'trend' ? values : [],\r\n-      borderColor: '#4b5563',\r\n-      backgroundColor: 'rgba(75, 85, 99, 0.1)',\r\n-      pointBackgroundColor: '#4b5563',\r\n+      borderColor: accentColor,\r\n+      backgroundColor: 'rgba(228, 197, 156, 0.25)',\r\n+      pointBackgroundColor: accentColor,\r\n       fill: true,\r\n       tension: 0.3,\r\n     }]\r\n   };\r\n@@ -128,23 +130,28 @@\n       y: { beginAtZero: true, grid: { color: 'rgba(0,0,0,0.05)' } }\r\n     }\r\n   };\r\n \r\n-  let subtitle = '';\r\n-  if (mode === 'trend') subtitle = 'Last 14 days trend';\r\n-  if (mode === 'live') subtitle = 'Realtime active users';\r\n-\r\n   return (\r\n-    <div className=\"bg-white shadow-md rounded-lg p-6\">\r\n+    <div\r\n+      className=\"shadow-md rounded-lg p-6\"\r\n+      style={{ backgroundColor: accentColor }}\r\n+    >\r\n       <div className=\"flex justify-between items-start mb-4\">\r\n         <div>\r\n-          <h2 className=\"text-xl font-semibold\" style={{ color: '#2563eb' }}>Visitors</h2>\r\n+          <h2 className=\"text-xl font-semibold text-stone-800\">Visitors</h2>\r\n         </div>\r\n         <div className=\"flex gap-2 items-center\">\r\n-          <button onClick={() => setMode('trend')} className={`px-3 py-1 text-sm rounded ${mode === 'trend' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n+          <button\r\n+            onClick={() => setMode('trend')}\r\n+            className={`px-3 py-1 text-sm rounded ${mode === 'trend' ? 'bg-stone-700 text-white' : 'bg-stone-200 text-stone-700'}`}\r\n+          >\r\n             Trend\r\n           </button>\r\n-          <button onClick={() => setMode('live')} className={`px-3 py-1 text-sm rounded ${mode === 'live' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n+          <button\r\n+            onClick={() => setMode('live')}\r\n+            className={`px-3 py-1 text-sm rounded ${mode === 'live' ? 'bg-stone-700 text-white' : 'bg-stone-200 text-stone-700'}`}\r\n+          >\r\n             Live\r\n           </button>\r\n           <EyeToggle\r\n             open={showChart}\r\n@@ -152,15 +159,15 @@\n             label=\"visitors chart\"\r\n           />\r\n         </div>\r\n       </div>\r\n-      {loading && <p className=\"text-gray-500\">Loading analytics...</p>}\r\n-      {error && <p className=\"text-red-500\">Error: {error}</p>}\r\n+      {loading && <p className=\"text-stone-700/80\">Loading analytics...</p>}\r\n+      {error && <p className=\"text-red-600\">Error: {error}</p>}\r\n       {!loading && !error && (\r\n         <div>\r\n           {mode === 'trend' ? (\r\n             <>\r\n-              <div className=\"text-2xl font-bold text-gray-700\">{total.toLocaleString()}</div>\r\n+              <div className=\"text-2xl font-bold text-stone-900\">{total.toLocaleString()}</div>\r\n               <div\r\n                 style={{\r\n                   width: '100%',\r\n                   overflow: 'hidden',\r\n@@ -175,201 +182,13 @@\n               </div>\r\n             </>\r\n           ) : (\r\n             <>\r\n-              <div className=\"text-2xl font-bold text-gray-700\">{live.active}</div>\r\n-              <p className=\"text-sm text-gray-600\">{subtitle}</p>\r\n+              <div className=\"text-2xl font-bold text-stone-900\">{live.active}</div>\r\n+              <p className=\"text-sm text-stone-700/80\">Realtime active users</p>\r\n             </>\r\n           )}\r\n         </div>\r\n       )}\r\n     </div>\r\n   );\r\n }\r\n-import { useEffect, useState } from 'react';\r\n-import { Line } from 'react-chartjs-2';\r\n-import { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\r\n-import EyeToggle from './EyeToggle';\r\n-Chart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\r\n-\r\n-function groupByWeek(daily) {\r\n-  // Group daily data into weeks\r\n-  const weekMap = {};\r\n-  daily.forEach(d => {\r\n-    if (!d.date) return;\r\n-    const dt = new Date(d.date.slice(0,4), Number(d.date.slice(4,6))-1, Number(d.date.slice(6,8)));\r\n-    const year = dt.getFullYear();\r\n-    const onejan = new Date(year, 0, 1);\r\n-    const week = Math.ceil((((dt - onejan) / 86400000) + onejan.getDay()+1)/7);\r\n-    const key = `${year}-W${week}`;\r\n-    weekMap[key] = (weekMap[key] || 0) + d.users;\r\n-  });\r\n-  return weekMap;\r\n-}\r\n-\r\n-function groupByMonth(daily) {\r\n-  const monthMap = {};\r\n-  daily.forEach(d => {\r\n-    if (!d.date) return;\r\n-    const key = d.date.slice(0,6); // YYYYMM\r\n-    monthMap[key] = (monthMap[key] || 0) + d.users;\r\n-  });\r\n-  return monthMap;\r\n-}\r\n-\r\n-export default function VisitorsCard() {\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState('');\r\n-  const [total, setTotal] = useState(0);\r\n-  const [rawSeries, setRawSeries] = useState([]);\r\n-  const [mode, setMode] = useState('trend'); // 'live' | 'trend'\r\n-  const [showChart, setShowChart] = useState(true);\r\n-  const excludeMe = true;\r\n-  const [live, setLive] = useState({ active: 0 });\r\n-\r\n-  // Fetch trend data once\r\n-  useEffect(() => {\r\n-    let mounted = true;\r\n-    (async () => {\r\n-      try {\r\n-        const resp = await fetch('/api/analytics-visitors');\r\n-        const data = await resp.json();\r\n-        if (!mounted) return;\r\n-        if (resp.ok && data.success) {\r\n-          setTotal(data.totalUsers || 0);\r\n-          setRawSeries(data.daily || []);\r\n-        } else {\r\n-          setError(data.error || 'Failed to fetch');\r\n-        }\r\n-      } catch (e) {\r\n-        if (mounted) setError(e.message || 'Failed to fetch');\r\n-      } finally {\r\n-        if (mounted) setLoading(false);\r\n-      }\r\n-    })();\r\n-    return () => { mounted = false; };\r\n-  }, []);\r\n-\r\n-  // Poll realtime when in live\r\n-  useEffect(() => {\r\n-    let mounted = true;\r\n-    let timer;\r\n-    async function loadRealtime() {\r\n-      try {\r\n-        const url = new URL('/api/analytics-realtime', window.location.origin);\r\n-        url.searchParams.set('excludeMe', excludeMe ? '1' : '0');\r\n-        const resp = await fetch(url.toString());\r\n-        const data = await resp.json();\r\n-        if (!mounted) return;\r\n-        if (resp.ok && data.success) {\r\n-          setLive({ active: data.totalActive || 0 });\r\n-        } else {\r\n-          setError(data.error || 'Failed to fetch realtime');\r\n-        }\r\n-      } catch (e) {\r\n-        if (mounted) setError(e.message || 'Failed to fetch realtime');\r\n-      }\r\n-    }\r\n-    if (mode === 'live') {\r\n-      loadRealtime();\r\n-      timer = setInterval(loadRealtime, 10000); // 10s\r\n-    }\r\n-    return () => { mounted = false; if (timer) clearInterval(timer); };\r\n-  }, [mode, excludeMe]);\r\n-\r\n-  let labels = [], values = [];\r\n-  const months = ['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'];\r\n-\r\n-  const interval = 'day';\r\n-  if (mode === 'trend') {\r\n-    // daily trend view\r\n-    labels = rawSeries.map(p => `${p.date?.slice(6,8)}${months[Number(p.date?.slice(4,6))-1]}`);\r\n-    values = rawSeries.map(p => p.users);\r\n-  }\r\n-\r\n-  const data = {\r\n-    labels,\r\n-    datasets: [{\r\n-      label: mode === 'trend' ? 'Visitors' : 'Live',\r\n-      data: mode === 'trend' ? values : [],\r\n-      borderColor: '#4b5563',\r\n-      backgroundColor: 'rgba(75, 85, 99, 0.1)',\r\n-      pointBackgroundColor: '#4b5563',\r\n-      fill: true,\r\n-      tension: 0.3,\r\n-    }]\r\n-  };\r\n-\r\n-  const options = {\r\n-    responsive: true,\r\n-    maintainAspectRatio: false,\r\n-    plugins: { \r\n-      legend: { display: false },\r\n-      tooltip: {\r\n-        callbacks: {\r\n-          label: ctx => `${ctx.parsed.y} visitors`,\r\n-        }\r\n-      }\r\n-    },\r\n-    scales: {\r\n-      x: { grid: { display: false } },\r\n-      y: { beginAtZero: true, grid: { color: 'rgba(0,0,0,0.05)' } }\r\n-    }\r\n-  };\r\n-\r\n-  let subtitle = '';\r\n-  if (mode === 'trend') subtitle = 'Last 14 days trend';\r\n-  if (mode === 'live') subtitle = 'Realtime active users';\r\n-\r\n-  return (\r\n-    <div className=\"bg-white shadow-md rounded-lg p-6\">\r\n-      <div className=\"flex justify-between items-start mb-4\">\r\n-        <div>\r\n-          <h2 className=\"text-xl font-semibold\" style={{ color: '#2563eb' }}>Website Visitors</h2>\r\n-        </div>\r\n-        <div className=\"flex gap-2 items-center\">\r\n-          <button onClick={() => setMode('live')} className={`px-3 py-1 text-sm rounded ${mode === 'live' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n-            Live\r\n-          </button>\r\n-          <button onClick={() => setMode('trend')} className={`px-3 py-1 text-sm rounded ${mode === 'trend' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n-            Trend\r\n-          </button>\r\n-          <EyeToggle\r\n-            open={showChart}\r\n-            onToggle={() => setShowChart(prev => !prev)}\r\n-            label=\"visitors chart\"\r\n-          />\r\n-        </div>\r\n-      </div>\r\n-      {loading && <p className=\"text-gray-500\">Loading analytics...</p>}\r\n-      {error && <p className=\"text-red-500\">Error: {error}</p>}\r\n-      {!loading && !error && (\r\n-        <div>\r\n-          {mode === 'trend' ? (\r\n-            <>\r\n-              <div className=\"text-2xl font-bold text-gray-700\">{total.toLocaleString()}</div>\r\n-              <p className=\"text-sm text-gray-600\">{subtitle}; Total: 30 days</p>\r\n-              <div\r\n-                style={{\r\n-                  width: '100%',\r\n-                  overflow: 'hidden',\r\n-                  transition: 'max-height 0.35s ease, margin-top 0.2s ease',\r\n-                  maxHeight: showChart ? '320px' : '0px',\r\n-                  marginTop: showChart ? '16px' : '0px',\r\n-                }}\r\n-              >\r\n-                <div className=\"w-full bg-white rounded-lg p-2\" style={{ height: '280px' }}>\r\n-                  <Line data={data} options={options} />\r\n-                </div>\r\n-              </div>\r\n-            </>\r\n-          ) : (\r\n-            <>\r\n-              <div className=\"text-2xl font-bold text-gray-700\">{live.active}</div>\r\n-              <p className=\"text-sm text-gray-600\">{subtitle}</p>\r\n-            </>\r\n-          )}\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\r\n"
                }
            ],
            "date": 1760682513168,
            "name": "Commit-0",
            "content": "import { useEffect, useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\r\nChart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\r\n\r\nexport default function VisitorsCard() {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [total, setTotal] = useState(0);\r\n  const [series, setSeries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    (async () => {\r\n      try {\r\n        const resp = await fetch('/api/analytics-visitors');\r\n        const data = await resp.json();\r\n        if (!mounted) return;\r\n        if (resp.ok && data.success) {\r\n          setTotal(data.totalUsers || 0);\r\n          setSeries(data.daily || []);\r\n        } else {\r\n          setError(data.error || 'Failed to fetch');\r\n        }\r\n      } catch (e) {\r\n        if (mounted) setError(e.message || 'Failed to fetch');\r\n      } finally {\r\n        if (mounted) setLoading(false);\r\n      }\r\n    })();\r\n    return () => { mounted = false; };\r\n  }, []);\r\n\r\n  const labels = series.map(p => `${p.date?.slice(6,8)}${['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'][Number(p.date?.slice(4,6))-1]}`);\r\n  const values = series.map(p => p.users);\r\n\r\n  const data = {\r\n    labels,\r\n    datasets: [{\r\n      label: 'Users',\r\n      data: values,\r\n      borderColor: 'rgb(16,185,129)',\r\n      backgroundColor: 'rgba(16,185,129,0.2)',\r\n      pointBackgroundColor: 'rgb(16,185,129)',\r\n      tension: 0.2,\r\n      pointRadius: 3,\r\n      fill: false,\r\n    }]\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    plugins: { legend: { display: false } },\r\n    scales: {\r\n      x: { ticks: { color: '#222' }, title: { display: true, text: 'Date' } },\r\n      y: { ticks: { color: '#222' }, title: { display: true, text: 'Users' }, beginAtZero: true },\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-xl shadow p-6 border border-blue-100 flex flex-col items-center justify-center\">\r\n      <div className=\"text-lg font-semibold mb-2 text-blue-700\">Visitors (GA4)</div>\r\n      {loading ? (\r\n        <div className=\"text-blue-600 font-semibold\">Loading...</div>\r\n      ) : error ? (\r\n        <div className=\"text-red-600 text-sm\">{error}</div>\r\n      ) : (\r\n        <>\r\n          <div className=\"text-3xl font-bold text-blue-900\">{total.toLocaleString()}</div>\r\n          <div className=\"w-full mt-4 bg-white rounded-lg p-2\">\r\n            <Line data={data} options={options} />\r\n          </div>\r\n          <div className=\"text-xs mt-2 text-blue-700/70\">Last 30 days total; 14-day trend</div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}