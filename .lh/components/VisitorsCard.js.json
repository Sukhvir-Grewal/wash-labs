{
    "sourceFile": "components/VisitorsCard.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1760682513168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760684108444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,141 @@\n+import { useEffect, useState } from 'react';\r\n+import { Line } from 'react-chartjs-2';\r\n+import { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\r\n+Chart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\r\n+\r\n+function groupByWeek(daily) {\r\n+  // Group daily data into weeks\r\n+  const weekMap = {};\r\n+  daily.forEach(d => {\r\n+    if (!d.date) return;\r\n+    const dt = new Date(d.date.slice(0,4), Number(d.date.slice(4,6))-1, Number(d.date.slice(6,8)));\r\n+    const year = dt.getFullYear();\r\n+    const onejan = new Date(year, 0, 1);\r\n+    const week = Math.ceil((((dt - onejan) / 86400000) + onejan.getDay()+1)/7);\r\n+    const key = `${year}-W${week}`;\r\n+    weekMap[key] = (weekMap[key] || 0) + d.users;\r\n+  });\r\n+  return weekMap;\r\n+}\r\n+\r\n+function groupByMonth(daily) {\r\n+  const monthMap = {};\r\n+  daily.forEach(d => {\r\n+    if (!d.date) return;\r\n+    const key = d.date.slice(0,6); // YYYYMM\r\n+    monthMap[key] = (monthMap[key] || 0) + d.users;\r\n+  });\r\n+  return monthMap;\r\n+}\r\n+\r\n+export default function VisitorsCard() {\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState('');\r\n+  const [total, setTotal] = useState(0);\r\n+  const [rawSeries, setRawSeries] = useState([]);\r\n+  const [interval, setInterval] = useState('week'); // 'day' | 'week' | 'month'\r\n+\r\n+  useEffect(() => {\r\n+    let mounted = true;\r\n+    (async () => {\r\n+      try {\r\n+        const resp = await fetch('/api/analytics-visitors');\r\n+        const data = await resp.json();\r\n+        if (!mounted) return;\r\n+        if (resp.ok && data.success) {\r\n+          setTotal(data.totalUsers || 0);\r\n+          setRawSeries(data.daily || []);\r\n+        } else {\r\n+          setError(data.error || 'Failed to fetch');\r\n+        }\r\n+      } catch (e) {\r\n+        if (mounted) setError(e.message || 'Failed to fetch');\r\n+      } finally {\r\n+        if (mounted) setLoading(false);\r\n+      }\r\n+    })();\r\n+    return () => { mounted = false; };\r\n+  }, []);\r\n+\r\n+  let labels = [], values = [];\r\n+  const months = ['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'];\r\n+\r\n+  if (interval === 'day') {\r\n+    labels = rawSeries.map(p => `${p.date?.slice(6,8)}${months[Number(p.date?.slice(4,6))-1]}`);\r\n+    values = rawSeries.map(p => p.users);\r\n+  } else if (interval === 'week') {\r\n+    const weekMap = groupByWeek(rawSeries);\r\n+    const rawWeeks = Object.keys(weekMap).sort();\r\n+    labels = rawWeeks.map(wstr => {\r\n+      const [year, w] = wstr.split('-W');\r\n+      if (year && w) {\r\n+        const weekNum = parseInt(w, 10);\r\n+        const jan1 = new Date(Number(year), 0, 1);\r\n+        const start = new Date(jan1.getTime() + (weekNum - 1) * 7 * 86400000);\r\n+        const dayOfWeek = start.getDay();\r\n+        const weekStart = new Date(start);\r\n+        weekStart.setDate(start.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));\r\n+        const weekEnd = new Date(weekStart);\r\n+        weekEnd.setDate(weekStart.getDate() + 6);\r\n+        const mAbbr = months[weekStart.getMonth()];\r\n+        return `${mAbbr} (${weekStart.getDate()}-${weekEnd.getDate()})`;\r\n+      }\r\n+      return wstr;\r\n+    });\r\n+    values = rawWeeks.map(w => weekMap[w]);\r\n+  } else if (interval === 'month') {\r\n+    const monthMap = groupByMonth(rawSeries);\r\n+    const rawMonths = Object.keys(monthMap).sort();\r\n+    labels = rawMonths.map(mstr => {\r\n+      if (mstr.length === 6) {\r\n+        const y = mstr.slice(0,4);\r\n+        const m = months[Number(mstr.slice(4,6))-1];\r\n+        return `${m} ${y}`;\r\n+      }\r\n+      return mstr;\r\n+    });\r\n+    values = rawMonths.map(m => monthMap[m]);\r\n+  }\r\n+\r\n+  const data = {\r\n+    labels,\r\n+    datasets: [{\r\n+      label: 'Users',\r\n+      data: values,\r\n+      borderColor: 'rgb(16,185,129)',\r\n+      backgroundColor: 'rgba(16,185,129,0.2)',\r\n+      pointBackgroundColor: 'rgb(16,185,129)',\r\n+      tension: 0.2,\r\n+      pointRadius: 3,\r\n+      fill: false,\r\n+    }]\r\n+  };\r\n+\r\n+  const options = {\r\n+    responsive: true,\r\n+    plugins: { legend: { display: false } },\r\n+    scales: {\r\n+      x: { ticks: { color: '#222' }, title: { display: true, text: 'Date' } },\r\n+      y: { ticks: { color: '#222' }, title: { display: true, text: 'Users' }, beginAtZero: true },\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"bg-white rounded-xl shadow p-6 border border-blue-100 flex flex-col items-center justify-center\">\r\n+      <div className=\"text-lg font-semibold mb-2 text-blue-700\">Visitors (GA4)</div>\r\n+      {loading ? (\r\n+        <div className=\"text-blue-600 font-semibold\">Loading...</div>\r\n+      ) : error ? (\r\n+        <div className=\"text-red-600 text-sm\">{error}</div>\r\n+      ) : (\r\n+        <>\r\n+          <div className=\"text-3xl font-bold text-blue-900\">{total.toLocaleString()}</div>\r\n+          <div className=\"w-full mt-4 bg-white rounded-lg p-2\">\r\n+            <Line data={data} options={options} />\r\n+          </div>\r\n+          <div className=\"text-xs mt-2 text-blue-700/70\">Last 30 days total; 14-day trend</div>\r\n+        </>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1760684315404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,163 @@\n+import { useEffect, useState } from 'react';\r\n+import { Line } from 'react-chartjs-2';\r\n+import { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\r\n+Chart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\r\n+\r\n+function groupByWeek(daily) {\r\n+  // Group daily data into weeks\r\n+  const weekMap = {};\r\n+  daily.forEach(d => {\r\n+    if (!d.date) return;\r\n+    const dt = new Date(d.date.slice(0,4), Number(d.date.slice(4,6))-1, Number(d.date.slice(6,8)));\r\n+    const year = dt.getFullYear();\r\n+    const onejan = new Date(year, 0, 1);\r\n+    const week = Math.ceil((((dt - onejan) / 86400000) + onejan.getDay()+1)/7);\r\n+    const key = `${year}-W${week}`;\r\n+    weekMap[key] = (weekMap[key] || 0) + d.users;\r\n+  });\r\n+  return weekMap;\r\n+}\r\n+\r\n+function groupByMonth(daily) {\r\n+  const monthMap = {};\r\n+  daily.forEach(d => {\r\n+    if (!d.date) return;\r\n+    const key = d.date.slice(0,6); // YYYYMM\r\n+    monthMap[key] = (monthMap[key] || 0) + d.users;\r\n+  });\r\n+  return monthMap;\r\n+}\r\n+\r\n+export default function VisitorsCard() {\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState('');\r\n+  const [total, setTotal] = useState(0);\r\n+  const [rawSeries, setRawSeries] = useState([]);\r\n+  const [interval, setInterval] = useState('week'); // 'day' | 'week' | 'month'\r\n+\r\n+  useEffect(() => {\r\n+    let mounted = true;\r\n+    (async () => {\r\n+      try {\r\n+        const resp = await fetch('/api/analytics-visitors');\r\n+        const data = await resp.json();\r\n+        if (!mounted) return;\r\n+        if (resp.ok && data.success) {\r\n+          setTotal(data.totalUsers || 0);\r\n+          setRawSeries(data.daily || []);\r\n+        } else {\r\n+          setError(data.error || 'Failed to fetch');\r\n+        }\r\n+      } catch (e) {\r\n+        if (mounted) setError(e.message || 'Failed to fetch');\r\n+      } finally {\r\n+        if (mounted) setLoading(false);\r\n+      }\r\n+    })();\r\n+    return () => { mounted = false; };\r\n+  }, []);\r\n+\r\n+  let labels = [], values = [];\r\n+  const months = ['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'];\r\n+\r\n+  if (interval === 'day') {\r\n+    labels = rawSeries.map(p => `${p.date?.slice(6,8)}${months[Number(p.date?.slice(4,6))-1]}`);\r\n+    values = rawSeries.map(p => p.users);\r\n+  } else if (interval === 'week') {\r\n+    const weekMap = groupByWeek(rawSeries);\r\n+    const rawWeeks = Object.keys(weekMap).sort();\r\n+    labels = rawWeeks.map(wstr => {\r\n+      const [year, w] = wstr.split('-W');\r\n+      if (year && w) {\r\n+        const weekNum = parseInt(w, 10);\r\n+        const jan1 = new Date(Number(year), 0, 1);\r\n+        const start = new Date(jan1.getTime() + (weekNum - 1) * 7 * 86400000);\r\n+        const dayOfWeek = start.getDay();\r\n+        const weekStart = new Date(start);\r\n+        weekStart.setDate(start.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));\r\n+        const weekEnd = new Date(weekStart);\r\n+        weekEnd.setDate(weekStart.getDate() + 6);\r\n+        const mAbbr = months[weekStart.getMonth()];\r\n+        return `${mAbbr} (${weekStart.getDate()}-${weekEnd.getDate()})`;\r\n+      }\r\n+      return wstr;\r\n+    });\r\n+    values = rawWeeks.map(w => weekMap[w]);\r\n+  } else if (interval === 'month') {\r\n+    const monthMap = groupByMonth(rawSeries);\r\n+    const rawMonths = Object.keys(monthMap).sort();\r\n+    labels = rawMonths.map(mstr => {\r\n+      if (mstr.length === 6) {\r\n+        const y = mstr.slice(0,4);\r\n+        const m = months[Number(mstr.slice(4,6))-1];\r\n+        return `${m} ${y}`;\r\n+      }\r\n+      return mstr;\r\n+    });\r\n+    values = rawMonths.map(m => monthMap[m]);\r\n+  }\r\n+\r\n+  const data = {\r\n+    labels,\r\n+    datasets: [{\r\n+      label: 'Visitors',\r\n+      data: values,\r\n+      borderColor: '#4b5563',\r\n+      backgroundColor: 'rgba(75, 85, 99, 0.1)',\r\n+      pointBackgroundColor: '#4b5563',\r\n+      fill: true,\r\n+      tension: 0.3,\r\n+    }]\r\n+  };\r\n+\r\n+  const options = {\r\n+    responsive: true,\r\n+    maintainAspectRatio: false,\r\n+    plugins: { \r\n+      legend: { display: false },\r\n+      tooltip: {\r\n+        callbacks: {\r\n+          label: ctx => `${ctx.parsed.y} visitors`,\r\n+        }\r\n+      }\r\n+    },\r\n+    scales: {\r\n+      x: { grid: { display: false } },\r\n+      y: { beginAtZero: true, grid: { color: 'rgba(0,0,0,0.05)' } }\r\n+    }\r\n+  };\r\n+\r\n+  let intervalLabel = 'Last 14 days (daily view)';\r\n+  if (interval === 'week') intervalLabel = `Last ${labels.length} weeks (weekly view)`;\r\n+  if (interval === 'month') intervalLabel = `Last ${labels.length} months (monthly view)`;\r\n+\r\n+  return (\r\n+    <div className=\"bg-white shadow-md rounded-lg p-6\">\r\n+      <div className=\"flex justify-between items-center mb-4\">\r\n+        <h2 className=\"text-xl font-semibold text-gray-700\">Website Visitors</h2>\r\n+        <div className=\"flex gap-2\">\r\n+          <button onClick={() => setInterval('day')} className={`px-3 py-1 text-sm rounded ${interval === 'day' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n+            Daily\r\n+          </button>\r\n+          <button onClick={() => setInterval('week')} className={`px-3 py-1 text-sm rounded ${interval === 'week' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n+            Weekly\r\n+          </button>\r\n+          <button onClick={() => setInterval('month')} className={`px-3 py-1 text-sm rounded ${interval === 'month' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n+            Monthly\r\n+          </button>\r\n+        </div>\r\n+      </div>\r\n+      {loading && <p className=\"text-gray-500\">Loading analytics...</p>}\r\n+      {error && <p className=\"text-red-500\">Error: {error}</p>}\r\n+      {!loading && !error && (\r\n+        <div>\r\n+          <div className=\"text-2xl font-bold text-gray-700\">{total.toLocaleString()}</div>\r\n+          <p className=\"text-sm text-gray-600\">{intervalLabel}; Total: 30 days</p>\r\n+          <div className=\"w-full mt-4 bg-white rounded-lg p-2\" style={{ height: '280px' }}>\r\n+            <Line data={data} options={options} />\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1760684326852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,223 +160,4 @@\n       )}\r\n     </div>\r\n   );\r\n }\r\n-import { useEffect, useState } from 'react';\r\n-import { Line } from 'react-chartjs-2';\r\n-import { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\r\n-Chart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\r\n-\r\n-function groupByWeek(daily) {\r\n-  // Group daily data into weeks\r\n-  const weekMap = {};\r\n-  daily.forEach(d => {\r\n-    if (!d.date) return;\r\n-    const dt = new Date(d.date.slice(0,4), Number(d.date.slice(4,6))-1, Number(d.date.slice(6,8)));\r\n-    const year = dt.getFullYear();\r\n-    const onejan = new Date(year, 0, 1);\r\n-    const week = Math.ceil((((dt - onejan) / 86400000) + onejan.getDay()+1)/7);\r\n-    const key = `${year}-W${week}`;\r\n-    weekMap[key] = (weekMap[key] || 0) + d.users;\r\n-  });\r\n-  return weekMap;\r\n-}\r\n-\r\n-function groupByMonth(daily) {\r\n-  const monthMap = {};\r\n-  daily.forEach(d => {\r\n-    if (!d.date) return;\r\n-    const key = d.date.slice(0,6); // YYYYMM\r\n-    monthMap[key] = (monthMap[key] || 0) + d.users;\r\n-  });\r\n-  return monthMap;\r\n-}\r\n-\r\n-export default function VisitorsCard() {\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState('');\r\n-  const [total, setTotal] = useState(0);\r\n-  const [rawSeries, setRawSeries] = useState([]);\r\n-  const [interval, setInterval] = useState('week'); // 'day' | 'week' | 'month'\r\n-\r\n-  useEffect(() => {\r\n-    let mounted = true;\r\n-    (async () => {\r\n-      try {\r\n-        const resp = await fetch('/api/analytics-visitors');\r\n-        const data = await resp.json();\r\n-        if (!mounted) return;\r\n-        if (resp.ok && data.success) {\r\n-          setTotal(data.totalUsers || 0);\r\n-          setRawSeries(data.daily || []);\r\n-        } else {\r\n-          setError(data.error || 'Failed to fetch');\r\n-        }\r\n-      } catch (e) {\r\n-        if (mounted) setError(e.message || 'Failed to fetch');\r\n-      } finally {\r\n-        if (mounted) setLoading(false);\r\n-      }\r\n-    })();\r\n-    return () => { mounted = false; };\r\n-  }, []);\r\n-\r\n-  let labels = [], values = [];\r\n-  const months = ['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'];\r\n-\r\n-  if (interval === 'day') {\r\n-    labels = rawSeries.map(p => `${p.date?.slice(6,8)}${months[Number(p.date?.slice(4,6))-1]}`);\r\n-    values = rawSeries.map(p => p.users);\r\n-  } else if (interval === 'week') {\r\n-    const weekMap = groupByWeek(rawSeries);\r\n-    const rawWeeks = Object.keys(weekMap).sort();\r\n-    labels = rawWeeks.map(wstr => {\r\n-      const [year, w] = wstr.split('-W');\r\n-      if (year && w) {\r\n-        const weekNum = parseInt(w, 10);\r\n-        const jan1 = new Date(Number(year), 0, 1);\r\n-        const start = new Date(jan1.getTime() + (weekNum - 1) * 7 * 86400000);\r\n-        const dayOfWeek = start.getDay();\r\n-        const weekStart = new Date(start);\r\n-        weekStart.setDate(start.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));\r\n-        const weekEnd = new Date(weekStart);\r\n-        weekEnd.setDate(weekStart.getDate() + 6);\r\n-        const mAbbr = months[weekStart.getMonth()];\r\n-        return `${mAbbr} (${weekStart.getDate()}-${weekEnd.getDate()})`;\r\n-      }\r\n-      return wstr;\r\n-    });\r\n-    values = rawWeeks.map(w => weekMap[w]);\r\n-  } else if (interval === 'month') {\r\n-    const monthMap = groupByMonth(rawSeries);\r\n-    const rawMonths = Object.keys(monthMap).sort();\r\n-    labels = rawMonths.map(mstr => {\r\n-      if (mstr.length === 6) {\r\n-        const y = mstr.slice(0,4);\r\n-        const m = months[Number(mstr.slice(4,6))-1];\r\n-        return `${m} ${y}`;\r\n-      }\r\n-      return mstr;\r\n-    });\r\n-    values = rawMonths.map(m => monthMap[m]);\r\n-  }\r\n-\r\n-  const data = {\r\n-    labels,\r\n-    datasets: [{\r\n-      label: 'Users',\r\n-      data: values,\r\n-      borderColor: 'rgb(16,185,129)',\r\n-      backgroundColor: 'rgba(16,185,129,0.2)',\r\n-      pointBackgroundColor: 'rgb(16,185,129)',\r\n-      tension: 0.2,\r\n-      pointRadius: 3,\r\n-      fill: false,\r\n-    }]\r\n-  };\r\n-\r\n-  const options = {\r\n-    responsive: true,\r\n-    plugins: { legend: { display: false } },\r\n-    scales: {\r\n-      x: { ticks: { color: '#222' }, title: { display: true, text: 'Date' } },\r\n-      y: { ticks: { color: '#222' }, title: { display: true, text: 'Users' }, beginAtZero: true },\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"bg-white rounded-xl shadow p-6 border border-blue-100 flex flex-col items-center justify-center\">\r\n-      <div className=\"text-lg font-semibold mb-2 text-blue-700\">Visitors (GA4)</div>\r\n-      {loading ? (\r\n-        <div className=\"text-blue-600 font-semibold\">Loading...</div>\r\n-      ) : error ? (\r\n-        <div className=\"text-red-600 text-sm\">{error}</div>\r\n-      ) : (\r\n-        <>\r\n-          <div className=\"text-3xl font-bold text-blue-900\">{total.toLocaleString()}</div>\r\n-          <div className=\"w-full mt-4 bg-white rounded-lg p-2\">\r\n-            <Line data={data} options={options} />\r\n-          </div>\r\n-          <div className=\"text-xs mt-2 text-blue-700/70\">Last 30 days total; 14-day trend</div>\r\n-        </>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\r\n-import { useEffect, useState } from 'react';\r\n-import { Line } from 'react-chartjs-2';\r\n-import { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\r\n-Chart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\r\n-\r\n-export default function VisitorsCard() {\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState('');\r\n-  const [total, setTotal] = useState(0);\r\n-  const [series, setSeries] = useState([]);\r\n-\r\n-  useEffect(() => {\r\n-    let mounted = true;\r\n-    (async () => {\r\n-      try {\r\n-        const resp = await fetch('/api/analytics-visitors');\r\n-        const data = await resp.json();\r\n-        if (!mounted) return;\r\n-        if (resp.ok && data.success) {\r\n-          setTotal(data.totalUsers || 0);\r\n-          setSeries(data.daily || []);\r\n-        } else {\r\n-          setError(data.error || 'Failed to fetch');\r\n-        }\r\n-      } catch (e) {\r\n-        if (mounted) setError(e.message || 'Failed to fetch');\r\n-      } finally {\r\n-        if (mounted) setLoading(false);\r\n-      }\r\n-    })();\r\n-    return () => { mounted = false; };\r\n-  }, []);\r\n-\r\n-  const labels = series.map(p => `${p.date?.slice(6,8)}${['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'][Number(p.date?.slice(4,6))-1]}`);\r\n-  const values = series.map(p => p.users);\r\n-\r\n-  const data = {\r\n-    labels,\r\n-    datasets: [{\r\n-      label: 'Users',\r\n-      data: values,\r\n-      borderColor: 'rgb(16,185,129)',\r\n-      backgroundColor: 'rgba(16,185,129,0.2)',\r\n-      pointBackgroundColor: 'rgb(16,185,129)',\r\n-      tension: 0.2,\r\n-      pointRadius: 3,\r\n-      fill: false,\r\n-    }]\r\n-  };\r\n-\r\n-  const options = {\r\n-    responsive: true,\r\n-    plugins: { legend: { display: false } },\r\n-    scales: {\r\n-      x: { ticks: { color: '#222' }, title: { display: true, text: 'Date' } },\r\n-      y: { ticks: { color: '#222' }, title: { display: true, text: 'Users' }, beginAtZero: true },\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"bg-white rounded-xl shadow p-6 border border-blue-100 flex flex-col items-center justify-center\">\r\n-      <div className=\"text-lg font-semibold mb-2 text-blue-700\">Visitors (GA4)</div>\r\n-      {loading ? (\r\n-        <div className=\"text-blue-600 font-semibold\">Loading...</div>\r\n-      ) : error ? (\r\n-        <div className=\"text-red-600 text-sm\">{error}</div>\r\n-      ) : (\r\n-        <>\r\n-          <div className=\"text-3xl font-bold text-blue-900\">{total.toLocaleString()}</div>\r\n-          <div className=\"w-full mt-4 bg-white rounded-lg p-2\">\r\n-            <Line data={data} options={options} />\r\n-          </div>\r\n-          <div className=\"text-xs mt-2 text-blue-700/70\">Last 30 days total; 14-day trend</div>\r\n-        </>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1760684371294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,163 @@\n+import { useEffect, useState } from 'react';\r\n+import { Line } from 'react-chartjs-2';\r\n+import { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\r\n+Chart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\r\n+\r\n+function groupByWeek(daily) {\r\n+  // Group daily data into weeks\r\n+  const weekMap = {};\r\n+  daily.forEach(d => {\r\n+    if (!d.date) return;\r\n+    const dt = new Date(d.date.slice(0,4), Number(d.date.slice(4,6))-1, Number(d.date.slice(6,8)));\r\n+    const year = dt.getFullYear();\r\n+    const onejan = new Date(year, 0, 1);\r\n+    const week = Math.ceil((((dt - onejan) / 86400000) + onejan.getDay()+1)/7);\r\n+    const key = `${year}-W${week}`;\r\n+    weekMap[key] = (weekMap[key] || 0) + d.users;\r\n+  });\r\n+  return weekMap;\r\n+}\r\n+\r\n+function groupByMonth(daily) {\r\n+  const monthMap = {};\r\n+  daily.forEach(d => {\r\n+    if (!d.date) return;\r\n+    const key = d.date.slice(0,6); // YYYYMM\r\n+    monthMap[key] = (monthMap[key] || 0) + d.users;\r\n+  });\r\n+  return monthMap;\r\n+}\r\n+\r\n+export default function VisitorsCard() {\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState('');\r\n+  const [total, setTotal] = useState(0);\r\n+  const [rawSeries, setRawSeries] = useState([]);\r\n+  const [interval, setInterval] = useState('week'); // 'day' | 'week' | 'month'\r\n+\r\n+  useEffect(() => {\r\n+    let mounted = true;\r\n+    (async () => {\r\n+      try {\r\n+        const resp = await fetch('/api/analytics-visitors');\r\n+        const data = await resp.json();\r\n+        if (!mounted) return;\r\n+        if (resp.ok && data.success) {\r\n+          setTotal(data.totalUsers || 0);\r\n+          setRawSeries(data.daily || []);\r\n+        } else {\r\n+          setError(data.error || 'Failed to fetch');\r\n+        }\r\n+      } catch (e) {\r\n+        if (mounted) setError(e.message || 'Failed to fetch');\r\n+      } finally {\r\n+        if (mounted) setLoading(false);\r\n+      }\r\n+    })();\r\n+    return () => { mounted = false; };\r\n+  }, []);\r\n+\r\n+  let labels = [], values = [];\r\n+  const months = ['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'];\r\n+\r\n+  if (interval === 'day') {\r\n+    labels = rawSeries.map(p => `${p.date?.slice(6,8)}${months[Number(p.date?.slice(4,6))-1]}`);\r\n+    values = rawSeries.map(p => p.users);\r\n+  } else if (interval === 'week') {\r\n+    const weekMap = groupByWeek(rawSeries);\r\n+    const rawWeeks = Object.keys(weekMap).sort();\r\n+    labels = rawWeeks.map(wstr => {\r\n+      const [year, w] = wstr.split('-W');\r\n+      if (year && w) {\r\n+        const weekNum = parseInt(w, 10);\r\n+        const jan1 = new Date(Number(year), 0, 1);\r\n+        const start = new Date(jan1.getTime() + (weekNum - 1) * 7 * 86400000);\r\n+        const dayOfWeek = start.getDay();\r\n+        const weekStart = new Date(start);\r\n+        weekStart.setDate(start.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));\r\n+        const weekEnd = new Date(weekStart);\r\n+        weekEnd.setDate(weekStart.getDate() + 6);\r\n+        const mAbbr = months[weekStart.getMonth()];\r\n+        return `${mAbbr} (${weekStart.getDate()}-${weekEnd.getDate()})`;\r\n+      }\r\n+      return wstr;\r\n+    });\r\n+    values = rawWeeks.map(w => weekMap[w]);\r\n+  } else if (interval === 'month') {\r\n+    const monthMap = groupByMonth(rawSeries);\r\n+    const rawMonths = Object.keys(monthMap).sort();\r\n+    labels = rawMonths.map(mstr => {\r\n+      if (mstr.length === 6) {\r\n+        const y = mstr.slice(0,4);\r\n+        const m = months[Number(mstr.slice(4,6))-1];\r\n+        return `${m} ${y}`;\r\n+      }\r\n+      return mstr;\r\n+    });\r\n+    values = rawMonths.map(m => monthMap[m]);\r\n+  }\r\n+\r\n+  const data = {\r\n+    labels,\r\n+    datasets: [{\r\n+      label: 'Visitors',\r\n+      data: values,\r\n+      borderColor: '#4b5563',\r\n+      backgroundColor: 'rgba(75, 85, 99, 0.1)',\r\n+      pointBackgroundColor: '#4b5563',\r\n+      fill: true,\r\n+      tension: 0.3,\r\n+    }]\r\n+  };\r\n+\r\n+  const options = {\r\n+    responsive: true,\r\n+    maintainAspectRatio: false,\r\n+    plugins: { \r\n+      legend: { display: false },\r\n+      tooltip: {\r\n+        callbacks: {\r\n+          label: ctx => `${ctx.parsed.y} visitors`,\r\n+        }\r\n+      }\r\n+    },\r\n+    scales: {\r\n+      x: { grid: { display: false } },\r\n+      y: { beginAtZero: true, grid: { color: 'rgba(0,0,0,0.05)' } }\r\n+    }\r\n+  };\r\n+\r\n+  let intervalLabel = 'Last 14 days (daily view)';\r\n+  if (interval === 'week') intervalLabel = `Last ${labels.length} weeks (weekly view)`;\r\n+  if (interval === 'month') intervalLabel = `Last ${labels.length} months (monthly view)`;\r\n+\r\n+  return (\r\n+    <div className=\"bg-white shadow-md rounded-lg p-6\">\r\n+      <div className=\"flex justify-between items-center mb-4\">\r\n+        <h2 className=\"text-xl font-semibold text-blue-600\">Website Visitors</h2>\r\n+        <div className=\"flex gap-2\">\r\n+          <button onClick={() => setInterval('day')} className={`px-3 py-1 text-sm rounded ${interval === 'day' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n+            Daily\r\n+          </button>\r\n+          <button onClick={() => setInterval('week')} className={`px-3 py-1 text-sm rounded ${interval === 'week' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n+            Weekly\r\n+          </button>\r\n+          <button onClick={() => setInterval('month')} className={`px-3 py-1 text-sm rounded ${interval === 'month' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n+            Monthly\r\n+          </button>\r\n+        </div>\r\n+      </div>\r\n+      {loading && <p className=\"text-gray-500\">Loading analytics...</p>}\r\n+      {error && <p className=\"text-red-500\">Error: {error}</p>}\r\n+      {!loading && !error && (\r\n+        <div>\r\n+          <div className=\"text-2xl font-bold text-gray-700\">{total.toLocaleString()}</div>\r\n+          <p className=\"text-sm text-gray-600\">{intervalLabel}; Total: 30 days</p>\r\n+          <div className=\"w-full mt-4 bg-white rounded-lg p-2\" style={{ height: '280px' }}>\r\n+            <Line data={data} options={options} />\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1760684443381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,163 @@\n+import { useEffect, useState } from 'react';\r\n+import { Line } from 'react-chartjs-2';\r\n+import { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\r\n+Chart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\r\n+\r\n+function groupByWeek(daily) {\r\n+  // Group daily data into weeks\r\n+  const weekMap = {};\r\n+  daily.forEach(d => {\r\n+    if (!d.date) return;\r\n+    const dt = new Date(d.date.slice(0,4), Number(d.date.slice(4,6))-1, Number(d.date.slice(6,8)));\r\n+    const year = dt.getFullYear();\r\n+    const onejan = new Date(year, 0, 1);\r\n+    const week = Math.ceil((((dt - onejan) / 86400000) + onejan.getDay()+1)/7);\r\n+    const key = `${year}-W${week}`;\r\n+    weekMap[key] = (weekMap[key] || 0) + d.users;\r\n+  });\r\n+  return weekMap;\r\n+}\r\n+\r\n+function groupByMonth(daily) {\r\n+  const monthMap = {};\r\n+  daily.forEach(d => {\r\n+    if (!d.date) return;\r\n+    const key = d.date.slice(0,6); // YYYYMM\r\n+    monthMap[key] = (monthMap[key] || 0) + d.users;\r\n+  });\r\n+  return monthMap;\r\n+}\r\n+\r\n+export default function VisitorsCard() {\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState('');\r\n+  const [total, setTotal] = useState(0);\r\n+  const [rawSeries, setRawSeries] = useState([]);\r\n+  const [interval, setInterval] = useState('week'); // 'day' | 'week' | 'month'\r\n+\r\n+  useEffect(() => {\r\n+    let mounted = true;\r\n+    (async () => {\r\n+      try {\r\n+        const resp = await fetch('/api/analytics-visitors');\r\n+        const data = await resp.json();\r\n+        if (!mounted) return;\r\n+        if (resp.ok && data.success) {\r\n+          setTotal(data.totalUsers || 0);\r\n+          setRawSeries(data.daily || []);\r\n+        } else {\r\n+          setError(data.error || 'Failed to fetch');\r\n+        }\r\n+      } catch (e) {\r\n+        if (mounted) setError(e.message || 'Failed to fetch');\r\n+      } finally {\r\n+        if (mounted) setLoading(false);\r\n+      }\r\n+    })();\r\n+    return () => { mounted = false; };\r\n+  }, []);\r\n+\r\n+  let labels = [], values = [];\r\n+  const months = ['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'];\r\n+\r\n+  if (interval === 'day') {\r\n+    labels = rawSeries.map(p => `${p.date?.slice(6,8)}${months[Number(p.date?.slice(4,6))-1]}`);\r\n+    values = rawSeries.map(p => p.users);\r\n+  } else if (interval === 'week') {\r\n+    const weekMap = groupByWeek(rawSeries);\r\n+    const rawWeeks = Object.keys(weekMap).sort();\r\n+    labels = rawWeeks.map(wstr => {\r\n+      const [year, w] = wstr.split('-W');\r\n+      if (year && w) {\r\n+        const weekNum = parseInt(w, 10);\r\n+        const jan1 = new Date(Number(year), 0, 1);\r\n+        const start = new Date(jan1.getTime() + (weekNum - 1) * 7 * 86400000);\r\n+        const dayOfWeek = start.getDay();\r\n+        const weekStart = new Date(start);\r\n+        weekStart.setDate(start.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));\r\n+        const weekEnd = new Date(weekStart);\r\n+        weekEnd.setDate(weekStart.getDate() + 6);\r\n+        const mAbbr = months[weekStart.getMonth()];\r\n+        return `${mAbbr} (${weekStart.getDate()}-${weekEnd.getDate()})`;\r\n+      }\r\n+      return wstr;\r\n+    });\r\n+    values = rawWeeks.map(w => weekMap[w]);\r\n+  } else if (interval === 'month') {\r\n+    const monthMap = groupByMonth(rawSeries);\r\n+    const rawMonths = Object.keys(monthMap).sort();\r\n+    labels = rawMonths.map(mstr => {\r\n+      if (mstr.length === 6) {\r\n+        const y = mstr.slice(0,4);\r\n+        const m = months[Number(mstr.slice(4,6))-1];\r\n+        return `${m} ${y}`;\r\n+      }\r\n+      return mstr;\r\n+    });\r\n+    values = rawMonths.map(m => monthMap[m]);\r\n+  }\r\n+\r\n+  const data = {\r\n+    labels,\r\n+    datasets: [{\r\n+      label: 'Visitors',\r\n+      data: values,\r\n+      borderColor: '#4b5563',\r\n+      backgroundColor: 'rgba(75, 85, 99, 0.1)',\r\n+      pointBackgroundColor: '#4b5563',\r\n+      fill: true,\r\n+      tension: 0.3,\r\n+    }]\r\n+  };\r\n+\r\n+  const options = {\r\n+    responsive: true,\r\n+    maintainAspectRatio: false,\r\n+    plugins: { \r\n+      legend: { display: false },\r\n+      tooltip: {\r\n+        callbacks: {\r\n+          label: ctx => `${ctx.parsed.y} visitors`,\r\n+        }\r\n+      }\r\n+    },\r\n+    scales: {\r\n+      x: { grid: { display: false } },\r\n+      y: { beginAtZero: true, grid: { color: 'rgba(0,0,0,0.05)' } }\r\n+    }\r\n+  };\r\n+\r\n+  let intervalLabel = 'Last 14 days (daily view)';\r\n+  if (interval === 'week') intervalLabel = `Last ${labels.length} weeks (weekly view)`;\r\n+  if (interval === 'month') intervalLabel = `Last ${labels.length} months (monthly view)`;\r\n+\r\n+  return (\r\n+    <div className=\"bg-white shadow-md rounded-lg p-6\">\r\n+      <div className=\"flex justify-between items-center mb-4\">\r\n+        <h2 className=\"text-xl font-semibold\" style={{ color: '#2563eb' }}>Website Visitors</h2>\r\n+        <div className=\"flex gap-2\">\r\n+          <button onClick={() => setInterval('day')} className={`px-3 py-1 text-sm rounded ${interval === 'day' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n+            Daily\r\n+          </button>\r\n+          <button onClick={() => setInterval('week')} className={`px-3 py-1 text-sm rounded ${interval === 'week' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n+            Weekly\r\n+          </button>\r\n+          <button onClick={() => setInterval('month')} className={`px-3 py-1 text-sm rounded ${interval === 'month' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}>\r\n+            Monthly\r\n+          </button>\r\n+        </div>\r\n+      </div>\r\n+      {loading && <p className=\"text-gray-500\">Loading analytics...</p>}\r\n+      {error && <p className=\"text-red-500\">Error: {error}</p>}\r\n+      {!loading && !error && (\r\n+        <div>\r\n+          <div className=\"text-2xl font-bold text-gray-700\">{total.toLocaleString()}</div>\r\n+          <p className=\"text-sm text-gray-600\">{intervalLabel}; Total: 30 days</p>\r\n+          <div className=\"w-full mt-4 bg-white rounded-lg p-2\" style={{ height: '280px' }}>\r\n+            <Line data={data} options={options} />\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n"
                }
            ],
            "date": 1760682513168,
            "name": "Commit-0",
            "content": "import { useEffect, useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\r\nChart.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\r\n\r\nexport default function VisitorsCard() {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [total, setTotal] = useState(0);\r\n  const [series, setSeries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    (async () => {\r\n      try {\r\n        const resp = await fetch('/api/analytics-visitors');\r\n        const data = await resp.json();\r\n        if (!mounted) return;\r\n        if (resp.ok && data.success) {\r\n          setTotal(data.totalUsers || 0);\r\n          setSeries(data.daily || []);\r\n        } else {\r\n          setError(data.error || 'Failed to fetch');\r\n        }\r\n      } catch (e) {\r\n        if (mounted) setError(e.message || 'Failed to fetch');\r\n      } finally {\r\n        if (mounted) setLoading(false);\r\n      }\r\n    })();\r\n    return () => { mounted = false; };\r\n  }, []);\r\n\r\n  const labels = series.map(p => `${p.date?.slice(6,8)}${['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'][Number(p.date?.slice(4,6))-1]}`);\r\n  const values = series.map(p => p.users);\r\n\r\n  const data = {\r\n    labels,\r\n    datasets: [{\r\n      label: 'Users',\r\n      data: values,\r\n      borderColor: 'rgb(16,185,129)',\r\n      backgroundColor: 'rgba(16,185,129,0.2)',\r\n      pointBackgroundColor: 'rgb(16,185,129)',\r\n      tension: 0.2,\r\n      pointRadius: 3,\r\n      fill: false,\r\n    }]\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    plugins: { legend: { display: false } },\r\n    scales: {\r\n      x: { ticks: { color: '#222' }, title: { display: true, text: 'Date' } },\r\n      y: { ticks: { color: '#222' }, title: { display: true, text: 'Users' }, beginAtZero: true },\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-xl shadow p-6 border border-blue-100 flex flex-col items-center justify-center\">\r\n      <div className=\"text-lg font-semibold mb-2 text-blue-700\">Visitors (GA4)</div>\r\n      {loading ? (\r\n        <div className=\"text-blue-600 font-semibold\">Loading...</div>\r\n      ) : error ? (\r\n        <div className=\"text-red-600 text-sm\">{error}</div>\r\n      ) : (\r\n        <>\r\n          <div className=\"text-3xl font-bold text-blue-900\">{total.toLocaleString()}</div>\r\n          <div className=\"w-full mt-4 bg-white rounded-lg p-2\">\r\n            <Line data={data} options={options} />\r\n          </div>\r\n          <div className=\"text-xs mt-2 text-blue-700/70\">Last 30 days total; 14-day trend</div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}