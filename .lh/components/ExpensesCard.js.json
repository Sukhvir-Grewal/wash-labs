{
    "sourceFile": "components/ExpensesCard.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1760895589501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760895691420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,135 @@\n+import { useEffect, useMemo, useState } from 'react';\r\n+import { Bar } from 'react-chartjs-2';\r\n+import { Chart, CategoryScale, LinearScale, BarElement, Tooltip, Legend } from 'chart.js';\r\n+Chart.register(CategoryScale, LinearScale, BarElement, Tooltip, Legend);\r\n+\r\n+const CATEGORIES = [\r\n+  { key: 'one-time', label: 'Equipment' }, // one-time purchases like vacuum\r\n+  { key: 'chemicals', label: 'Chemicals' },\r\n+  { key: 'other', label: 'Other' },\r\n+];\r\n+\r\n+export default function ExpensesCard() {\r\n+  const [items, setItems] = useState([]);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState('');\r\n+  const [form, setForm] = useState({ date: '', amount: '', category: 'one-time', note: '' });\r\n+  const [submitting, setSubmitting] = useState(false);\r\n+\r\n+  async function load() {\r\n+    setLoading(true);\r\n+    try {\r\n+      const res = await fetch('/api/expenses');\r\n+      const data = await res.json();\r\n+      if (res.ok && data.success) setItems(data.items || []);\r\n+      else setError(data.error || 'Failed to load expenses');\r\n+    } catch (e) {\r\n+      setError(e.message || 'Failed to load expenses');\r\n+    } finally { setLoading(false); }\r\n+  }\r\n+\r\n+  useEffect(() => { load(); }, []);\r\n+\r\n+  async function addExpense(e) {\r\n+    e.preventDefault();\r\n+    setSubmitting(true);\r\n+    setError('');\r\n+    try {\r\n+      const body = { ...form, amount: Number(form.amount) };\r\n+      const res = await fetch('/api/expenses', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body) });\r\n+      const data = await res.json();\r\n+      if (res.ok && data.success) {\r\n+        setItems(prev => [data.item, ...prev]);\r\n+        setForm({ date: '', amount: '', category: form.category, note: '' });\r\n+      } else setError(data.error || 'Failed to add');\r\n+    } catch (e) { setError(e.message || 'Failed to add'); }\r\n+    setSubmitting(false);\r\n+  }\r\n+\r\n+  const monthly = useMemo(() => {\r\n+    const map = {};\r\n+    for (const it of items) {\r\n+      const key = (it.date || '').slice(0,7); // YYYY-MM\r\n+      const cat = it.category || 'other';\r\n+      if (!map[key]) map[key] = { total: 0, byCat: { 'one-time': 0, 'chemicals': 0, 'other': 0 } };\r\n+      map[key].total += Number(it.amount || 0);\r\n+      map[key].byCat[cat] += Number(it.amount || 0);\r\n+    }\r\n+    const keys = Object.keys(map).sort();\r\n+    return { keys, map };\r\n+  }, [items]);\r\n+\r\n+  const chartData = useMemo(() => {\r\n+    const labels = monthly.keys;\r\n+    const data = {\r\n+      labels,\r\n+      datasets: [\r\n+        { label: 'Total', data: labels.map(k => monthly.map[k].total), backgroundColor: 'rgba(239,68,68,0.6)' },\r\n+      ],\r\n+    };\r\n+    return data;\r\n+  }, [monthly]);\r\n+\r\n+  const chartOptions = { responsive: true, maintainAspectRatio: false, plugins: { legend: { display: true } } };\r\n+\r\n+  return (\r\n+    <div className=\"bg-white rounded-xl shadow p-6 border border-blue-100\">\r\n+      <div className=\"flex items-center justify-between mb-4\">\r\n+        <div className=\"text-lg font-semibold text-blue-700\">Expenses</div>\r\n+      </div>\r\n+      {/* Add form */}\r\n+      <form onSubmit={addExpense} className=\"grid grid-cols-1 md:grid-cols-5 gap-3 items-end\">\r\n+        <div>\r\n+          <label className=\"text-xs text-gray-600\">Date</label>\r\n+          <input\r\n+            type=\"date\"\r\n+            value={form.date}\r\n+            onChange={e => setForm(f => ({ ...f, date: e.target.value }))}\r\n+            className=\"w-full px-3 py-2 rounded border border-blue-200 text-gray-700 focus:text-black placeholder:text-gray-600 caret-black\"\r\n+            required\r\n+          />\r\n+        </div>\r\n+        <div>\r\n+          <label className=\"text-xs text-gray-600\">Amount</label>\r\n+          <input\r\n+            type=\"number\"\r\n+            min=\"0\"\r\n+            step=\"1\"\r\n+            value={form.amount}\r\n+            onChange={e => setForm(f => ({ ...f, amount: e.target.value }))}\r\n+            className=\"w-full px-3 py-2 rounded border border-blue-200 text-gray-700 focus:text-black placeholder:text-gray-600 caret-black\"\r\n+            required\r\n+          />\r\n+        </div>\r\n+        <div>\r\n+          <label className=\"text-xs text-gray-600\">Category</label>\r\n+          <select\r\n+            value={form.category}\r\n+            onChange={e => setForm(f => ({ ...f, category: e.target.value }))}\r\n+            className=\"w-full px-3 py-2 rounded border border-blue-200 text-gray-700 focus:text-black caret-black\"\r\n+          >\r\n+            {CATEGORIES.map(c => <option key={c.key} value={c.key}>{c.label}</option>)}\r\n+          </select>\r\n+        </div>\r\n+        <div className=\"md:col-span-2\">\r\n+          <label className=\"text-xs text-gray-600\">Note</label>\r\n+          <input\r\n+            type=\"text\"\r\n+            value={form.note}\r\n+            onChange={e => setForm(f => ({ ...f, note: e.target.value }))}\r\n+            placeholder=\"Optional\"\r\n+            className=\"w-full px-3 py-2 rounded border border-blue-200 text-gray-700 focus:text-black placeholder:text-gray-600 caret-black\"\r\n+          />\r\n+        </div>\r\n+        <div className=\"md:col-span-5\">\r\n+          <button type=\"submit\" disabled={submitting} className=\"px-4 py-2 rounded bg-blue-600 text-white font-semibold\">{submitting ? 'Adding...' : 'Add Expense'}</button>\r\n+        </div>\r\n+      </form>\r\n+      {error && <div className=\"text-red-600 text-sm mt-2\">{error}</div>}\r\n+      {/* Chart */}\r\n+      <div className=\"w-full mt-4 bg-white rounded-lg p-2\" style={{ height: '240px' }}>\r\n+        <Bar data={chartData} options={chartOptions} />\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1760896222435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,16 @@\n export default function ExpensesCard() {\r\n   const [items, setItems] = useState([]);\r\n   const [loading, setLoading] = useState(true);\r\n   const [error, setError] = useState('');\r\n-  const [form, setForm] = useState({ date: '', amount: '', category: 'one-time', note: '' });\r\n+  const [form, setForm] = useState({\r\n+    date: '',\r\n+    amount: '', // base amount before tax\r\n+    includeTax: false,\r\n+    supplier: '',\r\n+    productName: '',\r\n+    category: 'one-time',\r\n+  });\r\n   const [submitting, setSubmitting] = useState(false);\r\n \r\n   async function load() {\r\n     setLoading(true);\r\n@@ -34,14 +41,26 @@\n     e.preventDefault();\r\n     setSubmitting(true);\r\n     setError('');\r\n     try {\r\n-      const body = { ...form, amount: Number(form.amount) };\r\n+      const base = Number(form.amount || 0);\r\n+      const taxRate = form.includeTax ? 0.15 : 0;\r\n+      const finalAmount = base * (1 + taxRate);\r\n+      const body = {\r\n+        date: form.date,\r\n+        amount: Number(finalAmount.toFixed(2)),\r\n+        baseAmount: Number(base.toFixed(2)),\r\n+        taxIncluded: !!form.includeTax,\r\n+        taxRate,\r\n+        category: form.category,\r\n+        supplier: form.supplier,\r\n+        productName: form.productName,\r\n+      };\r\n       const res = await fetch('/api/expenses', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body) });\r\n       const data = await res.json();\r\n       if (res.ok && data.success) {\r\n         setItems(prev => [data.item, ...prev]);\r\n-        setForm({ date: '', amount: '', category: form.category, note: '' });\r\n+        setForm({ date: '', amount: '', includeTax: form.includeTax, supplier: '', productName: '', category: form.category });\r\n       } else setError(data.error || 'Failed to add');\r\n     } catch (e) { setError(e.message || 'Failed to add'); }\r\n     setSubmitting(false);\r\n   }\r\n@@ -77,10 +96,10 @@\n       <div className=\"flex items-center justify-between mb-4\">\r\n         <div className=\"text-lg font-semibold text-blue-700\">Expenses</div>\r\n       </div>\r\n       {/* Add form */}\r\n-      <form onSubmit={addExpense} className=\"grid grid-cols-1 md:grid-cols-5 gap-3 items-end\">\r\n-        <div>\r\n+      <form onSubmit={addExpense} className=\"grid grid-cols-1 md:grid-cols-6 gap-3 items-end\">\r\n+        <div className=\"md:col-span-1\">\r\n           <label className=\"text-xs text-gray-600\">Date</label>\r\n           <input\r\n             type=\"date\"\r\n             value={form.date}\r\n@@ -88,21 +107,29 @@\n             className=\"w-full px-3 py-2 rounded border border-blue-200 text-gray-700 focus:text-black placeholder:text-gray-600 caret-black\"\r\n             required\r\n           />\r\n         </div>\r\n-        <div>\r\n-          <label className=\"text-xs text-gray-600\">Amount</label>\r\n+        <div className=\"md:col-span-2\">\r\n+          <label className=\"text-xs text-gray-600\">Product name</label>\r\n           <input\r\n-            type=\"number\"\r\n-            min=\"0\"\r\n-            step=\"1\"\r\n-            value={form.amount}\r\n-            onChange={e => setForm(f => ({ ...f, amount: e.target.value }))}\r\n+            type=\"text\"\r\n+            value={form.productName}\r\n+            onChange={e => setForm(f => ({ ...f, productName: e.target.value }))}\r\n+            placeholder=\"e.g., Vacuum, Foam Cannon\"\r\n             className=\"w-full px-3 py-2 rounded border border-blue-200 text-gray-700 focus:text-black placeholder:text-gray-600 caret-black\"\r\n-            required\r\n           />\r\n         </div>\r\n-        <div>\r\n+        <div className=\"md:col-span-2\">\r\n+          <label className=\"text-xs text-gray-600\">Supplier</label>\r\n+          <input\r\n+            type=\"text\"\r\n+            value={form.supplier}\r\n+            onChange={e => setForm(f => ({ ...f, supplier: e.target.value }))}\r\n+            placeholder=\"e.g., Canadian Tire\"\r\n+            className=\"w-full px-3 py-2 rounded border border-blue-200 text-gray-700 focus:text-black placeholder:text-gray-600 caret-black\"\r\n+          />\r\n+        </div>\r\n+        <div className=\"md:col-span-1\">\r\n           <label className=\"text-xs text-gray-600\">Category</label>\r\n           <select\r\n             value={form.category}\r\n             onChange={e => setForm(f => ({ ...f, category: e.target.value }))}\r\n@@ -110,130 +137,40 @@\n           >\r\n             {CATEGORIES.map(c => <option key={c.key} value={c.key}>{c.label}</option>)}\r\n           </select>\r\n         </div>\r\n-        <div className=\"md:col-span-2\">\r\n-          <label className=\"text-xs text-gray-600\">Note</label>\r\n-          <input\r\n-            type=\"text\"\r\n-            value={form.note}\r\n-            onChange={e => setForm(f => ({ ...f, note: e.target.value }))}\r\n-            placeholder=\"Optional\"\r\n-            className=\"w-full px-3 py-2 rounded border border-blue-200 text-gray-700 focus:text-black placeholder:text-gray-600 caret-black\"\r\n-          />\r\n-        </div>\r\n-        <div className=\"md:col-span-5\">\r\n-          <button type=\"submit\" disabled={submitting} className=\"px-4 py-2 rounded bg-blue-600 text-white font-semibold\">{submitting ? 'Adding...' : 'Add Expense'}</button>\r\n-        </div>\r\n-      </form>\r\n-      {error && <div className=\"text-red-600 text-sm mt-2\">{error}</div>}\r\n-      {/* Chart */}\r\n-      <div className=\"w-full mt-4 bg-white rounded-lg p-2\" style={{ height: '240px' }}>\r\n-        <Bar data={chartData} options={chartOptions} />\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-}\r\n-import { useEffect, useMemo, useState } from 'react';\r\n-import { Bar } from 'react-chartjs-2';\r\n-import { Chart, CategoryScale, LinearScale, BarElement, Tooltip, Legend } from 'chart.js';\r\n-Chart.register(CategoryScale, LinearScale, BarElement, Tooltip, Legend);\r\n-\r\n-const CATEGORIES = [\r\n-  { key: 'one-time', label: 'Equipment' }, // one-time purchases like vacuum\r\n-  { key: 'chemicals', label: 'Chemicals' },\r\n-  { key: 'other', label: 'Other' },\r\n-];\r\n-\r\n-export default function ExpensesCard() {\r\n-  const [items, setItems] = useState([]);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState('');\r\n-  const [form, setForm] = useState({ date: '', amount: '', category: 'one-time', note: '' });\r\n-  const [submitting, setSubmitting] = useState(false);\r\n-\r\n-  async function load() {\r\n-    setLoading(true);\r\n-    try {\r\n-      const res = await fetch('/api/expenses');\r\n-      const data = await res.json();\r\n-      if (res.ok && data.success) setItems(data.items || []);\r\n-      else setError(data.error || 'Failed to load expenses');\r\n-    } catch (e) {\r\n-      setError(e.message || 'Failed to load expenses');\r\n-    } finally { setLoading(false); }\r\n-  }\r\n-\r\n-  useEffect(() => { load(); }, []);\r\n-\r\n-  async function addExpense(e) {\r\n-    e.preventDefault();\r\n-    setSubmitting(true);\r\n-    setError('');\r\n-    try {\r\n-      const body = { ...form, amount: Number(form.amount) };\r\n-      const res = await fetch('/api/expenses', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body) });\r\n-      const data = await res.json();\r\n-      if (res.ok && data.success) {\r\n-        setItems(prev => [data.item, ...prev]);\r\n-        setForm({ date: '', amount: '', category: form.category, note: '' });\r\n-      } else setError(data.error || 'Failed to add');\r\n-    } catch (e) { setError(e.message || 'Failed to add'); }\r\n-    setSubmitting(false);\r\n-  }\r\n-\r\n-  const monthly = useMemo(() => {\r\n-    const map = {};\r\n-    for (const it of items) {\r\n-      const key = (it.date || '').slice(0,7); // YYYY-MM\r\n-      const cat = it.category || 'other';\r\n-      if (!map[key]) map[key] = { total: 0, byCat: { 'one-time': 0, 'chemicals': 0, 'other': 0 } };\r\n-      map[key].total += Number(it.amount || 0);\r\n-      map[key].byCat[cat] += Number(it.amount || 0);\r\n-    }\r\n-    const keys = Object.keys(map).sort();\r\n-    return { keys, map };\r\n-  }, [items]);\r\n-\r\n-  const chartData = useMemo(() => {\r\n-    const labels = monthly.keys;\r\n-    const data = {\r\n-      labels,\r\n-      datasets: [\r\n-        { label: 'Total', data: labels.map(k => monthly.map[k].total), backgroundColor: 'rgba(239,68,68,0.6)' },\r\n-      ],\r\n-    };\r\n-    return data;\r\n-  }, [monthly]);\r\n-\r\n-  const chartOptions = { responsive: true, maintainAspectRatio: false, plugins: { legend: { display: true } } };\r\n-\r\n-  return (\r\n-    <div className=\"bg-white rounded-xl shadow p-6 border border-blue-100\">\r\n-      <div className=\"flex items-center justify-between mb-4\">\r\n-        <div className=\"text-lg font-semibold text-blue-700\">Expenses</div>\r\n-      </div>\r\n-      {/* Add form */}\r\n-      <form onSubmit={addExpense} className=\"grid grid-cols-1 md:grid-cols-5 gap-3 items-end\">\r\n-        <div>\r\n-          <label className=\"text-xs text-gray-600\">Date</label>\r\n-          <input type=\"date\" value={form.date} onChange={e => setForm(f => ({ ...f, date: e.target.value }))} className=\"w-full px-3 py-2 rounded border border-blue-200\" required />\r\n-        </div>\r\n-        <div>\r\n+        <div className=\"md:col-span-1\">\r\n           <label className=\"text-xs text-gray-600\">Amount</label>\r\n-          <input type=\"number\" min=\"0\" step=\"1\" value={form.amount} onChange={e => setForm(f => ({ ...f, amount: e.target.value }))} className=\"w-full px-3 py-2 rounded border border-blue-200\" required />\r\n+          <div className=\"relative\">\r\n+            <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-600 pointer-events-none\">$</span>\r\n+            <input\r\n+              type=\"number\"\r\n+              min=\"0\"\r\n+              step=\"0.01\"\r\n+              value={form.amount}\r\n+              onChange={e => setForm(f => ({ ...f, amount: e.target.value }))}\r\n+              className=\"w-full pl-6 pr-3 py-2 rounded border border-blue-200 text-gray-700 focus:text-black placeholder:text-gray-600 caret-black\"\r\n+              placeholder=\"0.00\"\r\n+              required\r\n+            />\r\n+          </div>\r\n+          <div className=\"mt-2\">\r\n+            <label className=\"inline-flex items-center gap-2 text-sm text-gray-700\">\r\n+              <input\r\n+                type=\"checkbox\"\r\n+                checked={form.includeTax}\r\n+                onChange={e => setForm(f => ({ ...f, includeTax: e.target.checked }))}\r\n+              />\r\n+              Include NS tax (15%)\r\n+            </label>\r\n+            {form.amount !== '' && !isNaN(Number(form.amount)) && (\r\n+              <div className=\"text-xs text-gray-600 mt-1\">\r\n+                Total: <span className=\"font-semibold text-gray-900\">${(Number(form.amount) * (form.includeTax ? 1.15 : 1)).toFixed(2)}</span>\r\n+              </div>\r\n+            )}\r\n+          </div>\r\n         </div>\r\n-        <div>\r\n-          <label className=\"text-xs text-gray-600\">Category</label>\r\n-          <select value={form.category} onChange={e => setForm(f => ({ ...f, category: e.target.value }))} className=\"w-full px-3 py-2 rounded border border-blue-200\">\r\n-            {CATEGORIES.map(c => <option key={c.key} value={c.key}>{c.label}</option>)}\r\n-          </select>\r\n-        </div>\r\n-        <div className=\"md:col-span-2\">\r\n-          <label className=\"text-xs text-gray-600\">Note</label>\r\n-          <input type=\"text\" value={form.note} onChange={e => setForm(f => ({ ...f, note: e.target.value }))} placeholder=\"Optional\" className=\"w-full px-3 py-2 rounded border border-blue-200\" />\r\n-        </div>\r\n-        <div className=\"md:col-span-5\">\r\n+        <div className=\"md:col-span-6\">\r\n           <button type=\"submit\" disabled={submitting} className=\"px-4 py-2 rounded bg-blue-600 text-white font-semibold\">{submitting ? 'Adding...' : 'Add Expense'}</button>\r\n         </div>\r\n       </form>\r\n       {error && <div className=\"text-red-600 text-sm mt-2\">{error}</div>}\r\n"
                }
            ],
            "date": 1760895589501,
            "name": "Commit-0",
            "content": "import { useEffect, useMemo, useState } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { Chart, CategoryScale, LinearScale, BarElement, Tooltip, Legend } from 'chart.js';\r\nChart.register(CategoryScale, LinearScale, BarElement, Tooltip, Legend);\r\n\r\nconst CATEGORIES = [\r\n  { key: 'one-time', label: 'Equipment' }, // one-time purchases like vacuum\r\n  { key: 'chemicals', label: 'Chemicals' },\r\n  { key: 'other', label: 'Other' },\r\n];\r\n\r\nexport default function ExpensesCard() {\r\n  const [items, setItems] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [form, setForm] = useState({ date: '', amount: '', category: 'one-time', note: '' });\r\n  const [submitting, setSubmitting] = useState(false);\r\n\r\n  async function load() {\r\n    setLoading(true);\r\n    try {\r\n      const res = await fetch('/api/expenses');\r\n      const data = await res.json();\r\n      if (res.ok && data.success) setItems(data.items || []);\r\n      else setError(data.error || 'Failed to load expenses');\r\n    } catch (e) {\r\n      setError(e.message || 'Failed to load expenses');\r\n    } finally { setLoading(false); }\r\n  }\r\n\r\n  useEffect(() => { load(); }, []);\r\n\r\n  async function addExpense(e) {\r\n    e.preventDefault();\r\n    setSubmitting(true);\r\n    setError('');\r\n    try {\r\n      const body = { ...form, amount: Number(form.amount) };\r\n      const res = await fetch('/api/expenses', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body) });\r\n      const data = await res.json();\r\n      if (res.ok && data.success) {\r\n        setItems(prev => [data.item, ...prev]);\r\n        setForm({ date: '', amount: '', category: form.category, note: '' });\r\n      } else setError(data.error || 'Failed to add');\r\n    } catch (e) { setError(e.message || 'Failed to add'); }\r\n    setSubmitting(false);\r\n  }\r\n\r\n  const monthly = useMemo(() => {\r\n    const map = {};\r\n    for (const it of items) {\r\n      const key = (it.date || '').slice(0,7); // YYYY-MM\r\n      const cat = it.category || 'other';\r\n      if (!map[key]) map[key] = { total: 0, byCat: { 'one-time': 0, 'chemicals': 0, 'other': 0 } };\r\n      map[key].total += Number(it.amount || 0);\r\n      map[key].byCat[cat] += Number(it.amount || 0);\r\n    }\r\n    const keys = Object.keys(map).sort();\r\n    return { keys, map };\r\n  }, [items]);\r\n\r\n  const chartData = useMemo(() => {\r\n    const labels = monthly.keys;\r\n    const data = {\r\n      labels,\r\n      datasets: [\r\n        { label: 'Total', data: labels.map(k => monthly.map[k].total), backgroundColor: 'rgba(239,68,68,0.6)' },\r\n      ],\r\n    };\r\n    return data;\r\n  }, [monthly]);\r\n\r\n  const chartOptions = { responsive: true, maintainAspectRatio: false, plugins: { legend: { display: true } } };\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-xl shadow p-6 border border-blue-100\">\r\n      <div className=\"flex items-center justify-between mb-4\">\r\n        <div className=\"text-lg font-semibold text-blue-700\">Expenses</div>\r\n      </div>\r\n      {/* Add form */}\r\n      <form onSubmit={addExpense} className=\"grid grid-cols-1 md:grid-cols-5 gap-3 items-end\">\r\n        <div>\r\n          <label className=\"text-xs text-gray-600\">Date</label>\r\n          <input type=\"date\" value={form.date} onChange={e => setForm(f => ({ ...f, date: e.target.value }))} className=\"w-full px-3 py-2 rounded border border-blue-200\" required />\r\n        </div>\r\n        <div>\r\n          <label className=\"text-xs text-gray-600\">Amount</label>\r\n          <input type=\"number\" min=\"0\" step=\"1\" value={form.amount} onChange={e => setForm(f => ({ ...f, amount: e.target.value }))} className=\"w-full px-3 py-2 rounded border border-blue-200\" required />\r\n        </div>\r\n        <div>\r\n          <label className=\"text-xs text-gray-600\">Category</label>\r\n          <select value={form.category} onChange={e => setForm(f => ({ ...f, category: e.target.value }))} className=\"w-full px-3 py-2 rounded border border-blue-200\">\r\n            {CATEGORIES.map(c => <option key={c.key} value={c.key}>{c.label}</option>)}\r\n          </select>\r\n        </div>\r\n        <div className=\"md:col-span-2\">\r\n          <label className=\"text-xs text-gray-600\">Note</label>\r\n          <input type=\"text\" value={form.note} onChange={e => setForm(f => ({ ...f, note: e.target.value }))} placeholder=\"Optional\" className=\"w-full px-3 py-2 rounded border border-blue-200\" />\r\n        </div>\r\n        <div className=\"md:col-span-5\">\r\n          <button type=\"submit\" disabled={submitting} className=\"px-4 py-2 rounded bg-blue-600 text-white font-semibold\">{submitting ? 'Adding...' : 'Add Expense'}</button>\r\n        </div>\r\n      </form>\r\n      {error && <div className=\"text-red-600 text-sm mt-2\">{error}</div>}\r\n      {/* Chart */}\r\n      <div className=\"w-full mt-4 bg-white rounded-lg p-2\" style={{ height: '240px' }}>\r\n        <Bar data={chartData} options={chartOptions} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}