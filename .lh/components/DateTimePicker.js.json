{
    "sourceFile": "components/DateTimePicker.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1757948679742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757948984464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,143 @@\n+\"use client\";\r\n+import { motion } from \"framer-motion\";\r\n+import { DayPicker } from \"react-day-picker\";\r\n+import \"react-day-picker/dist/style.css\";\r\n+import { isAfter, startOfToday, isWeekend } from \"date-fns\";\r\n+import { useState } from \"react\";\r\n+\r\n+export default function DateTimePicker({ dateTime, setDateTime, onNext, onBack }) {\r\n+    const today = startOfToday();\r\n+    const [selectedDay, setSelectedDay] = useState(dateTime.date ? new Date(dateTime.date) : undefined);\r\n+    const [selectedTime, setSelectedTime] = useState(dateTime.time || \"\");\r\n+\r\n+    // Generate times between 7 AM - 7 PM\r\n+    const times = [];\r\n+    for (let h = 7; h <= 19; h++) {\r\n+        const ampm = h < 12 ? \"AM\" : \"PM\";\r\n+        const hour = h % 12 === 0 ? 12 : h % 12;\r\n+        times.push(`${hour}:00 ${ampm}`);\r\n+        times.push(`${hour}:30 ${ampm}`);\r\n+    }\r\n+\r\n+    const isValid = selectedDay && selectedTime;\r\n+\r\n+    const handleNext = () => {\r\n+        if (isValid) {\r\n+            setDateTime({\r\n+                date: selectedDay.toISOString().split(\"T\")[0],\r\n+                time: selectedTime,\r\n+            });\r\n+            onNext({\r\n+                date: selectedDay.toISOString().split(\"T\")[0],\r\n+                time: selectedTime,\r\n+            });\r\n+        }\r\n+    };\r\n+\r\n+    return (\r\n+        <motion.div\r\n+            key=\"date-time-step\"\r\n+            initial={{ opacity: 0, x: 50 }}\r\n+            animate={{ opacity: 1, x: 0 }}\r\n+            exit={{ opacity: 0, x: -50 }}\r\n+            transition={{ duration: 0.4 }}\r\n+            className=\"space-y-6\"\r\n+        >\r\n+            {/* Calendar */}\r\n+            <div>\r\n+                <label className=\"block text-sm mb-2\">Select Date</label>\r\n+                <DayPicker\r\n+                    mode=\"single\"\r\n+                    selected={selectedDay}\r\n+                    onSelect={setSelectedDay}\r\n+                    disabled={(date) =>\r\n+                        !isWeekend(date) || !isAfter(date, today) && date.toDateString() !== today.toDateString()\r\n+                    }\r\n+                    modifiers={{\r\n+                        weekend: (date) => isWeekend(date),\r\n+                    }}\r\n+                    modifiersStyles={{\r\n+                        weekend: {\r\n+                            border: \"2px solid #f97316\", // orange outline\r\n+                            borderRadius: \"8px\",\r\n+                        },\r\n+                        selected: {\r\n+                            backgroundColor: \"#f97316\",\r\n+                            color: \"white\",\r\n+                        },\r\n+                    }}\r\n+                />\r\n+            </div>\r\n+\r\n+            {/* Time Picker */}\r\n+            <div>\r\n+                <label className=\"block text-sm mb-2\">Select Time</label>\r\n+                <input\r\n+                    type=\"time\"\r\n+                    min=\"07:00\"\r\n+                    max=\"19:00\"\r\n+                    step=\"1800\" // every 30 mins\r\n+                    value={selectedTime ? convertTo24Hour(selectedTime) : \"\"}\r\n+                    onChange={(e) => setSelectedTime(convertTo12Hour(e.target.value))}\r\n+                    className=\"block w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none sm:hidden\"\r\n+                />\r\n+\r\n+                <select\r\n+                    value={selectedTime}\r\n+                    onChange={(e) => setSelectedTime(e.target.value)}\r\n+                    className=\"hidden sm:block w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none\"\r\n+                >\r\n+                    <option value=\"\">-- Select Time --</option>\r\n+                    {times.map((t) => (\r\n+                        <option key={t} value={t}>{t}</option>\r\n+                    ))}\r\n+                </select>\r\n+            </div>\r\n+\r\n+            {/* Buttons */}\r\n+            <div className=\"flex justify-between\">\r\n+                <button\r\n+                    type=\"button\"\r\n+                    onClick={onBack}\r\n+                    className=\"py-3 px-6 rounded-lg bg-gray-700 hover:bg-gray-600 font-semibold transition\"\r\n+                >\r\n+                    Back\r\n+                </button>\r\n+\r\n+                <button\r\n+                    type=\"button\"\r\n+                    disabled={!isValid}\r\n+                    onClick={handleNext}\r\n+                    className={`py-3 px-6 rounded-lg font-semibold transition ${\r\n+                        isValid\r\n+                            ? \"bg-orange-500 hover:bg-orange-600\"\r\n+                            : \"bg-gray-600 cursor-not-allowed\"\r\n+                    }`}\r\n+                >\r\n+                    Next\r\n+                </button>\r\n+            </div>\r\n+        </motion.div>\r\n+    );\r\n+}\r\n+\r\n+// Helpers to handle iPhone time input conversion\r\n+function convertTo12Hour(time24) {\r\n+    let [hour, minute] = time24.split(\":\");\r\n+    hour = parseInt(hour, 10);\r\n+    const ampm = hour >= 12 ? \"PM\" : \"AM\";\r\n+    hour = hour % 12 || 12;\r\n+    return `${hour}:${minute} ${ampm}`;\r\n+}\r\n+\r\n+function convertTo24Hour(time12) {\r\n+    const [time, modifier] = time12.split(\" \");\r\n+    let [hours, minutes] = time.split(\":\");\r\n+    if (modifier === \"PM\" && hours !== \"12\") {\r\n+        hours = String(parseInt(hours, 10) + 12);\r\n+    }\r\n+    if (modifier === \"AM\" && hours === \"12\") {\r\n+        hours = \"00\";\r\n+    }\r\n+    return `${hours.padStart(2, \"0\")}:${minutes}`;\r\n+}\r\n"
                },
                {
                    "date": 1757949407906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,217 +1,23 @@\n-\"use client\";\r\n-import { motion } from \"framer-motion\";\r\n-import { DayPicker } from \"react-day-picker\";\r\n-import \"react-day-picker/dist/style.css\";\r\n-import { isAfter, startOfToday, isWeekend } from \"date-fns\";\r\n-import { useState } from \"react\";\r\n-\r\n-export default function DateTimePicker({ dateTime, setDateTime, onNext, onBack }) {\r\n-    const today = startOfToday();\r\n-    const [selectedDay, setSelectedDay] = useState(dateTime.date ? new Date(dateTime.date) : undefined);\r\n-    const [selectedTime, setSelectedTime] = useState(dateTime.time || \"\");\r\n-\r\n-    // Generate times between 7 AM - 7 PM\r\n-    const times = [];\r\n-    for (let h = 7; h <= 19; h++) {\r\n-        const ampm = h < 12 ? \"AM\" : \"PM\";\r\n-        const hour = h % 12 === 0 ? 12 : h % 12;\r\n-        times.push(`${hour}:00 ${ampm}`);\r\n-        times.push(`${hour}:30 ${ampm}`);\r\n-    }\r\n-\r\n-    const isValid = selectedDay && selectedTime;\r\n-\r\n-    const handleNext = () => {\r\n-        if (isValid) {\r\n-            setDateTime({\r\n-                date: selectedDay.toISOString().split(\"T\")[0],\r\n-                time: selectedTime,\r\n-            });\r\n-            onNext({\r\n-                date: selectedDay.toISOString().split(\"T\")[0],\r\n-                time: selectedTime,\r\n-            });\r\n-        }\r\n-    };\r\n-\r\n-    return (\r\n-        <motion.div\r\n-            key=\"date-time-step\"\r\n-            initial={{ opacity: 0, x: 50 }}\r\n-            animate={{ opacity: 1, x: 0 }}\r\n-            exit={{ opacity: 0, x: -50 }}\r\n-            transition={{ duration: 0.4 }}\r\n-            className=\"space-y-6\"\r\n-        >\r\n-            {/* Calendar */}\r\n-            <div>\r\n-                <label className=\"block text-sm mb-2\">Select Date</label>\r\n-                <DayPicker\r\n-                    mode=\"single\"\r\n-                    selected={selectedDay}\r\n-                    onSelect={setSelectedDay}\r\n-                    disabled={(date) =>\r\n-                        !isWeekend(date) || !isAfter(date, today) && date.toDateString() !== today.toDateString()\r\n-                    }\r\n-                    modifiers={{\r\n-                        weekend: (date) => isWeekend(date),\r\n-                    }}\r\n-                    modifiersStyles={{\r\n-                        weekend: {\r\n-                            border: \"2px solid #f97316\", // orange outline\r\n-                            borderRadius: \"8px\",\r\n-                        },\r\n-                        selected: {\r\n-                            backgroundColor: \"#f97316\",\r\n-                            color: \"white\",\r\n-                        },\r\n-                    }}\r\n-                />\r\n-            </div>\r\n-\r\n-            {/* Time Picker */}\r\n-            <div>\r\n-                <label className=\"block text-sm mb-2\">Select Time</label>\r\n-                <input\r\n-                    type=\"time\"\r\n-                    min=\"07:00\"\r\n-                    max=\"19:00\"\r\n-                    step=\"1800\" // every 30 mins\r\n-                    value={selectedTime ? convertTo24Hour(selectedTime) : \"\"}\r\n-                    onChange={(e) => setSelectedTime(convertTo12Hour(e.target.value))}\r\n-                    className=\"block w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none sm:hidden\"\r\n-                />\r\n-\r\n-                <select\r\n-                    value={selectedTime}\r\n-                    onChange={(e) => setSelectedTime(e.target.value)}\r\n-                    className=\"hidden sm:block w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none\"\r\n-                >\r\n-                    <option value=\"\">-- Select Time --</option>\r\n-                    {times.map((t) => (\r\n-                        <option key={t} value={t}>{t}</option>\r\n-                    ))}\r\n-                </select>\r\n-            </div>\r\n-\r\n-            {/* Buttons */}\r\n-            <div className=\"flex justify-between\">\r\n-                <button\r\n-                    type=\"button\"\r\n-                    onClick={onBack}\r\n-                    className=\"py-3 px-6 rounded-lg bg-gray-700 hover:bg-gray-600 font-semibold transition\"\r\n-                >\r\n-                    Back\r\n-                </button>\r\n-\r\n-                <button\r\n-                    type=\"button\"\r\n-                    disabled={!isValid}\r\n-                    onClick={handleNext}\r\n-                    className={`py-3 px-6 rounded-lg font-semibold transition ${\r\n-                        isValid\r\n-                            ? \"bg-orange-500 hover:bg-orange-600\"\r\n-                            : \"bg-gray-600 cursor-not-allowed\"\r\n-                    }`}\r\n-                >\r\n-                    Next\r\n-                </button>\r\n-            </div>\r\n-        </motion.div>\r\n-    );\r\n+.custom-calendar .react-datepicker__day--outside-month {\r\n+  color: #555 !important;\r\n }\r\n \r\n-// Helpers to handle iPhone time input conversion\r\n-function convertTo12Hour(time24) {\r\n-    let [hour, minute] = time24.split(\":\");\r\n-    hour = parseInt(hour, 10);\r\n-    const ampm = hour >= 12 ? \"PM\" : \"AM\";\r\n-    hour = hour % 12 || 12;\r\n-    return `${hour}:${minute} ${ampm}`;\r\n+.custom-calendar .react-datepicker__day {\r\n+  font-weight: normal;\r\n+  color: #aaa;\r\n }\r\n \r\n-function convertTo24Hour(time12) {\r\n-    const [time, modifier] = time12.split(\" \");\r\n-    let [hours, minutes] = time.split(\":\");\r\n-    if (modifier === \"PM\" && hours !== \"12\") {\r\n-        hours = String(parseInt(hours, 10) + 12);\r\n-    }\r\n-    if (modifier === \"AM\" && hours === \"12\") {\r\n-        hours = \"00\";\r\n-    }\r\n-    return `${hours.padStart(2, \"0\")}:${minutes}`;\r\n+/* Available days (Sat, Sun) */\r\n+.custom-calendar .react-datepicker__day--available {\r\n+  font-weight: bold;\r\n+  color: orange !important;\r\n }\r\n-\"use client\";\r\n-import { motion } from \"framer-motion\";\r\n \r\n-export default function DateTimePicker({ dateTime, setDateTime, onNext, onBack }) {\r\n-    const today = new Date().toISOString().split(\"T\")[0]; // disable past dates\r\n-    const times = [\r\n-        \"09:00 AM\", \"10:00 AM\", \"11:00 AM\",\r\n-        \"12:00 PM\", \"01:00 PM\", \"02:00 PM\",\r\n-        \"03:00 PM\", \"04:00 PM\", \"05:00 PM\"\r\n-    ];\r\n-\r\n-    const isValid = dateTime.date && dateTime.time;\r\n-\r\n-    return (\r\n-        <motion.div\r\n-            key=\"date-time-step\"\r\n-            initial={{ opacity: 0, x: 50 }}\r\n-            animate={{ opacity: 1, x: 0 }}\r\n-            exit={{ opacity: 0, x: -50 }}\r\n-            transition={{ duration: 0.4 }}\r\n-            className=\"space-y-4\"\r\n-        >\r\n-            <div>\r\n-                <label className=\"block text-sm mb-1\">Select Date</label>\r\n-                <input\r\n-                    type=\"date\"\r\n-                    min={today}\r\n-                    value={dateTime.date}\r\n-                    onChange={(e) => setDateTime((prev) => ({ ...prev, date: e.target.value }))}\r\n-                    className=\"w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none\"\r\n-                    required\r\n-                />\r\n-            </div>\r\n-\r\n-            <div>\r\n-                <label className=\"block text-sm mb-1\">Select Time</label>\r\n-                <select\r\n-                    value={dateTime.time}\r\n-                    onChange={(e) => setDateTime((prev) => ({ ...prev, time: e.target.value }))}\r\n-                    className=\"w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none\"\r\n-                    required\r\n-                >\r\n-                    <option value=\"\">-- Select Time --</option>\r\n-                    {times.map((t) => (\r\n-                        <option key={t} value={t}>{t}</option>\r\n-                    ))}\r\n-                </select>\r\n-            </div>\r\n-\r\n-            <div className=\"flex justify-between\">\r\n-                <button\r\n-                    type=\"button\"\r\n-                    onClick={onBack}\r\n-                    className=\"py-3 px-6 rounded-lg bg-gray-700 hover:bg-gray-600 font-semibold transition\"\r\n-                >\r\n-                    Back\r\n-                </button>\r\n-\r\n-                <button\r\n-                    type=\"button\"\r\n-                    disabled={!isValid}\r\n-                    onClick={() => onNext(dateTime)}\r\n-                    className={`py-3 px-6 rounded-lg font-semibold transition ${\r\n-                        isValid\r\n-                            ? \"bg-orange-500 hover:bg-orange-600\"\r\n-                            : \"bg-gray-600 cursor-not-allowed\"\r\n-                    }`}\r\n-                >\r\n-                    Next\r\n-                </button>\r\n-            </div>\r\n-        </motion.div>\r\n-    );\r\n+/* Hover and selected */\r\n+.custom-calendar .react-datepicker__day--available:hover,\r\n+.custom-calendar .react-datepicker__day--selected,\r\n+.custom-calendar .react-datepicker__day--keyboard-selected {\r\n+  background-color: orange !important;\r\n+  color: green !important;\r\n+  border-radius: 50% !important;\r\n }\r\n"
                },
                {
                    "date": 1757949416736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,156 @@\n-.custom-calendar .react-datepicker__day--outside-month {\r\n-  color: #555 !important;\r\n-}\r\n+\"use client\";\r\n+import { motion } from \"framer-motion\";\r\n+import { DayPicker } from \"react-day-picker\";\r\n+import \"react-day-picker/dist/style.css\";\r\n+import { isAfter, startOfToday, isWeekend } from \"date-fns\";\r\n+import { useState } from \"react\";\r\n \r\n-.custom-calendar .react-datepicker__day {\r\n-  font-weight: normal;\r\n-  color: #aaa;\r\n+export default function DateTimePicker({\r\n+    dateTime,\r\n+    setDateTime,\r\n+    onNext,\r\n+    onBack,\r\n+}) {\r\n+    const today = startOfToday();\r\n+    const [selectedDay, setSelectedDay] = useState(\r\n+        dateTime.date ? new Date(dateTime.date) : undefined\r\n+    );\r\n+    const [selectedTime, setSelectedTime] = useState(dateTime.time || \"\");\r\n+\r\n+    // Generate times between 7 AM - 7 PM\r\n+    const times = [];\r\n+    for (let h = 7; h <= 19; h++) {\r\n+        const ampm = h < 12 ? \"AM\" : \"PM\";\r\n+        const hour = h % 12 === 0 ? 12 : h % 12;\r\n+        times.push(`${hour}:00 ${ampm}`);\r\n+        times.push(`${hour}:30 ${ampm}`);\r\n+    }\r\n+\r\n+    const isValid = selectedDay && selectedTime;\r\n+\r\n+    const handleNext = () => {\r\n+        if (isValid) {\r\n+            setDateTime({\r\n+                date: selectedDay.toISOString().split(\"T\")[0],\r\n+                time: selectedTime,\r\n+            });\r\n+            onNext({\r\n+                date: selectedDay.toISOString().split(\"T\")[0],\r\n+                time: selectedTime,\r\n+            });\r\n+        }\r\n+    };\r\n+\r\n+    return (\r\n+        <motion.div\r\n+            key=\"date-time-step\"\r\n+            initial={{ opacity: 0, x: 50 }}\r\n+            animate={{ opacity: 1, x: 0 }}\r\n+            exit={{ opacity: 0, x: -50 }}\r\n+            transition={{ duration: 0.4 }}\r\n+            className=\"space-y-6\"\r\n+        >\r\n+            {/* Calendar */}\r\n+            <div>\r\n+                <label className=\"block text-sm mb-2\">Select Date</label>\r\n+                <DayPicker\r\n+                    mode=\"single\"\r\n+                    selected={selectedDay}\r\n+                    onSelect={setSelectedDay}\r\n+                    disabled={(date) =>\r\n+                        !isWeekend(date) ||\r\n+                        (!isAfter(date, today) &&\r\n+                            date.toDateString() !== today.toDateString())\r\n+                    }\r\n+                    modifiers={{\r\n+                        weekend: (date) => isWeekend(date),\r\n+                    }}\r\n+                    modifiersStyles={{\r\n+                        weekend: {\r\n+                            border: \"2px solid #f97316\", // orange outline\r\n+                            borderRadius: \"8px\",\r\n+                        },\r\n+                        selected: {\r\n+                            backgroundColor: \"#f97316\",\r\n+                            color: \"white\",\r\n+                        },\r\n+                    }}\r\n+                />\r\n+            </div>\r\n+\r\n+            {/* Time Picker */}\r\n+            <div>\r\n+                <label className=\"block text-sm mb-2\">Select Time</label>\r\n+                <input\r\n+                    type=\"time\"\r\n+                    min=\"07:00\"\r\n+                    max=\"19:00\"\r\n+                    step=\"1800\" // every 30 mins\r\n+                    value={selectedTime ? convertTo24Hour(selectedTime) : \"\"}\r\n+                    onChange={(e) =>\r\n+                        setSelectedTime(convertTo12Hour(e.target.value))\r\n+                    }\r\n+                    className=\"block w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none sm:hidden\"\r\n+                />\r\n+\r\n+                <select\r\n+                    value={selectedTime}\r\n+                    onChange={(e) => setSelectedTime(e.target.value)}\r\n+                    className=\"hidden sm:block w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none\"\r\n+                >\r\n+                    <option value=\"\">-- Select Time --</option>\r\n+                    {times.map((t) => (\r\n+                        <option key={t} value={t}>\r\n+                            {t}\r\n+                        </option>\r\n+                    ))}\r\n+                </select>\r\n+            </div>\r\n+\r\n+            {/* Buttons */}\r\n+            <div className=\"flex justify-between\">\r\n+                <button\r\n+                    type=\"button\"\r\n+                    onClick={onBack}\r\n+                    className=\"py-3 px-6 rounded-lg bg-gray-700 hover:bg-gray-600 font-semibold transition\"\r\n+                >\r\n+                    Back\r\n+                </button>\r\n+\r\n+                <button\r\n+                    type=\"button\"\r\n+                    disabled={!isValid}\r\n+                    onClick={handleNext}\r\n+                    className={`py-3 px-6 rounded-lg font-semibold transition ${\r\n+                        isValid\r\n+                            ? \"bg-orange-500 hover:bg-orange-600\"\r\n+                            : \"bg-gray-600 cursor-not-allowed\"\r\n+                    }`}\r\n+                >\r\n+                    Next\r\n+                </button>\r\n+            </div>\r\n+        </motion.div>\r\n+    );\r\n }\r\n \r\n-/* Available days (Sat, Sun) */\r\n-.custom-calendar .react-datepicker__day--available {\r\n-  font-weight: bold;\r\n-  color: orange !important;\r\n+// Helpers to handle iPhone time input conversion\r\n+function convertTo12Hour(time24) {\r\n+    let [hour, minute] = time24.split(\":\");\r\n+    hour = parseInt(hour, 10);\r\n+    const ampm = hour >= 12 ? \"PM\" : \"AM\";\r\n+    hour = hour % 12 || 12;\r\n+    return `${hour}:${minute} ${ampm}`;\r\n }\r\n \r\n-/* Hover and selected */\r\n-.custom-calendar .react-datepicker__day--available:hover,\r\n-.custom-calendar .react-datepicker__day--selected,\r\n-.custom-calendar .react-datepicker__day--keyboard-selected {\r\n-  background-color: orange !important;\r\n-  color: green !important;\r\n-  border-radius: 50% !important;\r\n+function convertTo24Hour(time12) {\r\n+    const [time, modifier] = time12.split(\" \");\r\n+    let [hours, minutes] = time.split(\":\");\r\n+    if (modifier === \"PM\" && hours !== \"12\") {\r\n+        hours = String(parseInt(hours, 10) + 12);\r\n+    }\r\n+    if (modifier === \"AM\" && hours === \"12\") {\r\n+        hours = \"00\";\r\n+    }\r\n+    return `${hours.padStart(2, \"0\")}:${minutes}`;\r\n }\r\n"
                },
                {
                    "date": 1757949422157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,156 +1,96 @@\n \"use client\";\r\n-import { motion } from \"framer-motion\";\r\n-import { DayPicker } from \"react-day-picker\";\r\n-import \"react-day-picker/dist/style.css\";\r\n-import { isAfter, startOfToday, isWeekend } from \"date-fns\";\r\n import { useState } from \"react\";\r\n+import DatePicker from \"react-datepicker\";\r\n+import \"react-datepicker/dist/react-datepicker.css\";\r\n \r\n-export default function DateTimePicker({\r\n-    dateTime,\r\n-    setDateTime,\r\n-    onNext,\r\n-    onBack,\r\n-}) {\r\n-    const today = startOfToday();\r\n-    const [selectedDay, setSelectedDay] = useState(\r\n-        dateTime.date ? new Date(dateTime.date) : undefined\r\n-    );\r\n-    const [selectedTime, setSelectedTime] = useState(dateTime.time || \"\");\r\n+// Custom CSS overrides\r\n+import \"./datepicker-custom.css\";\r\n \r\n-    // Generate times between 7 AM - 7 PM\r\n-    const times = [];\r\n-    for (let h = 7; h <= 19; h++) {\r\n-        const ampm = h < 12 ? \"AM\" : \"PM\";\r\n-        const hour = h % 12 === 0 ? 12 : h % 12;\r\n-        times.push(`${hour}:00 ${ampm}`);\r\n-        times.push(`${hour}:30 ${ampm}`);\r\n+export default function DateTimePicker({ onNext, onBack }) {\r\n+  const [date, setDate] = useState(null);\r\n+  const [time, setTime] = useState(\"\");\r\n+\r\n+  const handleContinue = () => {\r\n+    if (date && time) {\r\n+      onNext({ date, time });\r\n     }\r\n+  };\r\n \r\n-    const isValid = selectedDay && selectedTime;\r\n+  // Filter only Saturdays & Sundays and no past dates\r\n+  const isAvailableDate = (date) => {\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+    const day = date.getDay();\r\n+    return date >= today && (day === 0 || day === 6);\r\n+  };\r\n \r\n-    const handleNext = () => {\r\n-        if (isValid) {\r\n-            setDateTime({\r\n-                date: selectedDay.toISOString().split(\"T\")[0],\r\n-                time: selectedTime,\r\n-            });\r\n-            onNext({\r\n-                date: selectedDay.toISOString().split(\"T\")[0],\r\n-                time: selectedTime,\r\n-            });\r\n-        }\r\n-    };\r\n+  // Generate time slots between 7AM - 7PM\r\n+  const generateTimeSlots = () => {\r\n+    const slots = [];\r\n+    for (let hour = 7; hour <= 19; hour++) {\r\n+      slots.push(`${hour}:00`);\r\n+      slots.push(`${hour}:30`);\r\n+    }\r\n+    return slots;\r\n+  };\r\n \r\n-    return (\r\n-        <motion.div\r\n-            key=\"date-time-step\"\r\n-            initial={{ opacity: 0, x: 50 }}\r\n-            animate={{ opacity: 1, x: 0 }}\r\n-            exit={{ opacity: 0, x: -50 }}\r\n-            transition={{ duration: 0.4 }}\r\n-            className=\"space-y-6\"\r\n-        >\r\n-            {/* Calendar */}\r\n-            <div>\r\n-                <label className=\"block text-sm mb-2\">Select Date</label>\r\n-                <DayPicker\r\n-                    mode=\"single\"\r\n-                    selected={selectedDay}\r\n-                    onSelect={setSelectedDay}\r\n-                    disabled={(date) =>\r\n-                        !isWeekend(date) ||\r\n-                        (!isAfter(date, today) &&\r\n-                            date.toDateString() !== today.toDateString())\r\n-                    }\r\n-                    modifiers={{\r\n-                        weekend: (date) => isWeekend(date),\r\n-                    }}\r\n-                    modifiersStyles={{\r\n-                        weekend: {\r\n-                            border: \"2px solid #f97316\", // orange outline\r\n-                            borderRadius: \"8px\",\r\n-                        },\r\n-                        selected: {\r\n-                            backgroundColor: \"#f97316\",\r\n-                            color: \"white\",\r\n-                        },\r\n-                    }}\r\n-                />\r\n-            </div>\r\n+  return (\r\n+    <div className=\"space-y-6\">\r\n+      <h4 className=\"text-lg font-semibold text-orange-400 mb-2\">\r\n+        Select Date & Time\r\n+      </h4>\r\n \r\n-            {/* Time Picker */}\r\n-            <div>\r\n-                <label className=\"block text-sm mb-2\">Select Time</label>\r\n-                <input\r\n-                    type=\"time\"\r\n-                    min=\"07:00\"\r\n-                    max=\"19:00\"\r\n-                    step=\"1800\" // every 30 mins\r\n-                    value={selectedTime ? convertTo24Hour(selectedTime) : \"\"}\r\n-                    onChange={(e) =>\r\n-                        setSelectedTime(convertTo12Hour(e.target.value))\r\n-                    }\r\n-                    className=\"block w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none sm:hidden\"\r\n-                />\r\n+      {/* Calendar */}\r\n+      <div className=\"flex justify-center\">\r\n+        <DatePicker\r\n+          selected={date}\r\n+          onChange={(d) => setDate(d)}\r\n+          inline\r\n+          filterDate={isAvailableDate}\r\n+          calendarClassName=\"custom-calendar\"\r\n+        />\r\n+      </div>\r\n \r\n-                <select\r\n-                    value={selectedTime}\r\n-                    onChange={(e) => setSelectedTime(e.target.value)}\r\n-                    className=\"hidden sm:block w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none\"\r\n-                >\r\n-                    <option value=\"\">-- Select Time --</option>\r\n-                    {times.map((t) => (\r\n-                        <option key={t} value={t}>\r\n-                            {t}\r\n-                        </option>\r\n-                    ))}\r\n-                </select>\r\n-            </div>\r\n+      {/* Time Selection */}\r\n+      <div>\r\n+        <label className=\"block mb-2 font-medium text-gray-300\">Select Time</label>\r\n+        <select\r\n+          value={time}\r\n+          onChange={(e) => setTime(e.target.value)}\r\n+          className=\"w-full p-3 rounded-lg bg-gray-800 border border-gray-700 focus:outline-none focus:ring-2 focus:ring-orange-400\"\r\n+        >\r\n+          <option value=\"\">-- Select Time --</option>\r\n+          {generateTimeSlots().map((slot, i) => (\r\n+            <option key={i} value={slot}>\r\n+              {slot}\r\n+            </option>\r\n+          ))}\r\n+        </select>\r\n+      </div>\r\n \r\n-            {/* Buttons */}\r\n-            <div className=\"flex justify-between\">\r\n-                <button\r\n-                    type=\"button\"\r\n-                    onClick={onBack}\r\n-                    className=\"py-3 px-6 rounded-lg bg-gray-700 hover:bg-gray-600 font-semibold transition\"\r\n-                >\r\n-                    Back\r\n-                </button>\r\n+      {/* Buttons */}\r\n+      <div className=\"flex justify-between\">\r\n+        <button\r\n+          type=\"button\"\r\n+          onClick={onBack}\r\n+          className=\"py-3 px-6 rounded-lg bg-gray-700 hover:bg-gray-600 font-semibold transition\"\r\n+        >\r\n+          Back\r\n+        </button>\r\n \r\n-                <button\r\n-                    type=\"button\"\r\n-                    disabled={!isValid}\r\n-                    onClick={handleNext}\r\n-                    className={`py-3 px-6 rounded-lg font-semibold transition ${\r\n-                        isValid\r\n-                            ? \"bg-orange-500 hover:bg-orange-600\"\r\n-                            : \"bg-gray-600 cursor-not-allowed\"\r\n-                    }`}\r\n-                >\r\n-                    Next\r\n-                </button>\r\n-            </div>\r\n-        </motion.div>\r\n-    );\r\n+        <button\r\n+          type=\"button\"\r\n+          onClick={handleContinue}\r\n+          disabled={!date || !time}\r\n+          className={`py-3 px-6 rounded-lg font-semibold transition ${\r\n+            !date || !time\r\n+              ? \"bg-gray-600 cursor-not-allowed\"\r\n+              : \"bg-orange-500 hover:bg-orange-600\"\r\n+          }`}\r\n+        >\r\n+          Continue\r\n+        </button>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n }\r\n-\r\n-// Helpers to handle iPhone time input conversion\r\n-function convertTo12Hour(time24) {\r\n-    let [hour, minute] = time24.split(\":\");\r\n-    hour = parseInt(hour, 10);\r\n-    const ampm = hour >= 12 ? \"PM\" : \"AM\";\r\n-    hour = hour % 12 || 12;\r\n-    return `${hour}:${minute} ${ampm}`;\r\n-}\r\n-\r\n-function convertTo24Hour(time12) {\r\n-    const [time, modifier] = time12.split(\" \");\r\n-    let [hours, minutes] = time.split(\":\");\r\n-    if (modifier === \"PM\" && hours !== \"12\") {\r\n-        hours = String(parseInt(hours, 10) + 12);\r\n-    }\r\n-    if (modifier === \"AM\" && hours === \"12\") {\r\n-        hours = \"00\";\r\n-    }\r\n-    return `${hours.padStart(2, \"0\")}:${minutes}`;\r\n-}\r\n"
                },
                {
                    "date": 1757949448681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,96 +1,156 @@\n \"use client\";\r\n+import { motion } from \"framer-motion\";\r\n+import { DayPicker } from \"react-day-picker\";\r\n+import \"react-day-picker/dist/style.css\";\r\n+import { isAfter, startOfToday, isWeekend } from \"date-fns\";\r\n import { useState } from \"react\";\r\n-import DatePicker from \"react-datepicker\";\r\n-import \"react-datepicker/dist/react-datepicker.css\";\r\n \r\n-// Custom CSS overrides\r\n-import \"./datepicker-custom.css\";\r\n+export default function DateTimePicker({\r\n+    dateTime,\r\n+    setDateTime,\r\n+    onNext,\r\n+    onBack,\r\n+}) {\r\n+    const today = startOfToday();\r\n+    const [selectedDay, setSelectedDay] = useState(\r\n+        dateTime.date ? new Date(dateTime.date) : undefined\r\n+    );\r\n+    const [selectedTime, setSelectedTime] = useState(dateTime.time || \"\");\r\n \r\n-export default function DateTimePicker({ onNext, onBack }) {\r\n-  const [date, setDate] = useState(null);\r\n-  const [time, setTime] = useState(\"\");\r\n-\r\n-  const handleContinue = () => {\r\n-    if (date && time) {\r\n-      onNext({ date, time });\r\n+    // Generate times between 7 AM - 7 PM\r\n+    const times = [];\r\n+    for (let h = 7; h <= 19; h++) {\r\n+        const ampm = h < 12 ? \"AM\" : \"PM\";\r\n+        const hour = h % 12 === 0 ? 12 : h % 12;\r\n+        times.push(`${hour}:00 ${ampm}`);\r\n+        times.push(`${hour}:30 ${ampm}`);\r\n     }\r\n-  };\r\n \r\n-  // Filter only Saturdays & Sundays and no past dates\r\n-  const isAvailableDate = (date) => {\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-    const day = date.getDay();\r\n-    return date >= today && (day === 0 || day === 6);\r\n-  };\r\n+    const isValid = selectedDay && selectedTime;\r\n \r\n-  // Generate time slots between 7AM - 7PM\r\n-  const generateTimeSlots = () => {\r\n-    const slots = [];\r\n-    for (let hour = 7; hour <= 19; hour++) {\r\n-      slots.push(`${hour}:00`);\r\n-      slots.push(`${hour}:30`);\r\n-    }\r\n-    return slots;\r\n-  };\r\n+    const handleNext = () => {\r\n+        if (isValid) {\r\n+            setDateTime({\r\n+                date: selectedDay.toISOString().split(\"T\")[0],\r\n+                time: selectedTime,\r\n+            });\r\n+            onNext({\r\n+                date: selectedDay.toISOString().split(\"T\")[0],\r\n+                time: selectedTime,\r\n+            });\r\n+        }\r\n+    };\r\n \r\n-  return (\r\n-    <div className=\"space-y-6\">\r\n-      <h4 className=\"text-lg font-semibold text-orange-400 mb-2\">\r\n-        Select Date & Time\r\n-      </h4>\r\n+    return (\r\n+        <motion.div\r\n+            key=\"date-time-step\"\r\n+            initial={{ opacity: 0, x: 50 }}\r\n+            animate={{ opacity: 1, x: 0 }}\r\n+            exit={{ opacity: 0, x: -50 }}\r\n+            transition={{ duration: 0.4 }}\r\n+            className=\"space-y-6\"\r\n+        >\r\n+            {/* Calendar */}\r\n+            <div>\r\n+                <label className=\"block text-sm mb-2\">Select Date</label>\r\n+                <DayPicker\r\n+                    mode=\"single\"\r\n+                    selected={selectedDay}\r\n+                    onSelect={setSelectedDay}\r\n+                    disabled={(date) =>\r\n+                        !isWeekend(date) ||\r\n+                        (!isAfter(date, today) &&\r\n+                            date.toDateString() !== today.toDateString())\r\n+                    }\r\n+                    modifiers={{\r\n+                        weekend: (date) => isWeekend(date),\r\n+                    }}\r\n+                    modifiersStyles={{\r\n+                        weekend: {\r\n+                            border: \"2px solid #f97316\", // orange outline\r\n+                            borderRadius: \"8px\",\r\n+                        },\r\n+                        selected: {\r\n+                            backgroundColor: \"#f97316\",\r\n+                            color: \"white\",\r\n+                        },\r\n+                    }}\r\n+                />\r\n+            </div>\r\n \r\n-      {/* Calendar */}\r\n-      <div className=\"flex justify-center\">\r\n-        <DatePicker\r\n-          selected={date}\r\n-          onChange={(d) => setDate(d)}\r\n-          inline\r\n-          filterDate={isAvailableDate}\r\n-          calendarClassName=\"custom-calendar\"\r\n-        />\r\n-      </div>\r\n+            {/* Time Picker */}\r\n+            <div>\r\n+                <label className=\"block text-sm mb-2\">Select Time</label>\r\n+                <input\r\n+                    type=\"time\"\r\n+                    min=\"07:00\"\r\n+                    max=\"19:00\"\r\n+                    step=\"1800\" // every 30 mins\r\n+                    value={selectedTime ? convertTo24Hour(selectedTime) : \"\"}\r\n+                    onChange={(e) =>\r\n+                        setSelectedTime(convertTo12Hour(e.target.value))\r\n+                    }\r\n+                    className=\"block w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none sm:hidden\"\r\n+                />\r\n \r\n-      {/* Time Selection */}\r\n-      <div>\r\n-        <label className=\"block mb-2 font-medium text-gray-300\">Select Time</label>\r\n-        <select\r\n-          value={time}\r\n-          onChange={(e) => setTime(e.target.value)}\r\n-          className=\"w-full p-3 rounded-lg bg-gray-800 border border-gray-700 focus:outline-none focus:ring-2 focus:ring-orange-400\"\r\n-        >\r\n-          <option value=\"\">-- Select Time --</option>\r\n-          {generateTimeSlots().map((slot, i) => (\r\n-            <option key={i} value={slot}>\r\n-              {slot}\r\n-            </option>\r\n-          ))}\r\n-        </select>\r\n-      </div>\r\n+                <select\r\n+                    value={selectedTime}\r\n+                    onChange={(e) => setSelectedTime(e.target.value)}\r\n+                    className=\"hidden sm:block w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none\"\r\n+                >\r\n+                    <option value=\"\">-- Select Time --</option>\r\n+                    {times.map((t) => (\r\n+                        <option key={t} value={t}>\r\n+                            {t}\r\n+                        </option>\r\n+                    ))}\r\n+                </select>\r\n+            </div>\r\n \r\n-      {/* Buttons */}\r\n-      <div className=\"flex justify-between\">\r\n-        <button\r\n-          type=\"button\"\r\n-          onClick={onBack}\r\n-          className=\"py-3 px-6 rounded-lg bg-gray-700 hover:bg-gray-600 font-semibold transition\"\r\n-        >\r\n-          Back\r\n-        </button>\r\n+            {/* Buttons */}\r\n+            <div className=\"flex justify-between\">\r\n+                <button\r\n+                    type=\"button\"\r\n+                    onClick={onBack}\r\n+                    className=\"py-3 px-6 rounded-lg bg-gray-700 hover:bg-gray-600 font-semibold transition\"\r\n+                >\r\n+                    Back\r\n+                </button>\r\n \r\n-        <button\r\n-          type=\"button\"\r\n-          onClick={handleContinue}\r\n-          disabled={!date || !time}\r\n-          className={`py-3 px-6 rounded-lg font-semibold transition ${\r\n-            !date || !time\r\n-              ? \"bg-gray-600 cursor-not-allowed\"\r\n-              : \"bg-orange-500 hover:bg-orange-600\"\r\n-          }`}\r\n-        >\r\n-          Continue\r\n-        </button>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n+                <button\r\n+                    type=\"button\"\r\n+                    disabled={!isValid}\r\n+                    onClick={handleNext}\r\n+                    className={`py-3 px-6 rounded-lg font-semibold transition ${\r\n+                        isValid\r\n+                            ? \"bg-orange-500 hover:bg-orange-600\"\r\n+                            : \"bg-gray-600 cursor-not-allowed\"\r\n+                    }`}\r\n+                >\r\n+                    Next\r\n+                </button>\r\n+            </div>\r\n+        </motion.div>\r\n+    );\r\n }\r\n+\r\n+// Helpers to handle iPhone time input conversion\r\n+function convertTo12Hour(time24) {\r\n+    let [hour, minute] = time24.split(\":\");\r\n+    hour = parseInt(hour, 10);\r\n+    const ampm = hour >= 12 ? \"PM\" : \"AM\";\r\n+    hour = hour % 12 || 12;\r\n+    return `${hour}:${minute} ${ampm}`;\r\n+}\r\n+\r\n+function convertTo24Hour(time12) {\r\n+    const [time, modifier] = time12.split(\" \");\r\n+    let [hours, minutes] = time.split(\":\");\r\n+    if (modifier === \"PM\" && hours !== \"12\") {\r\n+        hours = String(parseInt(hours, 10) + 12);\r\n+    }\r\n+    if (modifier === \"AM\" && hours === \"12\") {\r\n+        hours = \"00\";\r\n+    }\r\n+    return `${hours.padStart(2, \"0\")}:${minutes}`;\r\n+}\r\n"
                },
                {
                    "date": 1757949610006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,11 @@\n             className=\"space-y-6\"\r\n         >\r\n             {/* Calendar */}\r\n             <div>\r\n-                <label className=\"block text-sm mb-2\">Select Date</label>\r\n+                <label className=\"block text-sm mb-2 text-gray-300\">\r\n+                    Select Date\r\n+                </label>\r\n                 <DayPicker\r\n                     mode=\"single\"\r\n                     selected={selectedDay}\r\n                     onSelect={setSelectedDay}\r\n@@ -64,36 +66,36 @@\n                     }\r\n                     modifiers={{\r\n                         weekend: (date) => isWeekend(date),\r\n                     }}\r\n-                    modifiersStyles={{\r\n-                        weekend: {\r\n-                            border: \"2px solid #f97316\", // orange outline\r\n-                            borderRadius: \"8px\",\r\n-                        },\r\n-                        selected: {\r\n-                            backgroundColor: \"#f97316\",\r\n-                            color: \"white\",\r\n-                        },\r\n+                    modifiersClassNames={{\r\n+                        weekend: \"text-orange-500 font-bold\",\r\n+                        selected:\r\n+                            \"bg-orange-500 text-green-500 font-bold rounded-full\",\r\n                     }}\r\n                 />\r\n             </div>\r\n \r\n             {/* Time Picker */}\r\n             <div>\r\n-                <label className=\"block text-sm mb-2\">Select Time</label>\r\n+                <label className=\"block text-sm mb-2 text-gray-300\">\r\n+                    Select Time\r\n+                </label>\r\n+\r\n+                {/* Mobile: iPhone-style scroll input */}\r\n                 <input\r\n                     type=\"time\"\r\n                     min=\"07:00\"\r\n                     max=\"19:00\"\r\n-                    step=\"1800\" // every 30 mins\r\n+                    step=\"1800\"\r\n                     value={selectedTime ? convertTo24Hour(selectedTime) : \"\"}\r\n                     onChange={(e) =>\r\n                         setSelectedTime(convertTo12Hour(e.target.value))\r\n                     }\r\n                     className=\"block w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none sm:hidden\"\r\n                 />\r\n \r\n+                {/* Desktop: dropdown */}\r\n                 <select\r\n                     value={selectedTime}\r\n                     onChange={(e) => setSelectedTime(e.target.value)}\r\n                     className=\"hidden sm:block w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none\"\r\n@@ -143,8 +145,9 @@\n     return `${hour}:${minute} ${ampm}`;\r\n }\r\n \r\n function convertTo24Hour(time12) {\r\n+    if (!time12) return \"\";\r\n     const [time, modifier] = time12.split(\" \");\r\n     let [hours, minutes] = time.split(\":\");\r\n     if (modifier === \"PM\" && hours !== \"12\") {\r\n         hours = String(parseInt(hours, 10) + 12);\r\n"
                },
                {
                    "date": 1757949689966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,160 @@\n+\"use client\";\r\n+import { motion } from \"framer-motion\";\r\n+import { DayPicker } from \"react-day-picker\";\r\n+import \"react-day-picker/dist/style.css\";\r\n+import { isAfter, startOfToday, isWeekend } from \"date-fns\";\r\n+import { useState } from \"react\";\r\n+\r\n+export default function DateTimePicker({\r\n+    dateTime,\r\n+    setDateTime,\r\n+    onNext,\r\n+    onBack,\r\n+}) {\r\n+    const today = startOfToday();\r\n+    const [selectedDay, setSelectedDay] = useState(\r\n+        dateTime.date ? new Date(dateTime.date) : undefined\r\n+    );\r\n+    const [selectedTime, setSelectedTime] = useState(dateTime.time || \"\");\r\n+\r\n+    // Generate times between 7 AM - 7 PM\r\n+    const times = [];\r\n+    for (let h = 7; h <= 19; h++) {\r\n+        const ampm = h < 12 ? \"AM\" : \"PM\";\r\n+        const hour = h % 12 === 0 ? 12 : h % 12;\r\n+        times.push(`${hour}:00 ${ampm}`);\r\n+        times.push(`${hour}:30 ${ampm}`);\r\n+    }\r\n+\r\n+    const isValid = selectedDay && selectedTime;\r\n+\r\n+    const handleNext = () => {\r\n+        if (isValid) {\r\n+            setDateTime({\r\n+                date: selectedDay.toISOString().split(\"T\")[0],\r\n+                time: selectedTime,\r\n+            });\r\n+            onNext({\r\n+                date: selectedDay.toISOString().split(\"T\")[0],\r\n+                time: selectedTime,\r\n+            });\r\n+        }\r\n+    };\r\n+\r\n+    return (\r\n+        <motion.div\r\n+            key=\"date-time-step\"\r\n+            initial={{ opacity: 0, x: 50 }}\r\n+            animate={{ opacity: 1, x: 0 }}\r\n+            exit={{ opacity: 0, x: -50 }}\r\n+            transition={{ duration: 0.4 }}\r\n+            className=\"space-y-6\"\r\n+        >\r\n+            {/* Calendar */}\r\n+            <div>\r\n+                <label className=\"block text-sm mb-2 text-gray-300\">\r\n+                    Select Date\r\n+                </label>\r\n+                <DayPicker\r\n+                    mode=\"single\"\r\n+                    selected={selectedDay}\r\n+                    onSelect={setSelectedDay}\r\n+                    disabled={(date) =>\r\n+                        !isWeekend(date) ||\r\n+                        (!isAfter(date, today) &&\r\n+                            date.toDateString() !== today.toDateString())\r\n+                    }\r\n+                    modifiers={{\r\n+                        weekend: (date) => isWeekend(date),\r\n+                    }}\r\n+                    modifiersClassNames={{\r\n+    weekend: \"text-orange-500 font-bold\",\r\n+    selected:\r\n+        \"bg-orange-500 text-green-500 font-bold rounded-full\",\r\n+}}\r\n+\r\n+                />\r\n+            </div>\r\n+\r\n+            {/* Time Picker */}\r\n+            <div>\r\n+                <label className=\"block text-sm mb-2 text-gray-300\">\r\n+                    Select Time\r\n+                </label>\r\n+\r\n+                {/* Mobile: iPhone-style scroll input */}\r\n+                <input\r\n+                    type=\"time\"\r\n+                    min=\"07:00\"\r\n+                    max=\"19:00\"\r\n+                    step=\"1800\"\r\n+                    value={selectedTime ? convertTo24Hour(selectedTime) : \"\"}\r\n+                    onChange={(e) =>\r\n+                        setSelectedTime(convertTo12Hour(e.target.value))\r\n+                    }\r\n+                    className=\"block w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none sm:hidden\"\r\n+                />\r\n+\r\n+                {/* Desktop: dropdown */}\r\n+                <select\r\n+                    value={selectedTime}\r\n+                    onChange={(e) => setSelectedTime(e.target.value)}\r\n+                    className=\"hidden sm:block w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none\"\r\n+                >\r\n+                    <option value=\"\">-- Select Time --</option>\r\n+                    {times.map((t) => (\r\n+                        <option key={t} value={t}>\r\n+                            {t}\r\n+                        </option>\r\n+                    ))}\r\n+                </select>\r\n+            </div>\r\n+\r\n+            {/* Buttons */}\r\n+            <div className=\"flex justify-between\">\r\n+                <button\r\n+                    type=\"button\"\r\n+                    onClick={onBack}\r\n+                    className=\"py-3 px-6 rounded-lg bg-gray-700 hover:bg-gray-600 font-semibold transition\"\r\n+                >\r\n+                    Back\r\n+                </button>\r\n+\r\n+                <button\r\n+                    type=\"button\"\r\n+                    disabled={!isValid}\r\n+                    onClick={handleNext}\r\n+                    className={`py-3 px-6 rounded-lg font-semibold transition ${\r\n+                        isValid\r\n+                            ? \"bg-orange-500 hover:bg-orange-600\"\r\n+                            : \"bg-gray-600 cursor-not-allowed\"\r\n+                    }`}\r\n+                >\r\n+                    Next\r\n+                </button>\r\n+            </div>\r\n+        </motion.div>\r\n+    );\r\n+}\r\n+\r\n+// Helpers to handle iPhone time input conversion\r\n+function convertTo12Hour(time24) {\r\n+    let [hour, minute] = time24.split(\":\");\r\n+    hour = parseInt(hour, 10);\r\n+    const ampm = hour >= 12 ? \"PM\" : \"AM\";\r\n+    hour = hour % 12 || 12;\r\n+    return `${hour}:${minute} ${ampm}`;\r\n+}\r\n+\r\n+function convertTo24Hour(time12) {\r\n+    if (!time12) return \"\";\r\n+    const [time, modifier] = time12.split(\" \");\r\n+    let [hours, minutes] = time.split(\":\");\r\n+    if (modifier === \"PM\" && hours !== \"12\") {\r\n+        hours = String(parseInt(hours, 10) + 12);\r\n+    }\r\n+    if (modifier === \"AM\" && hours === \"12\") {\r\n+        hours = \"00\";\r\n+    }\r\n+    return `${hours.padStart(2, \"0\")}:${minutes}`;\r\n+}\r\n"
                },
                {
                    "date": 1757949719958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n                     }}\r\n                     modifiersClassNames={{\r\n                         weekend: \"text-orange-500 font-bold\",\r\n                         selected:\r\n-                            \"bg-orange-500 text-green-500 font-bold rounded-full\",\r\n+                            \"bg-orange-500 text-white font-bold rounded-full\",\r\n                     }}\r\n                 />\r\n             </div>\r\n \r\n"
                },
                {
                    "date": 1757949888419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,160 @@\n+\"use client\";\r\n+import { motion } from \"framer-motion\";\r\n+import { DayPicker } from \"react-day-picker\";\r\n+import \"react-day-picker/dist/style.css\";\r\n+import { isAfter, startOfToday, isWeekend } from \"date-fns\";\r\n+import { useState } from \"react\";\r\n+\r\n+export default function DateTimePicker({\r\n+    dateTime,\r\n+    setDateTime,\r\n+    onNext,\r\n+    onBack,\r\n+}) {\r\n+    const today = startOfToday();\r\n+    const [selectedDay, setSelectedDay] = useState(\r\n+        dateTime.date ? new Date(dateTime.date) : undefined\r\n+    );\r\n+    const [selectedTime, setSelectedTime] = useState(dateTime.time || \"\");\r\n+\r\n+    // Generate times between 7 AM - 7 PM\r\n+    const times = [];\r\n+    for (let h = 7; h <= 19; h++) {\r\n+        const ampm = h < 12 ? \"AM\" : \"PM\";\r\n+        const hour = h % 12 === 0 ? 12 : h % 12;\r\n+        times.push(`${hour}:00 ${ampm}`);\r\n+        times.push(`${hour}:30 ${ampm}`);\r\n+    }\r\n+\r\n+    const isValid = selectedDay && selectedTime;\r\n+\r\n+    const handleNext = () => {\r\n+        if (isValid) {\r\n+            setDateTime({\r\n+                date: selectedDay.toISOString().split(\"T\")[0],\r\n+                time: selectedTime,\r\n+            });\r\n+            onNext({\r\n+                date: selectedDay.toISOString().split(\"T\")[0],\r\n+                time: selectedTime,\r\n+            });\r\n+        }\r\n+    };\r\n+\r\n+    return (\r\n+        <motion.div\r\n+            key=\"date-time-step\"\r\n+            initial={{ opacity: 0, x: 50 }}\r\n+            animate={{ opacity: 1, x: 0 }}\r\n+            exit={{ opacity: 0, x: -50 }}\r\n+            transition={{ duration: 0.4 }}\r\n+            className=\"space-y-6\"\r\n+        >\r\n+            {/* Calendar */}\r\n+            <div>\r\n+                <label className=\"block text-sm mb-2 text-gray-300\">\r\n+                    Select Date\r\n+                </label>\r\n+                <DayPicker\r\n+                    mode=\"single\"\r\n+                    selected={selectedDay}\r\n+                    onSelect={setSelectedDay}\r\n+                    disabled={(date) =>\r\n+                        !isWeekend(date) ||\r\n+                        (!isAfter(date, today) &&\r\n+                            date.toDateString() !== today.toDateString())\r\n+                    }\r\n+                    modifiers={{\r\n+                        weekend: (date) => isWeekend(date),\r\n+                    }}\r\n+                    modifiersClassNames={{\r\n+                        weekend: \"text-orange-500 font-bold\",\r\n+                        selected:\r\n+                            \"bg-orange-500 text-white font-bold rounded-full\",\r\n+                    }}\r\n+                />\r\n+            </div>\r\n+\r\n+            {/* Time Picker */}\r\n+            <div>\r\n+                <label className=\"block text-sm mb-2 text-gray-300\">\r\n+                    Select Time\r\n+                </label>\r\n+\r\n+                {/* Mobile: iPhone-style scroll input */}\r\n+                <select\r\n+                    value={selectedTime}\r\n+                    onChange={(e) => setSelectedTime(e.target.value)}\r\n+                    className=\"w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none\"\r\n+                >\r\n+                    <option value=\"\">-- Select Time --</option>\r\n+                    {times.map((t) => (\r\n+                        <option key={t} value={t}>\r\n+                            {t}\r\n+                        </option>\r\n+                    ))}\r\n+                </select>\r\n+\r\n+                {/* Desktop: dropdown */}\r\n+                <select\r\n+                    value={selectedTime}\r\n+                    onChange={(e) => setSelectedTime(e.target.value)}\r\n+                    className=\"hidden sm:block w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none\"\r\n+                >\r\n+                    <option value=\"\">-- Select Time --</option>\r\n+                    {times.map((t) => (\r\n+                        <option key={t} value={t}>\r\n+                            {t}\r\n+                        </option>\r\n+                    ))}\r\n+                </select>\r\n+            </div>\r\n+\r\n+            {/* Buttons */}\r\n+            <div className=\"flex justify-between\">\r\n+                <button\r\n+                    type=\"button\"\r\n+                    onClick={onBack}\r\n+                    className=\"py-3 px-6 rounded-lg bg-gray-700 hover:bg-gray-600 font-semibold transition\"\r\n+                >\r\n+                    Back\r\n+                </button>\r\n+\r\n+                <button\r\n+                    type=\"button\"\r\n+                    disabled={!isValid}\r\n+                    onClick={handleNext}\r\n+                    className={`py-3 px-6 rounded-lg font-semibold transition ${\r\n+                        isValid\r\n+                            ? \"bg-orange-500 hover:bg-orange-600\"\r\n+                            : \"bg-gray-600 cursor-not-allowed\"\r\n+                    }`}\r\n+                >\r\n+                    Next\r\n+                </button>\r\n+            </div>\r\n+        </motion.div>\r\n+    );\r\n+}\r\n+\r\n+// Helpers to handle iPhone time input conversion\r\n+function convertTo12Hour(time24) {\r\n+    let [hour, minute] = time24.split(\":\");\r\n+    hour = parseInt(hour, 10);\r\n+    const ampm = hour >= 12 ? \"PM\" : \"AM\";\r\n+    hour = hour % 12 || 12;\r\n+    return `${hour}:${minute} ${ampm}`;\r\n+}\r\n+\r\n+function convertTo24Hour(time12) {\r\n+    if (!time12) return \"\";\r\n+    const [time, modifier] = time12.split(\" \");\r\n+    let [hours, minutes] = time.split(\":\");\r\n+    if (modifier === \"PM\" && hours !== \"12\") {\r\n+        hours = String(parseInt(hours, 10) + 12);\r\n+    }\r\n+    if (modifier === \"AM\" && hours === \"12\") {\r\n+        hours = \"00\";\r\n+    }\r\n+    return `${hours.padStart(2, \"0\")}:${minutes}`;\r\n+}\r\n"
                },
                {
                    "date": 1757949959702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,26 +80,12 @@\n                 <label className=\"block text-sm mb-2 text-gray-300\">\r\n                     Select Time\r\n                 </label>\r\n \r\n-                {/* Mobile: iPhone-style scroll input */}\r\n+               \r\n                 <select\r\n                     value={selectedTime}\r\n                     onChange={(e) => setSelectedTime(e.target.value)}\r\n-                    className=\"w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none\"\r\n-                >\r\n-                    <option value=\"\">-- Select Time --</option>\r\n-                    {times.map((t) => (\r\n-                        <option key={t} value={t}>\r\n-                            {t}\r\n-                        </option>\r\n-                    ))}\r\n-                </select>\r\n-\r\n-                {/* Desktop: dropdown */}\r\n-                <select\r\n-                    value={selectedTime}\r\n-                    onChange={(e) => setSelectedTime(e.target.value)}\r\n                     className=\"hidden sm:block w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none\"\r\n                 >\r\n                     <option value=\"\">-- Select Time --</option>\r\n                     {times.map((t) => (\r\n"
                },
                {
                    "date": 1757949967168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+\"use client\";\r\n+import { motion } from \"framer-motion\";\r\n+import { DayPicker } from \"react-day-picker\";\r\n+import \"react-day-picker/dist/style.css\";\r\n+import { isAfter, startOfToday, isWeekend } from \"date-fns\";\r\n+import { useState } from \"react\";\r\n+\r\n+export default function DateTimePicker({\r\n+    dateTime,\r\n+    setDateTime,\r\n+    onNext,\r\n+    onBack,\r\n+}) {\r\n+    const today = startOfToday();\r\n+    const [selectedDay, setSelectedDay] = useState(\r\n+        dateTime.date ? new Date(dateTime.date) : undefined\r\n+    );\r\n+    const [selectedTime, setSelectedTime] = useState(dateTime.time || \"\");\r\n+\r\n+    // Generate times between 7 AM - 7 PM\r\n+    const times = [];\r\n+    for (let h = 7; h <= 19; h++) {\r\n+        const ampm = h < 12 ? \"AM\" : \"PM\";\r\n+        const hour = h % 12 === 0 ? 12 : h % 12;\r\n+        times.push(`${hour}:00 ${ampm}`);\r\n+        times.push(`${hour}:30 ${ampm}`);\r\n+    }\r\n+\r\n+    const isValid = selectedDay && selectedTime;\r\n+\r\n+    const handleNext = () => {\r\n+        if (isValid) {\r\n+            setDateTime({\r\n+                date: selectedDay.toISOString().split(\"T\")[0],\r\n+                time: selectedTime,\r\n+            });\r\n+            onNext({\r\n+                date: selectedDay.toISOString().split(\"T\")[0],\r\n+                time: selectedTime,\r\n+            });\r\n+        }\r\n+    };\r\n+\r\n+    return (\r\n+        <motion.div\r\n+            key=\"date-time-step\"\r\n+            initial={{ opacity: 0, x: 50 }}\r\n+            animate={{ opacity: 1, x: 0 }}\r\n+            exit={{ opacity: 0, x: -50 }}\r\n+            transition={{ duration: 0.4 }}\r\n+            className=\"space-y-6\"\r\n+        >\r\n+            {/* Calendar */}\r\n+            <div>\r\n+                <label className=\"block text-sm mb-2 text-gray-300\">\r\n+                    Select Date\r\n+                </label>\r\n+                <DayPicker\r\n+                    mode=\"single\"\r\n+                    selected={selectedDay}\r\n+                    onSelect={setSelectedDay}\r\n+                    disabled={(date) =>\r\n+                        !isWeekend(date) ||\r\n+                        (!isAfter(date, today) &&\r\n+                            date.toDateString() !== today.toDateString())\r\n+                    }\r\n+                    modifiers={{\r\n+                        weekend: (date) => isWeekend(date),\r\n+                    }}\r\n+                    modifiersClassNames={{\r\n+                        weekend: \"text-orange-500 font-bold\",\r\n+                        selected:\r\n+                            \"bg-orange-500 text-white font-bold rounded-full\",\r\n+                    }}\r\n+                />\r\n+            </div>\r\n+\r\n+            {/* Time Picker */}\r\n+            <div>\r\n+                <label className=\"block text-sm mb-2 text-gray-300\">\r\n+                    Select Time\r\n+                </label>\r\n+\r\n+               {/* selcctin  */}\r\n+                <select\r\n+                    value={selectedTime}\r\n+                    onChange={(e) => setSelectedTime(e.target.value)}\r\n+                    className=\"hidden sm:block w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none\"\r\n+                >\r\n+                    <option value=\"\">-- Select Time --</option>\r\n+                    {times.map((t) => (\r\n+                        <option key={t} value={t}>\r\n+                            {t}\r\n+                        </option>\r\n+                    ))}\r\n+                </select>\r\n+            </div>\r\n+\r\n+            {/* Buttons */}\r\n+            <div className=\"flex justify-between\">\r\n+                <button\r\n+                    type=\"button\"\r\n+                    onClick={onBack}\r\n+                    className=\"py-3 px-6 rounded-lg bg-gray-700 hover:bg-gray-600 font-semibold transition\"\r\n+                >\r\n+                    Back\r\n+                </button>\r\n+\r\n+                <button\r\n+                    type=\"button\"\r\n+                    disabled={!isValid}\r\n+                    onClick={handleNext}\r\n+                    className={`py-3 px-6 rounded-lg font-semibold transition ${\r\n+                        isValid\r\n+                            ? \"bg-orange-500 hover:bg-orange-600\"\r\n+                            : \"bg-gray-600 cursor-not-allowed\"\r\n+                    }`}\r\n+                >\r\n+                    Next\r\n+                </button>\r\n+            </div>\r\n+        </motion.div>\r\n+    );\r\n+}\r\n+\r\n+// Helpers to handle iPhone time input conversion\r\n+function convertTo12Hour(time24) {\r\n+    let [hour, minute] = time24.split(\":\");\r\n+    hour = parseInt(hour, 10);\r\n+    const ampm = hour >= 12 ? \"PM\" : \"AM\";\r\n+    hour = hour % 12 || 12;\r\n+    return `${hour}:${minute} ${ampm}`;\r\n+}\r\n+\r\n+function convertTo24Hour(time12) {\r\n+    if (!time12) return \"\";\r\n+    const [time, modifier] = time12.split(\" \");\r\n+    let [hours, minutes] = time.split(\":\");\r\n+    if (modifier === \"PM\" && hours !== \"12\") {\r\n+        hours = String(parseInt(hours, 10) + 12);\r\n+    }\r\n+    if (modifier === \"AM\" && hours === \"12\") {\r\n+        hours = \"00\";\r\n+    }\r\n+    return `${hours.padStart(2, \"0\")}:${minutes}`;\r\n+}\r\n"
                },
                {
                    "date": 1757950016374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+\"use client\";\r\n+import { motion } from \"framer-motion\";\r\n+import { DayPicker } from \"react-day-picker\";\r\n+import \"react-day-picker/dist/style.css\";\r\n+import { isAfter, startOfToday, isWeekend } from \"date-fns\";\r\n+import { useState } from \"react\";\r\n+\r\n+export default function DateTimePicker({\r\n+    dateTime,\r\n+    setDateTime,\r\n+    onNext,\r\n+    onBack,\r\n+}) {\r\n+    const today = startOfToday();\r\n+    const [selectedDay, setSelectedDay] = useState(\r\n+        dateTime.date ? new Date(dateTime.date) : undefined\r\n+    );\r\n+    const [selectedTime, setSelectedTime] = useState(dateTime.time || \"\");\r\n+\r\n+    // Generate times between 7 AM - 7 PM\r\n+    const times = [];\r\n+    for (let h = 7; h <= 19; h++) {\r\n+        const ampm = h < 12 ? \"AM\" : \"PM\";\r\n+        const hour = h % 12 === 0 ? 12 : h % 12;\r\n+        times.push(`${hour}:00 ${ampm}`);\r\n+        times.push(`${hour}:30 ${ampm}`);\r\n+    }\r\n+\r\n+    const isValid = selectedDay && selectedTime;\r\n+\r\n+    const handleNext = () => {\r\n+        if (isValid) {\r\n+            setDateTime({\r\n+                date: selectedDay.toISOString().split(\"T\")[0],\r\n+                time: selectedTime,\r\n+            });\r\n+            onNext({\r\n+                date: selectedDay.toISOString().split(\"T\")[0],\r\n+                time: selectedTime,\r\n+            });\r\n+        }\r\n+    };\r\n+\r\n+    return (\r\n+        <motion.div\r\n+            key=\"date-time-step\"\r\n+            initial={{ opacity: 0, x: 50 }}\r\n+            animate={{ opacity: 1, x: 0 }}\r\n+            exit={{ opacity: 0, x: -50 }}\r\n+            transition={{ duration: 0.4 }}\r\n+            className=\"space-y-6\"\r\n+        >\r\n+            {/* Calendar */}\r\n+            <div>\r\n+                <label className=\"block text-sm mb-2 text-gray-300\">\r\n+                    Select Date\r\n+                </label>\r\n+                <DayPicker\r\n+                    mode=\"single\"\r\n+                    selected={selectedDay}\r\n+                    onSelect={setSelectedDay}\r\n+                    disabled={(date) =>\r\n+                        !isWeekend(date) ||\r\n+                        (!isAfter(date, today) &&\r\n+                            date.toDateString() !== today.toDateString())\r\n+                    }\r\n+                    modifiers={{\r\n+                        weekend: (date) => isWeekend(date),\r\n+                    }}\r\n+                    modifiersClassNames={{\r\n+                        weekend: \"text-orange-500 font-bold\",\r\n+                        selected:\r\n+                            \"bg-orange-500 text-white font-bold rounded-full\",\r\n+                    }}\r\n+                />\r\n+            </div>\r\n+\r\n+            {/* Time Picker */}\r\n+            <div>\r\n+                <label className=\"block text-sm mb-2 text-gray-300\">\r\n+                    Select Time\r\n+                </label>\r\n+\r\n+               <select\r\n+    value={selectedTime}\r\n+    onChange={(e) => setSelectedTime(e.target.value)}\r\n+    className=\"w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none\"\r\n+>\r\n+    <option value=\"\">-- Select Time --</option>\r\n+    {times.map((t) => (\r\n+        <option key={t} value={t}>\r\n+            {t}\r\n+        </option>\r\n+    ))}\r\n+</select>\r\n+\r\n+            </div>\r\n+\r\n+            {/* Buttons */}\r\n+            <div className=\"flex justify-between\">\r\n+                <button\r\n+                    type=\"button\"\r\n+                    onClick={onBack}\r\n+                    className=\"py-3 px-6 rounded-lg bg-gray-700 hover:bg-gray-600 font-semibold transition\"\r\n+                >\r\n+                    Back\r\n+                </button>\r\n+\r\n+                <button\r\n+                    type=\"button\"\r\n+                    disabled={!isValid}\r\n+                    onClick={handleNext}\r\n+                    className={`py-3 px-6 rounded-lg font-semibold transition ${\r\n+                        isValid\r\n+                            ? \"bg-orange-500 hover:bg-orange-600\"\r\n+                            : \"bg-gray-600 cursor-not-allowed\"\r\n+                    }`}\r\n+                >\r\n+                    Next\r\n+                </button>\r\n+            </div>\r\n+        </motion.div>\r\n+    );\r\n+}\r\n+\r\n+// Helpers to handle iPhone time input conversion\r\n+function convertTo12Hour(time24) {\r\n+    let [hour, minute] = time24.split(\":\");\r\n+    hour = parseInt(hour, 10);\r\n+    const ampm = hour >= 12 ? \"PM\" : \"AM\";\r\n+    hour = hour % 12 || 12;\r\n+    return `${hour}:${minute} ${ampm}`;\r\n+}\r\n+\r\n+function convertTo24Hour(time12) {\r\n+    if (!time12) return \"\";\r\n+    const [time, modifier] = time12.split(\" \");\r\n+    let [hours, minutes] = time.split(\":\");\r\n+    if (modifier === \"PM\" && hours !== \"12\") {\r\n+        hours = String(parseInt(hours, 10) + 12);\r\n+    }\r\n+    if (modifier === \"AM\" && hours === \"12\") {\r\n+        hours = \"00\";\r\n+    }\r\n+    return `${hours.padStart(2, \"0\")}:${minutes}`;\r\n+}\r\n"
                },
                {
                    "date": 1757950118712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,21 +80,20 @@\n                 <label className=\"block text-sm mb-2 text-gray-300\">\r\n                     Select Time\r\n                 </label>\r\n \r\n-               <select\r\n-    value={selectedTime}\r\n-    onChange={(e) => setSelectedTime(e.target.value)}\r\n-    className=\"w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none\"\r\n->\r\n-    <option value=\"\">-- Select Time --</option>\r\n-    {times.map((t) => (\r\n-        <option key={t} value={t}>\r\n-            {t}\r\n-        </option>\r\n-    ))}\r\n-</select>\r\n-\r\n+                <select\r\n+                    value={selectedTime}\r\n+                    onChange={(e) => setSelectedTime(e.target.value)}\r\n+                    className=\"w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none\"\r\n+                >\r\n+                    <option value=\"\">-- Select Time --</option>\r\n+                    {times.map((t) => (\r\n+                        <option key={t} value={t}>\r\n+                            {t}\r\n+                        </option>\r\n+                    ))}\r\n+                </select>\r\n             </div>\r\n \r\n             {/* Buttons */}\r\n             <div className=\"flex justify-between\">\r\n"
                },
                {
                    "date": 1758298515486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n \r\n                 <select\r\n                     value={selectedTime}\r\n                     onChange={(e) => setSelectedTime(e.target.value)}\r\n-                    className=\"w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none\"\r\n+                    className=\"w-full px-4 py-3 rounded-lg bg-# border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none\"\r\n                 >\r\n                     <option value=\"\">-- Select Time --</option>\r\n                     {times.map((t) => (\r\n                         <option key={t} value={t}>\r\n@@ -142,615 +142,4 @@\n         hours = \"00\";\r\n     }\r\n     return `${hours.padStart(2, \"0\")}:${minutes}`;\r\n }\r\n-\"use client\";\r\n-import { motion } from \"framer-motion\";\r\n-import { DayPicker } from \"react-day-picker\";\r\n-import \"react-day-picker/dist/style.css\";\r\n-import { isAfter, startOfToday, isWeekend } from \"date-fns\";\r\n-import { useState } from \"react\";\r\n-\r\n-export default function DateTimePicker({\r\n-    dateTime,\r\n-    setDateTime,\r\n-    onNext,\r\n-    onBack,\r\n-}) {\r\n-    const today = startOfToday();\r\n-    const [selectedDay, setSelectedDay] = useState(\r\n-        dateTime.date ? new Date(dateTime.date) : undefined\r\n-    );\r\n-    const [selectedTime, setSelectedTime] = useState(dateTime.time || \"\");\r\n-\r\n-    // Generate times between 7 AM - 7 PM\r\n-    const times = [];\r\n-    for (let h = 7; h <= 19; h++) {\r\n-        const ampm = h < 12 ? \"AM\" : \"PM\";\r\n-        const hour = h % 12 === 0 ? 12 : h % 12;\r\n-        times.push(`${hour}:00 ${ampm}`);\r\n-        times.push(`${hour}:30 ${ampm}`);\r\n-    }\r\n-\r\n-    const isValid = selectedDay && selectedTime;\r\n-\r\n-    const handleNext = () => {\r\n-        if (isValid) {\r\n-            setDateTime({\r\n-                date: selectedDay.toISOString().split(\"T\")[0],\r\n-                time: selectedTime,\r\n-            });\r\n-            onNext({\r\n-                date: selectedDay.toISOString().split(\"T\")[0],\r\n-                time: selectedTime,\r\n-            });\r\n-        }\r\n-    };\r\n-\r\n-    return (\r\n-        <motion.div\r\n-            key=\"date-time-step\"\r\n-            initial={{ opacity: 0, x: 50 }}\r\n-            animate={{ opacity: 1, x: 0 }}\r\n-            exit={{ opacity: 0, x: -50 }}\r\n-            transition={{ duration: 0.4 }}\r\n-            className=\"space-y-6\"\r\n-        >\r\n-            {/* Calendar */}\r\n-            <div>\r\n-                <label className=\"block text-sm mb-2 text-gray-300\">\r\n-                    Select Date\r\n-                </label>\r\n-                <DayPicker\r\n-                    mode=\"single\"\r\n-                    selected={selectedDay}\r\n-                    onSelect={setSelectedDay}\r\n-                    disabled={(date) =>\r\n-                        !isWeekend(date) ||\r\n-                        (!isAfter(date, today) &&\r\n-                            date.toDateString() !== today.toDateString())\r\n-                    }\r\n-                    modifiers={{\r\n-                        weekend: (date) => isWeekend(date),\r\n-                    }}\r\n-                    modifiersClassNames={{\r\n-                        weekend: \"text-orange-500 font-bold\",\r\n-                        selected:\r\n-                            \"bg-orange-500 text-white font-bold rounded-full\",\r\n-                    }}\r\n-                />\r\n-            </div>\r\n-\r\n-            {/* Time Picker */}\r\n-            <div>\r\n-                <label className=\"block text-sm mb-2 text-gray-300\">\r\n-                    Select Time\r\n-                </label>\r\n-\r\n-               {/* selcctin  */}\r\n-                <select\r\n-                    value={selectedTime}\r\n-                    onChange={(e) => setSelectedTime(e.target.value)}\r\n-                    className=\"hidden sm:block w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none\"\r\n-                >\r\n-                    <option value=\"\">-- Select Time --</option>\r\n-                    {times.map((t) => (\r\n-                        <option key={t} value={t}>\r\n-                            {t}\r\n-                        </option>\r\n-                    ))}\r\n-                </select>\r\n-            </div>\r\n-\r\n-            {/* Buttons */}\r\n-            <div className=\"flex justify-between\">\r\n-                <button\r\n-                    type=\"button\"\r\n-                    onClick={onBack}\r\n-                    className=\"py-3 px-6 rounded-lg bg-gray-700 hover:bg-gray-600 font-semibold transition\"\r\n-                >\r\n-                    Back\r\n-                </button>\r\n-\r\n-                <button\r\n-                    type=\"button\"\r\n-                    disabled={!isValid}\r\n-                    onClick={handleNext}\r\n-                    className={`py-3 px-6 rounded-lg font-semibold transition ${\r\n-                        isValid\r\n-                            ? \"bg-orange-500 hover:bg-orange-600\"\r\n-                            : \"bg-gray-600 cursor-not-allowed\"\r\n-                    }`}\r\n-                >\r\n-                    Next\r\n-                </button>\r\n-            </div>\r\n-        </motion.div>\r\n-    );\r\n-}\r\n-\r\n-// Helpers to handle iPhone time input conversion\r\n-function convertTo12Hour(time24) {\r\n-    let [hour, minute] = time24.split(\":\");\r\n-    hour = parseInt(hour, 10);\r\n-    const ampm = hour >= 12 ? \"PM\" : \"AM\";\r\n-    hour = hour % 12 || 12;\r\n-    return `${hour}:${minute} ${ampm}`;\r\n-}\r\n-\r\n-function convertTo24Hour(time12) {\r\n-    if (!time12) return \"\";\r\n-    const [time, modifier] = time12.split(\" \");\r\n-    let [hours, minutes] = time.split(\":\");\r\n-    if (modifier === \"PM\" && hours !== \"12\") {\r\n-        hours = String(parseInt(hours, 10) + 12);\r\n-    }\r\n-    if (modifier === \"AM\" && hours === \"12\") {\r\n-        hours = \"00\";\r\n-    }\r\n-    return `${hours.padStart(2, \"0\")}:${minutes}`;\r\n-}\r\n-\"use client\";\r\n-import { motion } from \"framer-motion\";\r\n-import { DayPicker } from \"react-day-picker\";\r\n-import \"react-day-picker/dist/style.css\";\r\n-import { isAfter, startOfToday, isWeekend } from \"date-fns\";\r\n-import { useState } from \"react\";\r\n-\r\n-export default function DateTimePicker({\r\n-    dateTime,\r\n-    setDateTime,\r\n-    onNext,\r\n-    onBack,\r\n-}) {\r\n-    const today = startOfToday();\r\n-    const [selectedDay, setSelectedDay] = useState(\r\n-        dateTime.date ? new Date(dateTime.date) : undefined\r\n-    );\r\n-    const [selectedTime, setSelectedTime] = useState(dateTime.time || \"\");\r\n-\r\n-    // Generate times between 7 AM - 7 PM\r\n-    const times = [];\r\n-    for (let h = 7; h <= 19; h++) {\r\n-        const ampm = h < 12 ? \"AM\" : \"PM\";\r\n-        const hour = h % 12 === 0 ? 12 : h % 12;\r\n-        times.push(`${hour}:00 ${ampm}`);\r\n-        times.push(`${hour}:30 ${ampm}`);\r\n-    }\r\n-\r\n-    const isValid = selectedDay && selectedTime;\r\n-\r\n-    const handleNext = () => {\r\n-        if (isValid) {\r\n-            setDateTime({\r\n-                date: selectedDay.toISOString().split(\"T\")[0],\r\n-                time: selectedTime,\r\n-            });\r\n-            onNext({\r\n-                date: selectedDay.toISOString().split(\"T\")[0],\r\n-                time: selectedTime,\r\n-            });\r\n-        }\r\n-    };\r\n-\r\n-    return (\r\n-        <motion.div\r\n-            key=\"date-time-step\"\r\n-            initial={{ opacity: 0, x: 50 }}\r\n-            animate={{ opacity: 1, x: 0 }}\r\n-            exit={{ opacity: 0, x: -50 }}\r\n-            transition={{ duration: 0.4 }}\r\n-            className=\"space-y-6\"\r\n-        >\r\n-            {/* Calendar */}\r\n-            <div>\r\n-                <label className=\"block text-sm mb-2 text-gray-300\">\r\n-                    Select Date\r\n-                </label>\r\n-                <DayPicker\r\n-                    mode=\"single\"\r\n-                    selected={selectedDay}\r\n-                    onSelect={setSelectedDay}\r\n-                    disabled={(date) =>\r\n-                        !isWeekend(date) ||\r\n-                        (!isAfter(date, today) &&\r\n-                            date.toDateString() !== today.toDateString())\r\n-                    }\r\n-                    modifiers={{\r\n-                        weekend: (date) => isWeekend(date),\r\n-                    }}\r\n-                    modifiersClassNames={{\r\n-                        weekend: \"text-orange-500 font-bold\",\r\n-                        selected:\r\n-                            \"bg-orange-500 text-white font-bold rounded-full\",\r\n-                    }}\r\n-                />\r\n-            </div>\r\n-\r\n-            {/* Time Picker */}\r\n-            <div>\r\n-                <label className=\"block text-sm mb-2 text-gray-300\">\r\n-                    Select Time\r\n-                </label>\r\n-\r\n-               \r\n-                <select\r\n-                    value={selectedTime}\r\n-                    onChange={(e) => setSelectedTime(e.target.value)}\r\n-                    className=\"hidden sm:block w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none\"\r\n-                >\r\n-                    <option value=\"\">-- Select Time --</option>\r\n-                    {times.map((t) => (\r\n-                        <option key={t} value={t}>\r\n-                            {t}\r\n-                        </option>\r\n-                    ))}\r\n-                </select>\r\n-            </div>\r\n-\r\n-            {/* Buttons */}\r\n-            <div className=\"flex justify-between\">\r\n-                <button\r\n-                    type=\"button\"\r\n-                    onClick={onBack}\r\n-                    className=\"py-3 px-6 rounded-lg bg-gray-700 hover:bg-gray-600 font-semibold transition\"\r\n-                >\r\n-                    Back\r\n-                </button>\r\n-\r\n-                <button\r\n-                    type=\"button\"\r\n-                    disabled={!isValid}\r\n-                    onClick={handleNext}\r\n-                    className={`py-3 px-6 rounded-lg font-semibold transition ${\r\n-                        isValid\r\n-                            ? \"bg-orange-500 hover:bg-orange-600\"\r\n-                            : \"bg-gray-600 cursor-not-allowed\"\r\n-                    }`}\r\n-                >\r\n-                    Next\r\n-                </button>\r\n-            </div>\r\n-        </motion.div>\r\n-    );\r\n-}\r\n-\r\n-// Helpers to handle iPhone time input conversion\r\n-function convertTo12Hour(time24) {\r\n-    let [hour, minute] = time24.split(\":\");\r\n-    hour = parseInt(hour, 10);\r\n-    const ampm = hour >= 12 ? \"PM\" : \"AM\";\r\n-    hour = hour % 12 || 12;\r\n-    return `${hour}:${minute} ${ampm}`;\r\n-}\r\n-\r\n-function convertTo24Hour(time12) {\r\n-    if (!time12) return \"\";\r\n-    const [time, modifier] = time12.split(\" \");\r\n-    let [hours, minutes] = time.split(\":\");\r\n-    if (modifier === \"PM\" && hours !== \"12\") {\r\n-        hours = String(parseInt(hours, 10) + 12);\r\n-    }\r\n-    if (modifier === \"AM\" && hours === \"12\") {\r\n-        hours = \"00\";\r\n-    }\r\n-    return `${hours.padStart(2, \"0\")}:${minutes}`;\r\n-}\r\n-\"use client\";\r\n-import { motion } from \"framer-motion\";\r\n-import { DayPicker } from \"react-day-picker\";\r\n-import \"react-day-picker/dist/style.css\";\r\n-import { isAfter, startOfToday, isWeekend } from \"date-fns\";\r\n-import { useState } from \"react\";\r\n-\r\n-export default function DateTimePicker({\r\n-    dateTime,\r\n-    setDateTime,\r\n-    onNext,\r\n-    onBack,\r\n-}) {\r\n-    const today = startOfToday();\r\n-    const [selectedDay, setSelectedDay] = useState(\r\n-        dateTime.date ? new Date(dateTime.date) : undefined\r\n-    );\r\n-    const [selectedTime, setSelectedTime] = useState(dateTime.time || \"\");\r\n-\r\n-    // Generate times between 7 AM - 7 PM\r\n-    const times = [];\r\n-    for (let h = 7; h <= 19; h++) {\r\n-        const ampm = h < 12 ? \"AM\" : \"PM\";\r\n-        const hour = h % 12 === 0 ? 12 : h % 12;\r\n-        times.push(`${hour}:00 ${ampm}`);\r\n-        times.push(`${hour}:30 ${ampm}`);\r\n-    }\r\n-\r\n-    const isValid = selectedDay && selectedTime;\r\n-\r\n-    const handleNext = () => {\r\n-        if (isValid) {\r\n-            setDateTime({\r\n-                date: selectedDay.toISOString().split(\"T\")[0],\r\n-                time: selectedTime,\r\n-            });\r\n-            onNext({\r\n-                date: selectedDay.toISOString().split(\"T\")[0],\r\n-                time: selectedTime,\r\n-            });\r\n-        }\r\n-    };\r\n-\r\n-    return (\r\n-        <motion.div\r\n-            key=\"date-time-step\"\r\n-            initial={{ opacity: 0, x: 50 }}\r\n-            animate={{ opacity: 1, x: 0 }}\r\n-            exit={{ opacity: 0, x: -50 }}\r\n-            transition={{ duration: 0.4 }}\r\n-            className=\"space-y-6\"\r\n-        >\r\n-            {/* Calendar */}\r\n-            <div>\r\n-                <label className=\"block text-sm mb-2 text-gray-300\">\r\n-                    Select Date\r\n-                </label>\r\n-                <DayPicker\r\n-                    mode=\"single\"\r\n-                    selected={selectedDay}\r\n-                    onSelect={setSelectedDay}\r\n-                    disabled={(date) =>\r\n-                        !isWeekend(date) ||\r\n-                        (!isAfter(date, today) &&\r\n-                            date.toDateString() !== today.toDateString())\r\n-                    }\r\n-                    modifiers={{\r\n-                        weekend: (date) => isWeekend(date),\r\n-                    }}\r\n-                    modifiersClassNames={{\r\n-    weekend: \"text-orange-500 font-bold\",\r\n-    selected:\r\n-        \"bg-orange-500 text-green-500 font-bold rounded-full\",\r\n-}}\r\n-\r\n-                />\r\n-            </div>\r\n-\r\n-            {/* Time Picker */}\r\n-            <div>\r\n-                <label className=\"block text-sm mb-2 text-gray-300\">\r\n-                    Select Time\r\n-                </label>\r\n-\r\n-                {/* Mobile: iPhone-style scroll input */}\r\n-                <input\r\n-                    type=\"time\"\r\n-                    min=\"07:00\"\r\n-                    max=\"19:00\"\r\n-                    step=\"1800\"\r\n-                    value={selectedTime ? convertTo24Hour(selectedTime) : \"\"}\r\n-                    onChange={(e) =>\r\n-                        setSelectedTime(convertTo12Hour(e.target.value))\r\n-                    }\r\n-                    className=\"block w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none sm:hidden\"\r\n-                />\r\n-\r\n-                {/* Desktop: dropdown */}\r\n-                <select\r\n-                    value={selectedTime}\r\n-                    onChange={(e) => setSelectedTime(e.target.value)}\r\n-                    className=\"hidden sm:block w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none\"\r\n-                >\r\n-                    <option value=\"\">-- Select Time --</option>\r\n-                    {times.map((t) => (\r\n-                        <option key={t} value={t}>\r\n-                            {t}\r\n-                        </option>\r\n-                    ))}\r\n-                </select>\r\n-            </div>\r\n-\r\n-            {/* Buttons */}\r\n-            <div className=\"flex justify-between\">\r\n-                <button\r\n-                    type=\"button\"\r\n-                    onClick={onBack}\r\n-                    className=\"py-3 px-6 rounded-lg bg-gray-700 hover:bg-gray-600 font-semibold transition\"\r\n-                >\r\n-                    Back\r\n-                </button>\r\n-\r\n-                <button\r\n-                    type=\"button\"\r\n-                    disabled={!isValid}\r\n-                    onClick={handleNext}\r\n-                    className={`py-3 px-6 rounded-lg font-semibold transition ${\r\n-                        isValid\r\n-                            ? \"bg-orange-500 hover:bg-orange-600\"\r\n-                            : \"bg-gray-600 cursor-not-allowed\"\r\n-                    }`}\r\n-                >\r\n-                    Next\r\n-                </button>\r\n-            </div>\r\n-        </motion.div>\r\n-    );\r\n-}\r\n-\r\n-// Helpers to handle iPhone time input conversion\r\n-function convertTo12Hour(time24) {\r\n-    let [hour, minute] = time24.split(\":\");\r\n-    hour = parseInt(hour, 10);\r\n-    const ampm = hour >= 12 ? \"PM\" : \"AM\";\r\n-    hour = hour % 12 || 12;\r\n-    return `${hour}:${minute} ${ampm}`;\r\n-}\r\n-\r\n-function convertTo24Hour(time12) {\r\n-    if (!time12) return \"\";\r\n-    const [time, modifier] = time12.split(\" \");\r\n-    let [hours, minutes] = time.split(\":\");\r\n-    if (modifier === \"PM\" && hours !== \"12\") {\r\n-        hours = String(parseInt(hours, 10) + 12);\r\n-    }\r\n-    if (modifier === \"AM\" && hours === \"12\") {\r\n-        hours = \"00\";\r\n-    }\r\n-    return `${hours.padStart(2, \"0\")}:${minutes}`;\r\n-}\r\n-\"use client\";\r\n-import { motion } from \"framer-motion\";\r\n-import { DayPicker } from \"react-day-picker\";\r\n-import \"react-day-picker/dist/style.css\";\r\n-import { isAfter, startOfToday, isWeekend } from \"date-fns\";\r\n-import { useState } from \"react\";\r\n-\r\n-export default function DateTimePicker({\r\n-    dateTime,\r\n-    setDateTime,\r\n-    onNext,\r\n-    onBack,\r\n-}) {\r\n-    const today = startOfToday();\r\n-    const [selectedDay, setSelectedDay] = useState(\r\n-        dateTime.date ? new Date(dateTime.date) : undefined\r\n-    );\r\n-    const [selectedTime, setSelectedTime] = useState(dateTime.time || \"\");\r\n-\r\n-    // Generate times between 7 AM - 7 PM\r\n-    const times = [];\r\n-    for (let h = 7; h <= 19; h++) {\r\n-        const ampm = h < 12 ? \"AM\" : \"PM\";\r\n-        const hour = h % 12 === 0 ? 12 : h % 12;\r\n-        times.push(`${hour}:00 ${ampm}`);\r\n-        times.push(`${hour}:30 ${ampm}`);\r\n-    }\r\n-\r\n-    const isValid = selectedDay && selectedTime;\r\n-\r\n-    const handleNext = () => {\r\n-        if (isValid) {\r\n-            setDateTime({\r\n-                date: selectedDay.toISOString().split(\"T\")[0],\r\n-                time: selectedTime,\r\n-            });\r\n-            onNext({\r\n-                date: selectedDay.toISOString().split(\"T\")[0],\r\n-                time: selectedTime,\r\n-            });\r\n-        }\r\n-    };\r\n-\r\n-    return (\r\n-        <motion.div\r\n-            key=\"date-time-step\"\r\n-            initial={{ opacity: 0, x: 50 }}\r\n-            animate={{ opacity: 1, x: 0 }}\r\n-            exit={{ opacity: 0, x: -50 }}\r\n-            transition={{ duration: 0.4 }}\r\n-            className=\"space-y-6\"\r\n-        >\r\n-            {/* Calendar */}\r\n-            <div>\r\n-                <label className=\"block text-sm mb-2 text-gray-300\">\r\n-                    Select Date\r\n-                </label>\r\n-                <DayPicker\r\n-                    mode=\"single\"\r\n-                    selected={selectedDay}\r\n-                    onSelect={setSelectedDay}\r\n-                    disabled={(date) =>\r\n-                        !isWeekend(date) ||\r\n-                        (!isAfter(date, today) &&\r\n-                            date.toDateString() !== today.toDateString())\r\n-                    }\r\n-                    modifiers={{\r\n-                        weekend: (date) => isWeekend(date),\r\n-                    }}\r\n-                    modifiersClassNames={{\r\n-                        weekend: \"text-orange-500 font-bold\",\r\n-                        selected:\r\n-                            \"bg-orange-500 text-white font-bold rounded-full\",\r\n-                    }}\r\n-                />\r\n-            </div>\r\n-\r\n-            {/* Time Picker */}\r\n-            <div>\r\n-                <label className=\"block text-sm mb-2 text-gray-300\">\r\n-                    Select Time\r\n-                </label>\r\n-\r\n-                {/* Mobile: iPhone-style scroll input */}\r\n-                <input\r\n-                    type=\"time\"\r\n-                    min=\"07:00\"\r\n-                    max=\"19:00\"\r\n-                    step=\"1800\"\r\n-                    value={selectedTime ? convertTo24Hour(selectedTime) : \"\"}\r\n-                    onChange={(e) =>\r\n-                        setSelectedTime(convertTo12Hour(e.target.value))\r\n-                    }\r\n-                    className=\"block w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none sm:hidden\"\r\n-                />\r\n-\r\n-                {/* Desktop: dropdown */}\r\n-                <select\r\n-                    value={selectedTime}\r\n-                    onChange={(e) => setSelectedTime(e.target.value)}\r\n-                    className=\"hidden sm:block w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none\"\r\n-                >\r\n-                    <option value=\"\">-- Select Time --</option>\r\n-                    {times.map((t) => (\r\n-                        <option key={t} value={t}>\r\n-                            {t}\r\n-                        </option>\r\n-                    ))}\r\n-                </select>\r\n-            </div>\r\n-\r\n-            {/* Buttons */}\r\n-            <div className=\"flex justify-between\">\r\n-                <button\r\n-                    type=\"button\"\r\n-                    onClick={onBack}\r\n-                    className=\"py-3 px-6 rounded-lg bg-gray-700 hover:bg-gray-600 font-semibold transition\"\r\n-                >\r\n-                    Back\r\n-                </button>\r\n-\r\n-                <button\r\n-                    type=\"button\"\r\n-                    disabled={!isValid}\r\n-                    onClick={handleNext}\r\n-                    className={`py-3 px-6 rounded-lg font-semibold transition ${\r\n-                        isValid\r\n-                            ? \"bg-orange-500 hover:bg-orange-600\"\r\n-                            : \"bg-gray-600 cursor-not-allowed\"\r\n-                    }`}\r\n-                >\r\n-                    Next\r\n-                </button>\r\n-            </div>\r\n-        </motion.div>\r\n-    );\r\n-}\r\n-\r\n-// Helpers to handle iPhone time input conversion\r\n-function convertTo12Hour(time24) {\r\n-    let [hour, minute] = time24.split(\":\");\r\n-    hour = parseInt(hour, 10);\r\n-    const ampm = hour >= 12 ? \"PM\" : \"AM\";\r\n-    hour = hour % 12 || 12;\r\n-    return `${hour}:${minute} ${ampm}`;\r\n-}\r\n-\r\n-function convertTo24Hour(time12) {\r\n-    if (!time12) return \"\";\r\n-    const [time, modifier] = time12.split(\" \");\r\n-    let [hours, minutes] = time.split(\":\");\r\n-    if (modifier === \"PM\" && hours !== \"12\") {\r\n-        hours = String(parseInt(hours, 10) + 12);\r\n-    }\r\n-    if (modifier === \"AM\" && hours === \"12\") {\r\n-        hours = \"00\";\r\n-    }\r\n-    return `${hours.padStart(2, \"0\")}:${minutes}`;\r\n-}\r\n"
                },
                {
                    "date": 1760030138698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,41 +51,40 @@\n             className=\"space-y-6\"\r\n         >\r\n             {/* Calendar */}\r\n             <div>\r\n-                <label className=\"block text-sm mb-2 text-gray-300\">\r\n+                <label className=\"block text-sm mb-2 text-gray-700\">\r\n                     Select Date\r\n                 </label>\r\n                 <DayPicker\r\n                     mode=\"single\"\r\n                     selected={selectedDay}\r\n                     onSelect={setSelectedDay}\r\n                     disabled={(date) =>\r\n-                        !isWeekend(date) ||\r\n                         (!isAfter(date, today) &&\r\n                             date.toDateString() !== today.toDateString())\r\n                     }\r\n-                    modifiers={{\r\n-                        weekend: (date) => isWeekend(date),\r\n-                    }}\r\n+                    modifiers={{}}\r\n                     modifiersClassNames={{\r\n-                        weekend: \"text-orange-500 font-bold\",\r\n-                        selected:\r\n-                            \"bg-orange-500 text-white font-bold rounded-full\",\r\n+                        selected: \"bg-blue-600 text-white font-bold rounded-full\",\r\n                     }}\r\n+                    className=\"bg-white rounded-lg p-2 border border-blue-100\"\r\n+                    style={{\r\n+                        color: \"#222\",\r\n+                    }}\r\n                 />\r\n             </div>\r\n \r\n             {/* Time Picker */}\r\n             <div>\r\n-                <label className=\"block text-sm mb-2 text-gray-300\">\r\n+                <label className=\"block text-sm mb-2 text-gray-700\">\r\n                     Select Time\r\n                 </label>\r\n \r\n                 <select\r\n                     value={selectedTime}\r\n                     onChange={(e) => setSelectedTime(e.target.value)}\r\n-                    className=\"w-full px-4 py-3 rounded-lg bg-# border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none\"\r\n+                    className=\"w-full px-4 py-3 rounded-lg bg-white border border-blue-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 outline-none text-gray-900\"\r\n                 >\r\n                     <option value=\"\">-- Select Time --</option>\r\n                     {times.map((t) => (\r\n                         <option key={t} value={t}>\r\n@@ -95,25 +94,25 @@\n                 </select>\r\n             </div>\r\n \r\n             {/* Buttons */}\r\n-            <div className=\"flex justify-between\">\r\n+            <div className=\"flex justify-between gap-4\">\r\n                 <button\r\n                     type=\"button\"\r\n                     onClick={onBack}\r\n-                    className=\"py-3 px-6 rounded-lg bg-gray-700 hover:bg-gray-600 font-semibold transition\"\r\n+                    className=\"py-3 px-6 rounded-lg bg-gray-200 hover:bg-gray-300 text-blue-700 font-semibold transition border border-blue-200\"\r\n                 >\r\n                     Back\r\n                 </button>\r\n \r\n                 <button\r\n                     type=\"button\"\r\n                     disabled={!isValid}\r\n                     onClick={handleNext}\r\n-                    className={`py-3 px-6 rounded-lg font-semibold transition ${\r\n+                    className={`py-3 px-6 rounded-lg font-semibold transition border ${\r\n                         isValid\r\n-                            ? \"bg-orange-500 hover:bg-orange-600\"\r\n-                            : \"bg-gray-600 cursor-not-allowed\"\r\n+                            ? \"bg-blue-600 hover:bg-blue-700 text-white border-blue-600\"\r\n+                            : \"bg-gray-200 cursor-not-allowed text-gray-400 border-blue-100\"\r\n                     }`}\r\n                 >\r\n                     Next\r\n                 </button>\r\n"
                },
                {
                    "date": 1760030299223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,144 @@\n+\"use client\";\r\n+import { motion } from \"framer-motion\";\r\n+import { DayPicker } from \"react-day-picker\";\r\n+import \"react-day-picker/dist/style.css\";\r\n+import { isAfter, startOfToday, isWeekend } from \"date-fns\";\r\n+import { useState } from \"react\";\r\n+\r\n+export default function DateTimePicker({\r\n+    dateTime,\r\n+    setDateTime,\r\n+    onNext,\r\n+    onBack,\r\n+}) {\r\n+    const today = startOfToday();\r\n+    const [selectedDay, setSelectedDay] = useState(\r\n+        dateTime.date ? new Date(dateTime.date) : undefined\r\n+    );\r\n+    const [selectedTime, setSelectedTime] = useState(dateTime.time || \"\");\r\n+\r\n+    // Generate times between 7 AM - 7 PM\r\n+    const times = [];\r\n+    for (let h = 7; h <= 19; h++) {\r\n+        const ampm = h < 12 ? \"AM\" : \"PM\";\r\n+        const hour = h % 12 === 0 ? 12 : h % 12;\r\n+        times.push(`${hour}:00 ${ampm}`);\r\n+        times.push(`${hour}:30 ${ampm}`);\r\n+    }\r\n+\r\n+    const isValid = selectedDay && selectedTime;\r\n+\r\n+    const handleNext = () => {\r\n+        if (isValid) {\r\n+            setDateTime({\r\n+                date: selectedDay.toISOString().split(\"T\")[0],\r\n+                time: selectedTime,\r\n+            });\r\n+            onNext({\r\n+                date: selectedDay.toISOString().split(\"T\")[0],\r\n+                time: selectedTime,\r\n+            });\r\n+        }\r\n+    };\r\n+\r\n+    return (\r\n+        <motion.div\r\n+            key=\"date-time-step\"\r\n+            initial={{ opacity: 0, x: 50 }}\r\n+            animate={{ opacity: 1, x: 0 }}\r\n+            exit={{ opacity: 0, x: -50 }}\r\n+            transition={{ duration: 0.4 }}\r\n+            className=\"space-y-6\"\r\n+        >\r\n+            {/* Calendar */}\r\n+            <div>\r\n+                <label className=\"block text-sm mb-2 text-gray-700\">\r\n+                    Select Date\r\n+                </label>\r\n+                <DayPicker\r\n+                    mode=\"single\"\r\n+                    selected={selectedDay}\r\n+                    onSelect={setSelectedDay}\r\n+                    disabled={(date) =>\r\n+                        (!isAfter(date, today) &&\r\n+                            date.toDateString() !== today.toDateString())\r\n+                    }\r\n+                    modifiers={{}}\r\n+                    modifiersClassNames={{\r\n+                        selected: \"bg-blue-600 text-white font-bold rounded-full\",\r\n+                    }}\r\n+                    className=\"bg-white rounded-lg p-2 border border-blue-100\"\r\n+                    style={{\r\n+                        color: \"#222\",\r\n+                    }}\r\n+                />\r\n+            </div>\r\n+\r\n+            {/* Time Picker */}\r\n+            <div>\r\n+                <label className=\"block text-sm mb-2 text-gray-700\">\r\n+                    Select Time\r\n+                </label>\r\n+\r\n+                <select\r\n+                    value={selectedTime}\r\n+                    onChange={(e) => setSelectedTime(e.target.value)}\r\n+                    className=\"w-full px-4 py-3 rounded-lg bg-white border border-blue-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 outline-none text-gray-900\"\r\n+                >\r\n+                    <option value=\"\">-- Select Time --</option>\r\n+                    {times.map((t) => (\r\n+                        <option key={t} value={t}>\r\n+                            {t}\r\n+                        </option>\r\n+                    ))}\r\n+                </select>\r\n+            </div>\r\n+\r\n+            {/* Buttons */}\r\n+            <div className=\"flex justify-between gap-4\">\r\n+                <button\r\n+                    type=\"button\"\r\n+                    onClick={onBack}\r\n+                    className=\"py-3 px-6 rounded-lg bg-gray-200 hover:bg-gray-300 text-blue-700 font-semibold transition border border-blue-200\"\r\n+                >\r\n+                    Back\r\n+                </button>\r\n+\r\n+                <button\r\n+                    type=\"button\"\r\n+                    disabled={!isValid}\r\n+                    onClick={handleNext}\r\n+                    className={`py-3 px-6 rounded-lg font-semibold transition border ${\r\n+                        isValid\r\n+                            ? \"bg-blue-600 hover:bg-blue-700 text-white border-blue-600\"\r\n+                            : \"bg-gray-200 cursor-not-allowed text-gray-400 border-blue-100\"\r\n+                    }`}\r\n+                >\r\n+                    Next\r\n+                </button>\r\n+            </div>\r\n+        </motion.div>\r\n+    );\r\n+}\r\n+\r\n+// Helpers to handle iPhone time input conversion\r\n+function convertTo12Hour(time24) {\r\n+    let [hour, minute] = time24.split(\":\");\r\n+    hour = parseInt(hour, 10);\r\n+    const ampm = hour >= 12 ? \"PM\" : \"AM\";\r\n+    hour = hour % 12 || 12;\r\n+    return `${hour}:${minute} ${ampm}`;\r\n+}\r\n+\r\n+function convertTo24Hour(time12) {\r\n+    if (!time12) return \"\";\r\n+    const [time, modifier] = time12.split(\" \");\r\n+    let [hours, minutes] = time.split(\":\");\r\n+    if (modifier === \"PM\" && hours !== \"12\") {\r\n+        hours = String(parseInt(hours, 10) + 12);\r\n+    }\r\n+    if (modifier === \"AM\" && hours === \"12\") {\r\n+        hours = \"00\";\r\n+    }\r\n+    return `${hours.padStart(2, \"0\")}:${minutes}`;\r\n+}\r\n"
                },
                {
                    "date": 1760156099979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,189 @@\n+\"use client\";\r\n+import { motion } from \"framer-motion\";\r\n+import { DayPicker } from \"react-day-picker\";\r\n+import \"react-day-picker/dist/style.css\";\r\n+import { isBefore, startOfToday } from \"date-fns\";\r\n+import { useState } from \"react\";\r\n+\r\n+export default function DateTimePicker({\r\n+    dateTime,\r\n+    setDateTime,\r\n+    onNext,\r\n+    onBack,\r\n+    durationMinutes = 60, // added\r\n+}) {\r\n+    const today = startOfToday();\r\n+    const [selectedDay, setSelectedDay] = useState(\r\n+        dateTime.date ? new Date(dateTime.date) : undefined\r\n+    );\r\n+    const [selectedTime, setSelectedTime] = useState(dateTime.time || \"\");\r\n+    const [showValidation, setShowValidation] = useState(false);\r\n+\r\n+    // Generate times between 7 AM - 7 PM\r\n+    const times = [];\r\n+    for (let h = 7; h <= 19; h++) {\r\n+        const ampm = h < 12 ? \"AM\" : \"PM\";\r\n+        const hour = h % 12 === 0 ? 12 : h % 12;\r\n+        times.push(`${hour}:00 ${ampm}`);\r\n+        times.push(`${hour}:30 ${ampm}`);\r\n+    }\r\n+\r\n+    // Filter times that cannot accommodate the full duration before 7:00 PM\r\n+    const baseDate = selectedDay || today;\r\n+    const endOfDay = new Date(baseDate);\r\n+    endOfDay.setHours(19, 0, 0, 0);\r\n+\r\n+    const timeStringToDate = (timeStr, base) => {\r\n+        const [time, meridiem] = timeStr.split(\" \");\r\n+        const [hh, mm] = time.split(\":\");\r\n+        let h = parseInt(hh, 10);\r\n+        const m = parseInt(mm, 10);\r\n+        if (meridiem === \"PM\" && h !== 12) h += 12;\r\n+        if (meridiem === \"AM\" && h === 12) h = 0;\r\n+        const d = new Date(base);\r\n+        d.setHours(h, m, 0, 0);\r\n+        return d;\r\n+    };\r\n+\r\n+    const filteredTimes = times.filter((t) => {\r\n+        const start = timeStringToDate(t, baseDate);\r\n+        const finish = new Date(start.getTime() + durationMinutes * 60000);\r\n+        return finish <= endOfDay;\r\n+    });\r\n+\r\n+    const isValid = selectedDay && selectedTime;\r\n+\r\n+    const handleNext = () => {\r\n+        if (!isValid) {\r\n+            setShowValidation(true);\r\n+            return;\r\n+        }\r\n+\r\n+        const formattedDate = selectedDay.toISOString().split(\"T\")[0];\r\n+        setShowValidation(false);\r\n+        setDateTime({\r\n+            date: formattedDate,\r\n+            time: selectedTime,\r\n+        });\r\n+        onNext({\r\n+            date: formattedDate,\r\n+            time: selectedTime,\r\n+        });\r\n+    };\r\n+\r\n+    const durationHoursText =\r\n+        Number.isInteger(durationMinutes / 60)\r\n+            ? durationMinutes / 60\r\n+            : (durationMinutes / 60).toFixed(1);\r\n+\r\n+    return (\r\n+        <motion.div\r\n+            key=\"date-time-step\"\r\n+            initial={{ opacity: 0, x: 50 }}\r\n+            animate={{ opacity: 1, x: 0 }}\r\n+            exit={{ opacity: 0, x: -50 }}\r\n+            transition={{ duration: 0.4 }}\r\n+            className=\"space-y-6\"\r\n+        >\r\n+            {/* Calendar */}\r\n+            <div>\r\n+                <label className=\"block text-sm mb-2 text-gray-700\">\r\n+                    Select Date\r\n+                </label>\r\n+                <DayPicker\r\n+                    mode=\"single\"\r\n+                    selected={selectedDay}\r\n+                    onSelect={(day) => {\r\n+                        setSelectedDay(day);\r\n+                        if (day && selectedTime) {\r\n+                            setShowValidation(false);\r\n+                        }\r\n+                    }}\r\n+                    disabled={(date) => isBefore(date, today)}\r\n+                    modifiers={{}}\r\n+                    modifiersClassNames={{\r\n+                        selected: \"bg-blue-600 text-white font-bold rounded-full\",\r\n+                    }}\r\n+                    className=\"bg-white rounded-lg p-2 border border-blue-100\"\r\n+                    style={{\r\n+                        color: \"#222\",\r\n+                    }}\r\n+                />\r\n+                <p className=\"text-xs text-gray-500 mt-2\">\r\n+                    Bookings start from today onward. We&apos;ll confirm any same-day\r\n+                    requests as soon as possible.\r\n+                </p>\r\n+                {showValidation && !selectedDay && (\r\n+                    <p className=\"text-sm text-red-600 mt-2\">\r\n+                        Please choose a future appointment date.\r\n+                    </p>\r\n+                )}\r\n+            </div>\r\n+\r\n+            {/* Time Picker */}\r\n+            <div>\r\n+                <label htmlFor=\"time\" className=\"block text-sm mb-2 text-gray-700\">\r\n+                    Select Time\r\n+                </label>\r\n+\r\n+                <select\r\n+                    id=\"time\"\r\n+                    value={selectedTime}\r\n+                    onChange={(e) => {\r\n+                        const value = e.target.value;\r\n+                        setSelectedTime(value);\r\n+                        if (value && selectedDay) {\r\n+                            setShowValidation(false);\r\n+                        }\r\n+                    }}\r\n+                    className=\"w-full px-4 py-3 rounded-lg bg-white border border-blue-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 outline-none text-gray-900\"\r\n+                    required\r\n+                    aria-required=\"true\"\r\n+                >\r\n+                    <option value=\"\">-- Select Time --</option>\r\n+                    {filteredTimes.map((t) => (\r\n+                        <option key={t} value={t}>\r\n+                            {t}\r\n+                        </option>\r\n+                    ))}\r\n+                </select>\r\n+                <p className=\"text-xs text-gray-500 mt-2\">\r\n+                    Times are available in 30-minute intervals between 7:00 AM and\r\n+                    7:00 PM.\r\n+                </p>\r\n+                <p className=\"text-xs text-gray-600\">\r\n+                    This service takes {durationHoursText} hours.\r\n+                </p>\r\n+                {showValidation && !selectedTime && (\r\n+                    <p className=\"text-sm text-red-600 mt-2\">\r\n+                        Please pick a time slot to continue.\r\n+                    </p>\r\n+                )}\r\n+            </div>\r\n+\r\n+            {/* Buttons */}\r\n+            <div className=\"flex justify-between gap-4\">\r\n+                <button\r\n+                    type=\"button\"\r\n+                    onClick={onBack}\r\n+                    className=\"py-3 px-6 rounded-lg bg-gray-200 hover:bg-gray-300 text-blue-700 font-semibold transition border border-blue-200\"\r\n+                >\r\n+                    Back\r\n+                </button>\r\n+\r\n+                <button\r\n+                    type=\"button\"\r\n+                    onClick={handleNext}\r\n+                    aria-disabled={!isValid}\r\n+                    className={`py-3 px-6 rounded-lg font-semibold transition border ${\r\n+                        isValid\r\n+                            ? \"bg-blue-600 hover:bg-blue-700 text-white border-blue-600\"\r\n+                            : \"bg-gray-200 cursor-not-allowed text-gray-400 border-blue-100\"\r\n+                    }`}\r\n+                >\r\n+                    Next\r\n+                </button>\r\n+            </div>\r\n+        </motion.div>\r\n+    );\r\n+}\r\n"
                }
            ],
            "date": 1757948679742,
            "name": "Commit-0",
            "content": "\"use client\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nexport default function DateTimePicker({ dateTime, setDateTime, onNext, onBack }) {\r\n    const today = new Date().toISOString().split(\"T\")[0]; // disable past dates\r\n    const times = [\r\n        \"09:00 AM\", \"10:00 AM\", \"11:00 AM\",\r\n        \"12:00 PM\", \"01:00 PM\", \"02:00 PM\",\r\n        \"03:00 PM\", \"04:00 PM\", \"05:00 PM\"\r\n    ];\r\n\r\n    const isValid = dateTime.date && dateTime.time;\r\n\r\n    return (\r\n        <motion.div\r\n            key=\"date-time-step\"\r\n            initial={{ opacity: 0, x: 50 }}\r\n            animate={{ opacity: 1, x: 0 }}\r\n            exit={{ opacity: 0, x: -50 }}\r\n            transition={{ duration: 0.4 }}\r\n            className=\"space-y-4\"\r\n        >\r\n            <div>\r\n                <label className=\"block text-sm mb-1\">Select Date</label>\r\n                <input\r\n                    type=\"date\"\r\n                    min={today}\r\n                    value={dateTime.date}\r\n                    onChange={(e) => setDateTime((prev) => ({ ...prev, date: e.target.value }))}\r\n                    className=\"w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none\"\r\n                    required\r\n                />\r\n            </div>\r\n\r\n            <div>\r\n                <label className=\"block text-sm mb-1\">Select Time</label>\r\n                <select\r\n                    value={dateTime.time}\r\n                    onChange={(e) => setDateTime((prev) => ({ ...prev, time: e.target.value }))}\r\n                    className=\"w-full px-4 py-3 rounded-lg bg-black/30 border border-gray-600 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 outline-none\"\r\n                    required\r\n                >\r\n                    <option value=\"\">-- Select Time --</option>\r\n                    {times.map((t) => (\r\n                        <option key={t} value={t}>{t}</option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n\r\n            <div className=\"flex justify-between\">\r\n                <button\r\n                    type=\"button\"\r\n                    onClick={onBack}\r\n                    className=\"py-3 px-6 rounded-lg bg-gray-700 hover:bg-gray-600 font-semibold transition\"\r\n                >\r\n                    Back\r\n                </button>\r\n\r\n                <button\r\n                    type=\"button\"\r\n                    disabled={!isValid}\r\n                    onClick={() => onNext(dateTime)}\r\n                    className={`py-3 px-6 rounded-lg font-semibold transition ${\r\n                        isValid\r\n                            ? \"bg-orange-500 hover:bg-orange-600\"\r\n                            : \"bg-gray-600 cursor-not-allowed\"\r\n                    }`}\r\n                >\r\n                    Next\r\n                </button>\r\n            </div>\r\n        </motion.div>\r\n    );\r\n}\r\n"
        }
    ]
}